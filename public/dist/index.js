(function(window){
// This is called with the results from from FB.getLoginStatus().
function statusChangeCallback(response) {
  // The response object is returned with a status field that lets the
  // app know the current login status of the person.
  // Full docs on the response object can be found in the documentation
  // for FB.getLoginStatus().

  // backbone model
  //loginModel.set('loginStatus', response.status);

  if (response.status === 'connected') {
    // Logged into your app and Facebook.
    testAPI();
  } else if (response.status === 'not_authorized') {
    // The person is logged into Facebook, but not your app.
    document.getElementById('status').innerHTML = 'Please log ' +
      'into this app.';
  } else {
    // The person is not logged into Facebook, so we're not sure if
    // they are logged into this app or not.
    document.getElementById('status').innerHTML = 'Please log ' +
      'into Facebook.';
  }
}

// This function is called when someone finishes with the Login
// Button.  See the onlogin handler attached to it in the sample
// code below.
// It is attached to window so <fb-login> element can access it onload
window.checkLoginState = function() {
  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });
}

window.fbAsyncInit = function() {
  $.get('/fbconfig').then(function(id){

    FB.init({
      appId      : id || appConfig.fbId,
      status     : true,
      cookie     : true,  // enable cookies to allow the server to access
                          // the session
      xfbml      : true,  // parse social plugins on this page
      version    : 'v1.0' // use version 2.1
    });
    setTimeout(function(){
      checkLoginState();
    });
  })

    // Now that we've initialized the JavaScript SDK, we call
    // FB.getLoginStatus() from within checkLoginState().  This function gets the state of the
    // person visiting this page and can return one of three states to
    // the callback you provide.  They can be:
    //
    // 1. Logged into your app ('connected')
    // 2. Logged into Facebook, but not your app ('not_authorized')
    // 3. Not logged into Facebook and can't tell if they are logged into
    //    your app or not.
    //
    // These three cases are handled in the callback function.

};

// Load the SDK asynchronously
(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));

// Here we run a very simple test of the Graph API after login is
// successful.  See statusChangeCallback() for when this call is made.
// successful response adds property FB.dataGlobeUserLocation with latitude, longitude for initial user graph node
function testAPI() {
  FB.api('/me',
    function(response) {
      document.getElementById('status').innerHTML = 'Thanks for logging in, ' + response.name + '!';
      FB.api('/fql',
        {
          q: "SELECT current_location.latitude, current_location.longitude, first_name, last_name, uid, pic_square FROM user WHERE uid = me()"
        },
        function(response){
          $.post('/api/save-user', {user: response.data}, function(){
            login.trigger('render');
          });
          // globeView.render
            // clear out dom
            // load client_rendering
            // else login view
        }
      );
  });
}

})(window);
;/**
 * @author mrdoob / http://mrdoob.com/
 * @author Larry Battle / http://bateru.com/news
 * @author bhouston / http://exocortex.com
 */

var THREE = { REVISION: '67' };

self.console = self.console || {

  info: function () {},
  log: function () {},
  debug: function () {},
  warn: function () {},
  error: function () {}

};

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik MÃ¶ller
// fixes from Paul Irish and Tino Zijdel
// using 'self' instead of 'window' for compatibility with both NodeJS and IE10.
( function () {

  var lastTime = 0;
  var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

  for ( var x = 0; x < vendors.length && !self.requestAnimationFrame; ++ x ) {

    self.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];
    self.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];

  }

  if ( self.requestAnimationFrame === undefined && self['setTimeout'] !== undefined ) {

    self.requestAnimationFrame = function ( callback ) {

      var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
      var id = self.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );
      lastTime = currTime + timeToCall;
      return id;

    };

  }

  if( self.cancelAnimationFrame === undefined && self['clearTimeout'] !== undefined ) {

    self.cancelAnimationFrame = function ( id ) { self.clearTimeout( id ) };

  }

}() );

// GL STATE CONSTANTS

THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;

THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;

// SHADOWING TYPES

THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;

// MATERIAL CONSTANTS

// side

THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;

// shading

THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;

// colors

THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;

// blending modes

THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;

// custom blending equations
// (numbers start from 100 not to clash with other
//  mappings to OpenGL constants defined in Texture.js)

THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;

// custom blending destination factors

THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;

// custom blending source factors

//THREE.ZeroFactor = 200;
//THREE.OneFactor = 201;
//THREE.SrcAlphaFactor = 204;
//THREE.OneMinusSrcAlphaFactor = 205;
//THREE.DstAlphaFactor = 206;
//THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;


// TEXTURE CONSTANTS

THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;

// Mapping modes

THREE.UVMapping = function () {};

THREE.CubeReflectionMapping = function () {};
THREE.CubeRefractionMapping = function () {};

THREE.SphericalReflectionMapping = function () {};
THREE.SphericalRefractionMapping = function () {};

// Wrapping modes

THREE.RepeatWrapping = 1000;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;

// Filters

THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;

// Data types

THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;

// Pixel types

//THREE.UnsignedByteType = 1009;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;

// Pixel formats

THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;

// Compressed texture formats

THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;

/*
// Potential future PVRTC compressed texture formats
THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
*/

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Color = function ( color ) {

  if ( arguments.length === 3 ) {

    return this.setRGB( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );

  }

  return this.set( color )

};

THREE.Color.prototype = {

  constructor: THREE.Color,

  r: 1, g: 1, b: 1,

  set: function ( value ) {

    if ( value instanceof THREE.Color ) {

      this.copy( value );

    } else if ( typeof value === 'number' ) {

      this.setHex( value );

    } else if ( typeof value === 'string' ) {

      this.setStyle( value );

    }

    return this;

  },

  setHex: function ( hex ) {

    hex = Math.floor( hex );

    this.r = ( hex >> 16 & 255 ) / 255;
    this.g = ( hex >> 8 & 255 ) / 255;
    this.b = ( hex & 255 ) / 255;

    return this;

  },

  setRGB: function ( r, g, b ) {

    this.r = r;
    this.g = g;
    this.b = b;

    return this;

  },

  setHSL: function ( h, s, l ) {

    // h,s,l ranges are in 0.0 - 1.0

    if ( s === 0 ) {

      this.r = this.g = this.b = l;

    } else {

      var hue2rgb = function ( p, q, t ) {

        if ( t < 0 ) t += 1;
        if ( t > 1 ) t -= 1;
        if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
        if ( t < 1 / 2 ) return q;
        if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
        return p;

      };

      var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
      var q = ( 2 * l ) - p;

      this.r = hue2rgb( q, p, h + 1 / 3 );
      this.g = hue2rgb( q, p, h );
      this.b = hue2rgb( q, p, h - 1 / 3 );

    }

    return this;

  },

  setStyle: function ( style ) {

    // rgb(255,0,0)

    if ( /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test( style ) ) {

      var color = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec( style );

      this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
      this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
      this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

      return this;

    }

    // rgb(100%,0%,0%)

    if ( /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test( style ) ) {

      var color = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec( style );

      this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
      this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
      this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

      return this;

    }

    // #ff0000

    if ( /^\#([0-9a-f]{6})$/i.test( style ) ) {

      var color = /^\#([0-9a-f]{6})$/i.exec( style );

      this.setHex( parseInt( color[ 1 ], 16 ) );

      return this;

    }

    // #f00

    if ( /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {

      var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );

      this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );

      return this;

    }

    // red

    if ( /^(\w+)$/i.test( style ) ) {

      this.setHex( THREE.ColorKeywords[ style ] );

      return this;

    }


  },

  copy: function ( color ) {

    this.r = color.r;
    this.g = color.g;
    this.b = color.b;

    return this;

  },

  copyGammaToLinear: function ( color ) {

    this.r = color.r * color.r;
    this.g = color.g * color.g;
    this.b = color.b * color.b;

    return this;

  },

  copyLinearToGamma: function ( color ) {

    this.r = Math.sqrt( color.r );
    this.g = Math.sqrt( color.g );
    this.b = Math.sqrt( color.b );

    return this;

  },

  convertGammaToLinear: function () {

    var r = this.r, g = this.g, b = this.b;

    this.r = r * r;
    this.g = g * g;
    this.b = b * b;

    return this;

  },

  convertLinearToGamma: function () {

    this.r = Math.sqrt( this.r );
    this.g = Math.sqrt( this.g );
    this.b = Math.sqrt( this.b );

    return this;

  },

  getHex: function () {

    return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

  },

  getHexString: function () {

    return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

  },

  getHSL: function ( optionalTarget ) {

    // h,s,l ranges are in 0.0 - 1.0

    var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

    var r = this.r, g = this.g, b = this.b;

    var max = Math.max( r, g, b );
    var min = Math.min( r, g, b );

    var hue, saturation;
    var lightness = ( min + max ) / 2.0;

    if ( min === max ) {

      hue = 0;
      saturation = 0;

    } else {

      var delta = max - min;

      saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

      switch ( max ) {

        case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
        case g: hue = ( b - r ) / delta + 2; break;
        case b: hue = ( r - g ) / delta + 4; break;

      }

      hue /= 6;

    }

    hsl.h = hue;
    hsl.s = saturation;
    hsl.l = lightness;

    return hsl;

  },

  getStyle: function () {

    return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

  },

  offsetHSL: function ( h, s, l ) {

    var hsl = this.getHSL();

    hsl.h += h; hsl.s += s; hsl.l += l;

    this.setHSL( hsl.h, hsl.s, hsl.l );

    return this;

  },

  add: function ( color ) {

    this.r += color.r;
    this.g += color.g;
    this.b += color.b;

    return this;

  },

  addColors: function ( color1, color2 ) {

    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;

    return this;

  },

  addScalar: function ( s ) {

    this.r += s;
    this.g += s;
    this.b += s;

    return this;

  },

  multiply: function ( color ) {

    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;

    return this;

  },

  multiplyScalar: function ( s ) {

    this.r *= s;
    this.g *= s;
    this.b *= s;

    return this;

  },

  lerp: function ( color, alpha ) {

    this.r += ( color.r - this.r ) * alpha;
    this.g += ( color.g - this.g ) * alpha;
    this.b += ( color.b - this.b ) * alpha;

    return this;

  },

  equals: function ( c ) {

    return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

  },

  fromArray: function ( array ) {

    this.r = array[ 0 ];
    this.g = array[ 1 ];
    this.b = array[ 2 ];

    return this;

  },

  toArray: function () {

    return [ this.r, this.g, this.b ];

  },

  clone: function () {

    return new THREE.Color().setRGB( this.r, this.g, this.b );

  }

};

THREE.ColorKeywords = { "aliceblue": 0xF0F8FF, "antiquewhite": 0xFAEBD7, "aqua": 0x00FFFF, "aquamarine": 0x7FFFD4, "azure": 0xF0FFFF,
"beige": 0xF5F5DC, "bisque": 0xFFE4C4, "black": 0x000000, "blanchedalmond": 0xFFEBCD, "blue": 0x0000FF, "blueviolet": 0x8A2BE2,
"brown": 0xA52A2A, "burlywood": 0xDEB887, "cadetblue": 0x5F9EA0, "chartreuse": 0x7FFF00, "chocolate": 0xD2691E, "coral": 0xFF7F50,
"cornflowerblue": 0x6495ED, "cornsilk": 0xFFF8DC, "crimson": 0xDC143C, "cyan": 0x00FFFF, "darkblue": 0x00008B, "darkcyan": 0x008B8B,
"darkgoldenrod": 0xB8860B, "darkgray": 0xA9A9A9, "darkgreen": 0x006400, "darkgrey": 0xA9A9A9, "darkkhaki": 0xBDB76B, "darkmagenta": 0x8B008B,
"darkolivegreen": 0x556B2F, "darkorange": 0xFF8C00, "darkorchid": 0x9932CC, "darkred": 0x8B0000, "darksalmon": 0xE9967A, "darkseagreen": 0x8FBC8F,
"darkslateblue": 0x483D8B, "darkslategray": 0x2F4F4F, "darkslategrey": 0x2F4F4F, "darkturquoise": 0x00CED1, "darkviolet": 0x9400D3,
"deeppink": 0xFF1493, "deepskyblue": 0x00BFFF, "dimgray": 0x696969, "dimgrey": 0x696969, "dodgerblue": 0x1E90FF, "firebrick": 0xB22222,
"floralwhite": 0xFFFAF0, "forestgreen": 0x228B22, "fuchsia": 0xFF00FF, "gainsboro": 0xDCDCDC, "ghostwhite": 0xF8F8FF, "gold": 0xFFD700,
"goldenrod": 0xDAA520, "gray": 0x808080, "green": 0x008000, "greenyellow": 0xADFF2F, "grey": 0x808080, "honeydew": 0xF0FFF0, "hotpink": 0xFF69B4,
"indianred": 0xCD5C5C, "indigo": 0x4B0082, "ivory": 0xFFFFF0, "khaki": 0xF0E68C, "lavender": 0xE6E6FA, "lavenderblush": 0xFFF0F5, "lawngreen": 0x7CFC00,
"lemonchiffon": 0xFFFACD, "lightblue": 0xADD8E6, "lightcoral": 0xF08080, "lightcyan": 0xE0FFFF, "lightgoldenrodyellow": 0xFAFAD2, "lightgray": 0xD3D3D3,
"lightgreen": 0x90EE90, "lightgrey": 0xD3D3D3, "lightpink": 0xFFB6C1, "lightsalmon": 0xFFA07A, "lightseagreen": 0x20B2AA, "lightskyblue": 0x87CEFA,
"lightslategray": 0x778899, "lightslategrey": 0x778899, "lightsteelblue": 0xB0C4DE, "lightyellow": 0xFFFFE0, "lime": 0x00FF00, "limegreen": 0x32CD32,
"linen": 0xFAF0E6, "magenta": 0xFF00FF, "maroon": 0x800000, "mediumaquamarine": 0x66CDAA, "mediumblue": 0x0000CD, "mediumorchid": 0xBA55D3,
"mediumpurple": 0x9370DB, "mediumseagreen": 0x3CB371, "mediumslateblue": 0x7B68EE, "mediumspringgreen": 0x00FA9A, "mediumturquoise": 0x48D1CC,
"mediumvioletred": 0xC71585, "midnightblue": 0x191970, "mintcream": 0xF5FFFA, "mistyrose": 0xFFE4E1, "moccasin": 0xFFE4B5, "navajowhite": 0xFFDEAD,
"navy": 0x000080, "oldlace": 0xFDF5E6, "olive": 0x808000, "olivedrab": 0x6B8E23, "orange": 0xFFA500, "orangered": 0xFF4500, "orchid": 0xDA70D6,
"palegoldenrod": 0xEEE8AA, "palegreen": 0x98FB98, "paleturquoise": 0xAFEEEE, "palevioletred": 0xDB7093, "papayawhip": 0xFFEFD5, "peachpuff": 0xFFDAB9,
"peru": 0xCD853F, "pink": 0xFFC0CB, "plum": 0xDDA0DD, "powderblue": 0xB0E0E6, "purple": 0x800080, "red": 0xFF0000, "rosybrown": 0xBC8F8F,
"royalblue": 0x4169E1, "saddlebrown": 0x8B4513, "salmon": 0xFA8072, "sandybrown": 0xF4A460, "seagreen": 0x2E8B57, "seashell": 0xFFF5EE,
"sienna": 0xA0522D, "silver": 0xC0C0C0, "skyblue": 0x87CEEB, "slateblue": 0x6A5ACD, "slategray": 0x708090, "slategrey": 0x708090, "snow": 0xFFFAFA,
"springgreen": 0x00FF7F, "steelblue": 0x4682B4, "tan": 0xD2B48C, "teal": 0x008080, "thistle": 0xD8BFD8, "tomato": 0xFF6347, "turquoise": 0x40E0D0,
"violet": 0xEE82EE, "wheat": 0xF5DEB3, "white": 0xFFFFFF, "whitesmoke": 0xF5F5F5, "yellow": 0xFFFF00, "yellowgreen": 0x9ACD32 };

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Quaternion = function ( x, y, z, w ) {

  this._x = x || 0;
  this._y = y || 0;
  this._z = z || 0;
  this._w = ( w !== undefined ) ? w : 1;

};

THREE.Quaternion.prototype = {

  constructor: THREE.Quaternion,

  _x: 0,_y: 0, _z: 0, _w: 0,

  get x () {

    return this._x;

  },

  set x ( value ) {

    this._x = value;
    this.onChangeCallback();

  },

  get y () {

    return this._y;

  },

  set y ( value ) {

    this._y = value;
    this.onChangeCallback();

  },

  get z () {

    return this._z;

  },

  set z ( value ) {

    this._z = value;
    this.onChangeCallback();

  },

  get w () {

    return this._w;

  },

  set w ( value ) {

    this._w = value;
    this.onChangeCallback();

  },

  set: function ( x, y, z, w ) {

    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;

    this.onChangeCallback();

    return this;

  },

  copy: function ( quaternion ) {

    this._x = quaternion._x;
    this._y = quaternion._y;
    this._z = quaternion._z;
    this._w = quaternion._w;

    this.onChangeCallback();

    return this;

  },

  setFromEuler: function ( euler, update ) {

    if ( euler instanceof THREE.Euler === false ) {

      throw new Error( 'ERROR: Quaternion\'s .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );
    }

    // http://www.mathworks.com/matlabcentral/fileexchange/
    //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    //  content/SpinCalc.m

    var c1 = Math.cos( euler._x / 2 );
    var c2 = Math.cos( euler._y / 2 );
    var c3 = Math.cos( euler._z / 2 );
    var s1 = Math.sin( euler._x / 2 );
    var s2 = Math.sin( euler._y / 2 );
    var s3 = Math.sin( euler._z / 2 );

    if ( euler.order === 'XYZ' ) {

      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( euler.order === 'YXZ' ) {

      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;

    } else if ( euler.order === 'ZXY' ) {

      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( euler.order === 'ZYX' ) {

      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;

    } else if ( euler.order === 'YZX' ) {

      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;

    } else if ( euler.order === 'XZY' ) {

      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;

    }

    if ( update !== false ) this.onChangeCallback();

    return this;

  },

  setFromAxisAngle: function ( axis, angle ) {

    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

    // assumes axis is normalized

    var halfAngle = angle / 2, s = Math.sin( halfAngle );

    this._x = axis.x * s;
    this._y = axis.y * s;
    this._z = axis.z * s;
    this._w = Math.cos( halfAngle );

    this.onChangeCallback();

    return this;

  },

  setFromRotationMatrix: function ( m ) {

    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    var te = m.elements,

      m11 = te[0], m12 = te[4], m13 = te[8],
      m21 = te[1], m22 = te[5], m23 = te[9],
      m31 = te[2], m32 = te[6], m33 = te[10],

      trace = m11 + m22 + m33,
      s;

    if ( trace > 0 ) {

      s = 0.5 / Math.sqrt( trace + 1.0 );

      this._w = 0.25 / s;
      this._x = ( m32 - m23 ) * s;
      this._y = ( m13 - m31 ) * s;
      this._z = ( m21 - m12 ) * s;

    } else if ( m11 > m22 && m11 > m33 ) {

      s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

      this._w = (m32 - m23 ) / s;
      this._x = 0.25 * s;
      this._y = (m12 + m21 ) / s;
      this._z = (m13 + m31 ) / s;

    } else if ( m22 > m33 ) {

      s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

      this._w = (m13 - m31 ) / s;
      this._x = (m12 + m21 ) / s;
      this._y = 0.25 * s;
      this._z = (m23 + m32 ) / s;

    } else {

      s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

      this._w = ( m21 - m12 ) / s;
      this._x = ( m13 + m31 ) / s;
      this._y = ( m23 + m32 ) / s;
      this._z = 0.25 * s;

    }

    this.onChangeCallback();

    return this;

  },

  setFromUnitVectors: function () {

    // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

    // assumes direction vectors vFrom and vTo are normalized

    var v1, r;

    var EPS = 0.000001;

    return function( vFrom, vTo ) {

      if ( v1 === undefined ) v1 = new THREE.Vector3();

      r = vFrom.dot( vTo ) + 1;

      if ( r < EPS ) {

        r = 0;

        if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

          v1.set( - vFrom.y, vFrom.x, 0 );

        } else {

          v1.set( 0, - vFrom.z, vFrom.y );

        }

      } else {

        v1.crossVectors( vFrom, vTo );

      }

      this._x = v1.x;
      this._y = v1.y;
      this._z = v1.z;
      this._w = r;

      this.normalize();

      return this;

    }

  }(),

  inverse: function () {

    this.conjugate().normalize();

    return this;

  },

  conjugate: function () {

    this._x *= -1;
    this._y *= -1;
    this._z *= -1;

    this.onChangeCallback();

    return this;

  },

  lengthSq: function () {

    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

  },

  length: function () {

    return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

  },

  normalize: function () {

    var l = this.length();

    if ( l === 0 ) {

      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;

    } else {

      l = 1 / l;

      this._x = this._x * l;
      this._y = this._y * l;
      this._z = this._z * l;
      this._w = this._w * l;

    }

    this.onChangeCallback();

    return this;

  },

  multiply: function ( q, p ) {

    if ( p !== undefined ) {

      console.warn( 'DEPRECATED: Quaternion\'s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
      return this.multiplyQuaternions( q, p );

    }

    return this.multiplyQuaternions( this, q );

  },

  multiplyQuaternions: function ( a, b ) {

    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

    var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

    this.onChangeCallback();

    return this;

  },

  multiplyVector3: function ( vector ) {

    console.warn( 'DEPRECATED: Quaternion\'s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
    return vector.applyQuaternion( this );

  },

  slerp: function ( qb, t ) {

    var x = this._x, y = this._y, z = this._z, w = this._w;

    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

    if ( cosHalfTheta < 0 ) {

      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;

      cosHalfTheta = -cosHalfTheta;

    } else {

      this.copy( qb );

    }

    if ( cosHalfTheta >= 1.0 ) {

      this._w = w;
      this._x = x;
      this._y = y;
      this._z = z;

      return this;

    }

    var halfTheta = Math.acos( cosHalfTheta );
    var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

    if ( Math.abs( sinHalfTheta ) < 0.001 ) {

      this._w = 0.5 * ( w + this._w );
      this._x = 0.5 * ( x + this._x );
      this._y = 0.5 * ( y + this._y );
      this._z = 0.5 * ( z + this._z );

      return this;

    }

    var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
    ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

    this._w = ( w * ratioA + this._w * ratioB );
    this._x = ( x * ratioA + this._x * ratioB );
    this._y = ( y * ratioA + this._y * ratioB );
    this._z = ( z * ratioA + this._z * ratioB );

    this.onChangeCallback();

    return this;

  },

  equals: function ( quaternion ) {

    return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

  },

  fromArray: function ( array ) {

    this._x = array[ 0 ];
    this._y = array[ 1 ];
    this._z = array[ 2 ];
    this._w = array[ 3 ];

    this.onChangeCallback();

    return this;

  },

  toArray: function () {

    return [ this._x, this._y, this._z, this._w ];

  },

  onChange: function ( callback ) {

    this.onChangeCallback = callback;

    return this;

  },

  onChangeCallback: function () {},

  clone: function () {

    return new THREE.Quaternion( this._x, this._y, this._z, this._w );

  }

};

THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {

  return qm.copy( qa ).slerp( qb, t );

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.Vector2 = function ( x, y ) {

  this.x = x || 0;
  this.y = y || 0;

};

THREE.Vector2.prototype = {

  constructor: THREE.Vector2,

  set: function ( x, y ) {

    this.x = x;
    this.y = y;

    return this;

  },

  setX: function ( x ) {

    this.x = x;

    return this;

  },

  setY: function ( y ) {

    this.y = y;

    return this;

  },

  setComponent: function ( index, value ) {

    switch ( index ) {

      case 0: this.x = value; break;
      case 1: this.y = value; break;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  getComponent: function ( index ) {

    switch ( index ) {

      case 0: return this.x;
      case 1: return this.y;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  copy: function ( v ) {

    this.x = v.x;
    this.y = v.y;

    return this;

  },

  add: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector2\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
      return this.addVectors( v, w );

    }

    this.x += v.x;
    this.y += v.y;

    return this;

  },

  addVectors: function ( a, b ) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;

    return this;

  },

  addScalar: function ( s ) {

    this.x += s;
    this.y += s;

    return this;

  },

  sub: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector2\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
      return this.subVectors( v, w );

    }

    this.x -= v.x;
    this.y -= v.y;

    return this;

  },

  subVectors: function ( a, b ) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;

    return this;

  },
  
  multiply: function ( v ) {

    this.x *= v.x;
    this.y *= v.y;

    return this;

  },

  multiplyScalar: function ( s ) {

    this.x *= s;
    this.y *= s;

    return this;

  },

  divide: function ( v ) {

    this.x /= v.x;
    this.y /= v.y;

    return this;

  },

  divideScalar: function ( scalar ) {

    if ( scalar !== 0 ) {

      var invScalar = 1 / scalar;

      this.x *= invScalar;
      this.y *= invScalar;

    } else {

      this.x = 0;
      this.y = 0;

    }

    return this;

  },

  min: function ( v ) {

    if ( this.x > v.x ) {

      this.x = v.x;

    }

    if ( this.y > v.y ) {

      this.y = v.y;

    }

    return this;

  },

  max: function ( v ) {

    if ( this.x < v.x ) {

      this.x = v.x;

    }

    if ( this.y < v.y ) {

      this.y = v.y;

    }

    return this;

  },

  clamp: function ( min, max ) {

    // This function assumes min < max, if this assumption isn't true it will not operate correctly

    if ( this.x < min.x ) {

      this.x = min.x;

    } else if ( this.x > max.x ) {

      this.x = max.x;

    }

    if ( this.y < min.y ) {

      this.y = min.y;

    } else if ( this.y > max.y ) {

      this.y = max.y;

    }

    return this;
  },

  clampScalar: ( function () {

    var min, max;

    return function ( minVal, maxVal ) {

      if ( min === undefined ) {

        min = new THREE.Vector2();
        max = new THREE.Vector2();

      }

      min.set( minVal, minVal );
      max.set( maxVal, maxVal );

      return this.clamp( min, max );

    };
    
  } )(),

  floor: function () {

    this.x = Math.floor( this.x );
    this.y = Math.floor( this.y );

    return this;

  },

  ceil: function () {

    this.x = Math.ceil( this.x );
    this.y = Math.ceil( this.y );

    return this;

  },

  round: function () {

    this.x = Math.round( this.x );
    this.y = Math.round( this.y );

    return this;

  },

  roundToZero: function () {

    this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

    return this;

  },

  negate: function () {

    return this.multiplyScalar( - 1 );

  },

  dot: function ( v ) {

    return this.x * v.x + this.y * v.y;

  },

  lengthSq: function () {

    return this.x * this.x + this.y * this.y;

  },

  length: function () {

    return Math.sqrt( this.x * this.x + this.y * this.y );

  },

  normalize: function () {

    return this.divideScalar( this.length() );

  },

  distanceTo: function ( v ) {

    return Math.sqrt( this.distanceToSquared( v ) );

  },

  distanceToSquared: function ( v ) {

    var dx = this.x - v.x, dy = this.y - v.y;
    return dx * dx + dy * dy;

  },

  setLength: function ( l ) {

    var oldLength = this.length();

    if ( oldLength !== 0 && l !== oldLength ) {

      this.multiplyScalar( l / oldLength );
    }

    return this;

  },

  lerp: function ( v, alpha ) {

    this.x += ( v.x - this.x ) * alpha;
    this.y += ( v.y - this.y ) * alpha;

    return this;

  },

  equals: function( v ) {

    return ( ( v.x === this.x ) && ( v.y === this.y ) );

  },

  fromArray: function ( array ) {

    this.x = array[ 0 ];
    this.y = array[ 1 ];

    return this;

  },

  toArray: function () {

    return [ this.x, this.y ];

  },

  clone: function () {

    return new THREE.Vector2( this.x, this.y );

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author *kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector3 = function ( x, y, z ) {

  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;

};

THREE.Vector3.prototype = {

  constructor: THREE.Vector3,

  set: function ( x, y, z ) {

    this.x = x;
    this.y = y;
    this.z = z;

    return this;

  },

  setX: function ( x ) {

    this.x = x;

    return this;

  },

  setY: function ( y ) {

    this.y = y;

    return this;

  },

  setZ: function ( z ) {

    this.z = z;

    return this;

  },

  setComponent: function ( index, value ) {

    switch ( index ) {

      case 0: this.x = value; break;
      case 1: this.y = value; break;
      case 2: this.z = value; break;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  getComponent: function ( index ) {

    switch ( index ) {

      case 0: return this.x;
      case 1: return this.y;
      case 2: return this.z;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  copy: function ( v ) {

    this.x = v.x;
    this.y = v.y;
    this.z = v.z;

    return this;

  },

  add: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector3\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
      return this.addVectors( v, w );

    }

    this.x += v.x;
    this.y += v.y;
    this.z += v.z;

    return this;

  },

  addScalar: function ( s ) {

    this.x += s;
    this.y += s;
    this.z += s;

    return this;

  },

  addVectors: function ( a, b ) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;

    return this;

  },

  sub: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector3\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
      return this.subVectors( v, w );

    }

    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;

    return this;

  },

  subVectors: function ( a, b ) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;

    return this;

  },

  multiply: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector3\'s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
      return this.multiplyVectors( v, w );

    }

    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;

    return this;

  },

  multiplyScalar: function ( scalar ) {

    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;

    return this;

  },

  multiplyVectors: function ( a, b ) {

    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;

    return this;

  },

  applyEuler: function () {

    var quaternion;

    return function ( euler ) {

      if ( euler instanceof THREE.Euler === false ) {

        console.error( 'ERROR: Vector3\'s .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );

      }

      if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

      this.applyQuaternion( quaternion.setFromEuler( euler ) );

      return this;

    };

  }(),

  applyAxisAngle: function () {

    var quaternion;

    return function ( axis, angle ) {

      if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

      this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

      return this;

    };

  }(),

  applyMatrix3: function ( m ) {

    var x = this.x;
    var y = this.y;
    var z = this.z;

    var e = m.elements;

    this.x = e[0] * x + e[3] * y + e[6] * z;
    this.y = e[1] * x + e[4] * y + e[7] * z;
    this.z = e[2] * x + e[5] * y + e[8] * z;

    return this;

  },

  applyMatrix4: function ( m ) {

    // input: THREE.Matrix4 affine matrix

    var x = this.x, y = this.y, z = this.z;

    var e = m.elements;

    this.x = e[0] * x + e[4] * y + e[8]  * z + e[12];
    this.y = e[1] * x + e[5] * y + e[9]  * z + e[13];
    this.z = e[2] * x + e[6] * y + e[10] * z + e[14];

    return this;

  },

  applyProjection: function ( m ) {

    // input: THREE.Matrix4 projection matrix

    var x = this.x, y = this.y, z = this.z;

    var e = m.elements;
    var d = 1 / ( e[3] * x + e[7] * y + e[11] * z + e[15] ); // perspective divide

    this.x = ( e[0] * x + e[4] * y + e[8]  * z + e[12] ) * d;
    this.y = ( e[1] * x + e[5] * y + e[9]  * z + e[13] ) * d;
    this.z = ( e[2] * x + e[6] * y + e[10] * z + e[14] ) * d;

    return this;

  },

  applyQuaternion: function ( q ) {

    var x = this.x;
    var y = this.y;
    var z = this.z;

    var qx = q.x;
    var qy = q.y;
    var qz = q.z;
    var qw = q.w;

    // calculate quat * vector

    var ix =  qw * x + qy * z - qz * y;
    var iy =  qw * y + qz * x - qx * z;
    var iz =  qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat

    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

    return this;

  },

  transformDirection: function ( m ) {

    // input: THREE.Matrix4 affine matrix
    // vector interpreted as a direction

    var x = this.x, y = this.y, z = this.z;

    var e = m.elements;

    this.x = e[0] * x + e[4] * y + e[8]  * z;
    this.y = e[1] * x + e[5] * y + e[9]  * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;

    this.normalize();

    return this;

  },

  divide: function ( v ) {

    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;

    return this;

  },

  divideScalar: function ( scalar ) {

    if ( scalar !== 0 ) {

      var invScalar = 1 / scalar;

      this.x *= invScalar;
      this.y *= invScalar;
      this.z *= invScalar;

    } else {

      this.x = 0;
      this.y = 0;
      this.z = 0;

    }

    return this;

  },

  min: function ( v ) {

    if ( this.x > v.x ) {

      this.x = v.x;

    }

    if ( this.y > v.y ) {

      this.y = v.y;

    }

    if ( this.z > v.z ) {

      this.z = v.z;

    }

    return this;

  },

  max: function ( v ) {

    if ( this.x < v.x ) {

      this.x = v.x;

    }

    if ( this.y < v.y ) {

      this.y = v.y;

    }

    if ( this.z < v.z ) {

      this.z = v.z;

    }

    return this;

  },

  clamp: function ( min, max ) {

    // This function assumes min < max, if this assumption isn't true it will not operate correctly

    if ( this.x < min.x ) {

      this.x = min.x;

    } else if ( this.x > max.x ) {

      this.x = max.x;

    }

    if ( this.y < min.y ) {

      this.y = min.y;

    } else if ( this.y > max.y ) {

      this.y = max.y;

    }

    if ( this.z < min.z ) {

      this.z = min.z;

    } else if ( this.z > max.z ) {

      this.z = max.z;

    }

    return this;

  },

  clampScalar: ( function () {

    var min, max;

    return function ( minVal, maxVal ) {

      if ( min === undefined ) {

        min = new THREE.Vector3();
        max = new THREE.Vector3();

      }

      min.set( minVal, minVal, minVal );
      max.set( maxVal, maxVal, maxVal );

      return this.clamp( min, max );

    };

  } )(),

  floor: function () {

    this.x = Math.floor( this.x );
    this.y = Math.floor( this.y );
    this.z = Math.floor( this.z );

    return this;

  },

  ceil: function () {

    this.x = Math.ceil( this.x );
    this.y = Math.ceil( this.y );
    this.z = Math.ceil( this.z );

    return this;

  },

  round: function () {

    this.x = Math.round( this.x );
    this.y = Math.round( this.y );
    this.z = Math.round( this.z );

    return this;

  },

  roundToZero: function () {

    this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
    this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

    return this;

  },

  negate: function () {

    return this.multiplyScalar( - 1 );

  },

  dot: function ( v ) {

    return this.x * v.x + this.y * v.y + this.z * v.z;

  },

  lengthSq: function () {

    return this.x * this.x + this.y * this.y + this.z * this.z;

  },

  length: function () {

    return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

  },

  lengthManhattan: function () {

    return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

  },

  normalize: function () {

    return this.divideScalar( this.length() );

  },

  setLength: function ( l ) {

    var oldLength = this.length();

    if ( oldLength !== 0 && l !== oldLength  ) {

      this.multiplyScalar( l / oldLength );
    }

    return this;

  },

  lerp: function ( v, alpha ) {

    this.x += ( v.x - this.x ) * alpha;
    this.y += ( v.y - this.y ) * alpha;
    this.z += ( v.z - this.z ) * alpha;

    return this;

  },

  cross: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector3\'s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
      return this.crossVectors( v, w );

    }

    var x = this.x, y = this.y, z = this.z;

    this.x = y * v.z - z * v.y;
    this.y = z * v.x - x * v.z;
    this.z = x * v.y - y * v.x;

    return this;

  },

  crossVectors: function ( a, b ) {

    var ax = a.x, ay = a.y, az = a.z;
    var bx = b.x, by = b.y, bz = b.z;

    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;

    return this;

  },

  projectOnVector: function () {

    var v1, dot;

    return function ( vector ) {

      if ( v1 === undefined ) v1 = new THREE.Vector3();

      v1.copy( vector ).normalize();

      dot = this.dot( v1 );

      return this.copy( v1 ).multiplyScalar( dot );

    };

  }(),

  projectOnPlane: function () {

    var v1;

    return function ( planeNormal ) {

      if ( v1 === undefined ) v1 = new THREE.Vector3();

      v1.copy( this ).projectOnVector( planeNormal );

      return this.sub( v1 );

    }

  }(),

  reflect: function () {

    // reflect incident vector off plane orthogonal to normal
    // normal is assumed to have unit length

    var v1;

    return function ( normal ) {

      if ( v1 === undefined ) v1 = new THREE.Vector3();

      return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

    }

  }(),

  angleTo: function ( v ) {

    var theta = this.dot( v ) / ( this.length() * v.length() );

    // clamp, to handle numerical problems

    return Math.acos( THREE.Math.clamp( theta, -1, 1 ) );

  },

  distanceTo: function ( v ) {

    return Math.sqrt( this.distanceToSquared( v ) );

  },

  distanceToSquared: function ( v ) {

    var dx = this.x - v.x;
    var dy = this.y - v.y;
    var dz = this.z - v.z;

    return dx * dx + dy * dy + dz * dz;

  },

  setEulerFromRotationMatrix: function ( m, order ) {

    console.error( "REMOVED: Vector3\'s setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.");

  },

  setEulerFromQuaternion: function ( q, order ) {

    console.error( "REMOVED: Vector3\'s setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.");

  },

  getPositionFromMatrix: function ( m ) {

    console.warn( "DEPRECATED: Vector3\'s .getPositionFromMatrix() has been renamed to .setFromMatrixPosition(). Please update your code." );

    return this.setFromMatrixPosition( m );

  },

  getScaleFromMatrix: function ( m ) {

    console.warn( "DEPRECATED: Vector3\'s .getScaleFromMatrix() has been renamed to .setFromMatrixScale(). Please update your code." );

    return this.setFromMatrixScale( m );
  },

  getColumnFromMatrix: function ( index, matrix ) {

    console.warn( "DEPRECATED: Vector3\'s .getColumnFromMatrix() has been renamed to .setFromMatrixColumn(). Please update your code." );

    return this.setFromMatrixColumn( index, matrix );

  },

  setFromMatrixPosition: function ( m ) {

    this.x = m.elements[ 12 ];
    this.y = m.elements[ 13 ];
    this.z = m.elements[ 14 ];

    return this;

  },

  setFromMatrixScale: function ( m ) {

    var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();
    var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();
    var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

    this.x = sx;
    this.y = sy;
    this.z = sz;

    return this;
  },

  setFromMatrixColumn: function ( index, matrix ) {

    var offset = index * 4;

    var me = matrix.elements;

    this.x = me[ offset ];
    this.y = me[ offset + 1 ];
    this.z = me[ offset + 2 ];

    return this;

  },

  equals: function ( v ) {

    return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

  },

  fromArray: function ( array ) {

    this.x = array[ 0 ];
    this.y = array[ 1 ];
    this.z = array[ 2 ];

    return this;

  },

  toArray: function () {

    return [ this.x, this.y, this.z ];

  },

  clone: function () {

    return new THREE.Vector3( this.x, this.y, this.z );

  }

};
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector4 = function ( x, y, z, w ) {

  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = ( w !== undefined ) ? w : 1;

};

THREE.Vector4.prototype = {

  constructor: THREE.Vector4,

  set: function ( x, y, z, w ) {

    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;

    return this;

  },

  setX: function ( x ) {

    this.x = x;

    return this;

  },

  setY: function ( y ) {

    this.y = y;

    return this;

  },

  setZ: function ( z ) {

    this.z = z;

    return this;

  },

  setW: function ( w ) {

    this.w = w;

    return this;

  },

  setComponent: function ( index, value ) {

    switch ( index ) {

      case 0: this.x = value; break;
      case 1: this.y = value; break;
      case 2: this.z = value; break;
      case 3: this.w = value; break;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  getComponent: function ( index ) {

    switch ( index ) {

      case 0: return this.x;
      case 1: return this.y;
      case 2: return this.z;
      case 3: return this.w;
      default: throw new Error( "index is out of range: " + index );

    }

  },

  copy: function ( v ) {

    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = ( v.w !== undefined ) ? v.w : 1;

    return this;

  },

  add: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector4\'s .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
      return this.addVectors( v, w );

    }

    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;

    return this;

  },

  addScalar: function ( s ) {

    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;

    return this;

  },

  addVectors: function ( a, b ) {

    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;

    return this;

  },

  sub: function ( v, w ) {

    if ( w !== undefined ) {

      console.warn( 'DEPRECATED: Vector4\'s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
      return this.subVectors( v, w );

    }

    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;

    return this;

  },

  subVectors: function ( a, b ) {

    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;

    return this;

  },

  multiplyScalar: function ( scalar ) {

    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;

    return this;

  },

  applyMatrix4: function ( m ) {

    var x = this.x;
    var y = this.y;
    var z = this.z;
    var w = this.w;

    var e = m.elements;

    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;

    return this;

  },

  divideScalar: function ( scalar ) {

    if ( scalar !== 0 ) {

      var invScalar = 1 / scalar;

      this.x *= invScalar;
      this.y *= invScalar;
      this.z *= invScalar;
      this.w *= invScalar;

    } else {

      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 1;

    }

    return this;

  },

  setAxisAngleFromQuaternion: function ( q ) {

    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

    // q is assumed to be normalized

    this.w = 2 * Math.acos( q.w );

    var s = Math.sqrt( 1 - q.w * q.w );

    if ( s < 0.0001 ) {

       this.x = 1;
       this.y = 0;
       this.z = 0;

    } else {

       this.x = q.x / s;
       this.y = q.y / s;
       this.z = q.z / s;

    }

    return this;

  },

  setAxisAngleFromRotationMatrix: function ( m ) {

    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    var angle, x, y, z,   // variables for result
      epsilon = 0.01,   // margin to allow for rounding errors
      epsilon2 = 0.1,   // margin to distinguish between 0 and 180 degrees

      te = m.elements,

      m11 = te[0], m12 = te[4], m13 = te[8],
      m21 = te[1], m22 = te[5], m23 = te[9],
      m31 = te[2], m32 = te[6], m33 = te[10];

    if ( ( Math.abs( m12 - m21 ) < epsilon )
      && ( Math.abs( m13 - m31 ) < epsilon )
      && ( Math.abs( m23 - m32 ) < epsilon ) ) {

      // singularity found
      // first check for identity matrix which must have +1 for all terms
      // in leading diagonal and zero in other terms

      if ( ( Math.abs( m12 + m21 ) < epsilon2 )
        && ( Math.abs( m13 + m31 ) < epsilon2 )
        && ( Math.abs( m23 + m32 ) < epsilon2 )
        && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

        // this singularity is identity matrix so angle = 0

        this.set( 1, 0, 0, 0 );

        return this; // zero angle, arbitrary axis

      }

      // otherwise this singularity is angle = 180

      angle = Math.PI;

      var xx = ( m11 + 1 ) / 2;
      var yy = ( m22 + 1 ) / 2;
      var zz = ( m33 + 1 ) / 2;
      var xy = ( m12 + m21 ) / 4;
      var xz = ( m13 + m31 ) / 4;
      var yz = ( m23 + m32 ) / 4;

      if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term

        if ( xx < epsilon ) {

          x = 0;
          y = 0.707106781;
          z = 0.707106781;

        } else {

          x = Math.sqrt( xx );
          y = xy / x;
          z = xz / x;

        }

      } else if ( yy > zz ) { // m22 is the largest diagonal term

        if ( yy < epsilon ) {

          x = 0.707106781;
          y = 0;
          z = 0.707106781;

        } else {

          y = Math.sqrt( yy );
          x = xy / y;
          z = yz / y;

        }

      } else { // m33 is the largest diagonal term so base result on this

        if ( zz < epsilon ) {

          x = 0.707106781;
          y = 0.707106781;
          z = 0;

        } else {

          z = Math.sqrt( zz );
          x = xz / z;
          y = yz / z;

        }

      }

      this.set( x, y, z, angle );

      return this; // return 180 deg rotation

    }

    // as we have reached here there are no singularities so we can handle normally

    var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
             + ( m13 - m31 ) * ( m13 - m31 )
             + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

    if ( Math.abs( s ) < 0.001 ) s = 1;

    // prevent divide by zero, should not happen if matrix is orthogonal and should be
    // caught by singularity test above, but I've left it in just in case

    this.x = ( m32 - m23 ) / s;
    this.y = ( m13 - m31 ) / s;
    this.z = ( m21 - m12 ) / s;
    this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

    return this;

  },

  min: function ( v ) {

    if ( this.x > v.x ) {

      this.x = v.x;

    }

    if ( this.y > v.y ) {

      this.y = v.y;

    }

    if ( this.z > v.z ) {

      this.z = v.z;

    }

    if ( this.w > v.w ) {

      this.w = v.w;

    }

    return this;

  },

  max: function ( v ) {

    if ( this.x < v.x ) {

      this.x = v.x;

    }

    if ( this.y < v.y ) {

      this.y = v.y;

    }

    if ( this.z < v.z ) {

      this.z = v.z;

    }

    if ( this.w < v.w ) {

      this.w = v.w;

    }

    return this;

  },

  clamp: function ( min, max ) {

    // This function assumes min < max, if this assumption isn't true it will not operate correctly

    if ( this.x < min.x ) {

      this.x = min.x;

    } else if ( this.x > max.x ) {

      this.x = max.x;

    }

    if ( this.y < min.y ) {

      this.y = min.y;

    } else if ( this.y > max.y ) {

      this.y = max.y;

    }

    if ( this.z < min.z ) {

      this.z = min.z;

    } else if ( this.z > max.z ) {

      this.z = max.z;

    }

    if ( this.w < min.w ) {

      this.w = min.w;

    } else if ( this.w > max.w ) {

      this.w = max.w;

    }

    return this;

  },

  clampScalar: ( function () {

    var min, max;

    return function ( minVal, maxVal ) {

      if ( min === undefined ) {

        min = new THREE.Vector4();
        max = new THREE.Vector4();

      }

      min.set( minVal, minVal, minVal, minVal );
      max.set( maxVal, maxVal, maxVal, maxVal );

      return this.clamp( min, max );

    };

  } )(),

    floor: function () {

        this.x = Math.floor( this.x );
        this.y = Math.floor( this.y );
        this.z = Math.floor( this.z );
        this.w = Math.floor( this.w );

        return this;

    },

    ceil: function () {

        this.x = Math.ceil( this.x );
        this.y = Math.ceil( this.y );
        this.z = Math.ceil( this.z );
        this.w = Math.ceil( this.w );

        return this;

    },

    round: function () {

        this.x = Math.round( this.x );
        this.y = Math.round( this.y );
        this.z = Math.round( this.z );
        this.w = Math.round( this.w );

        return this;

    },

    roundToZero: function () {

        this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
        this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
        this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
        this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

        return this;

    },

  negate: function () {

    return this.multiplyScalar( -1 );

  },

  dot: function ( v ) {

    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

  },

  lengthSq: function () {

    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

  },

  length: function () {

    return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

  },

  lengthManhattan: function () {

    return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

  },

  normalize: function () {

    return this.divideScalar( this.length() );

  },

  setLength: function ( l ) {

    var oldLength = this.length();

    if ( oldLength !== 0 && l !== oldLength ) {

      this.multiplyScalar( l / oldLength );

    }

    return this;

  },

  lerp: function ( v, alpha ) {

    this.x += ( v.x - this.x ) * alpha;
    this.y += ( v.y - this.y ) * alpha;
    this.z += ( v.z - this.z ) * alpha;
    this.w += ( v.w - this.w ) * alpha;

    return this;

  },

  equals: function ( v ) {

    return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

  },

  fromArray: function ( array ) {

    this.x = array[ 0 ];
    this.y = array[ 1 ];
    this.z = array[ 2 ];
    this.w = array[ 3 ];

    return this;

  },

  toArray: function () {

    return [ this.x, this.y, this.z, this.w ];

  },

  clone: function () {

    return new THREE.Vector4( this.x, this.y, this.z, this.w );

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Euler = function ( x, y, z, order ) {

  this._x = x || 0;
  this._y = y || 0;
  this._z = z || 0;
  this._order = order || THREE.Euler.DefaultOrder;

};

THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

THREE.Euler.DefaultOrder = 'XYZ';

THREE.Euler.prototype = {

  constructor: THREE.Euler,

  _x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,

  get x () {

    return this._x;

  },

  set x ( value ) {

    this._x = value;
    this.onChangeCallback();

  },

  get y () {

    return this._y;

  },

  set y ( value ) {

    this._y = value;
    this.onChangeCallback();

  },

  get z () {

    return this._z;

  },

  set z ( value ) {

    this._z = value;
    this.onChangeCallback();

  },

  get order () {

    return this._order;

  },

  set order ( value ) {

    this._order = value;
    this.onChangeCallback();

  },

  set: function ( x, y, z, order ) {

    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order || this._order;

    this.onChangeCallback();

    return this;

  },

  copy: function ( euler ) {

    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;

    this.onChangeCallback();

    return this;

  },

  setFromRotationMatrix: function ( m, order ) {

    var clamp = THREE.Math.clamp;

    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    var te = m.elements;
    var m11 = te[0], m12 = te[4], m13 = te[8];
    var m21 = te[1], m22 = te[5], m23 = te[9];
    var m31 = te[2], m32 = te[6], m33 = te[10];

    order = order || this._order;

    if ( order === 'XYZ' ) {

      this._y = Math.asin( clamp( m13, -1, 1 ) );

      if ( Math.abs( m13 ) < 0.99999 ) {

        this._x = Math.atan2( - m23, m33 );
        this._z = Math.atan2( - m12, m11 );

      } else {

        this._x = Math.atan2( m32, m22 );
        this._z = 0;

      }

    } else if ( order === 'YXZ' ) {

      this._x = Math.asin( - clamp( m23, -1, 1 ) );

      if ( Math.abs( m23 ) < 0.99999 ) {

        this._y = Math.atan2( m13, m33 );
        this._z = Math.atan2( m21, m22 );

      } else {

        this._y = Math.atan2( - m31, m11 );
        this._z = 0;

      }

    } else if ( order === 'ZXY' ) {

      this._x = Math.asin( clamp( m32, -1, 1 ) );

      if ( Math.abs( m32 ) < 0.99999 ) {

        this._y = Math.atan2( - m31, m33 );
        this._z = Math.atan2( - m12, m22 );

      } else {

        this._y = 0;
        this._z = Math.atan2( m21, m11 );

      }

    } else if ( order === 'ZYX' ) {

      this._y = Math.asin( - clamp( m31, -1, 1 ) );

      if ( Math.abs( m31 ) < 0.99999 ) {

        this._x = Math.atan2( m32, m33 );
        this._z = Math.atan2( m21, m11 );

      } else {

        this._x = 0;
        this._z = Math.atan2( - m12, m22 );

      }

    } else if ( order === 'YZX' ) {

      this._z = Math.asin( clamp( m21, -1, 1 ) );

      if ( Math.abs( m21 ) < 0.99999 ) {

        this._x = Math.atan2( - m23, m22 );
        this._y = Math.atan2( - m31, m11 );

      } else {

        this._x = 0;
        this._y = Math.atan2( m13, m33 );

      }

    } else if ( order === 'XZY' ) {

      this._z = Math.asin( - clamp( m12, -1, 1 ) );

      if ( Math.abs( m12 ) < 0.99999 ) {

        this._x = Math.atan2( m32, m22 );
        this._y = Math.atan2( m13, m11 );

      } else {

        this._x = Math.atan2( - m23, m33 );
        this._y = 0;

      }

    } else {

      console.warn( 'WARNING: Euler.setFromRotationMatrix() given unsupported order: ' + order )

    }

    this._order = order;

    this.onChangeCallback();

    return this;

  },

  setFromQuaternion: function ( q, order, update ) {

    var clamp = THREE.Math.clamp;

    // q is assumed to be normalized

    // http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m

    var sqx = q.x * q.x;
    var sqy = q.y * q.y;
    var sqz = q.z * q.z;
    var sqw = q.w * q.w;

    order = order || this._order;

    if ( order === 'XYZ' ) {

      this._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );
      this._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ), -1, 1 ) );
      this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );

    } else if ( order ===  'YXZ' ) {

      this._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ), -1, 1 ) );
      this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );
      this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );

    } else if ( order === 'ZXY' ) {

      this._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ), -1, 1 ) );
      this._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );
      this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );

    } else if ( order === 'ZYX' ) {

      this._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );
      this._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ), -1, 1 ) );
      this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );

    } else if ( order === 'YZX' ) {

      this._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );
      this._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );
      this._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ), -1, 1 ) );

    } else if ( order === 'XZY' ) {

      this._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );
      this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );
      this._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ), -1, 1 ) );

    } else {

      console.warn( 'WARNING: Euler.setFromQuaternion() given unsupported order: ' + order )

    }

    this._order = order;

    if ( update !== false ) this.onChangeCallback();

    return this;

  },

  reorder: function () {

    // WARNING: this discards revolution information -bhouston

    var q = new THREE.Quaternion();

    return function ( newOrder ) {

      q.setFromEuler( this );
      this.setFromQuaternion( q, newOrder );

    };


  }(),

  equals: function ( euler ) {

    return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

  },

  fromArray: function ( array ) {

    this._x = array[ 0 ];
    this._y = array[ 1 ];
    this._z = array[ 2 ];
    if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

    this.onChangeCallback();

    return this;

  },

  toArray: function () {

    return [ this._x, this._y, this._z, this._order ];

  },

  onChange: function ( callback ) {

    this.onChangeCallback = callback;

    return this;

  },

  onChangeCallback: function () {},

  clone: function () {

    return new THREE.Euler( this._x, this._y, this._z, this._order );

  }

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Line3 = function ( start, end ) {

  this.start = ( start !== undefined ) ? start : new THREE.Vector3();
  this.end = ( end !== undefined ) ? end : new THREE.Vector3();

};

THREE.Line3.prototype = {

  constructor: THREE.Line3,

  set: function ( start, end ) {

    this.start.copy( start );
    this.end.copy( end );

    return this;

  },

  copy: function ( line ) {

    this.start.copy( line.start );
    this.end.copy( line.end );

    return this;

  },

  center: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

  },

  delta: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.subVectors( this.end, this.start );

  },

  distanceSq: function () {

    return this.start.distanceToSquared( this.end );

  },

  distance: function () {

    return this.start.distanceTo( this.end );

  },

  at: function ( t, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();

    return this.delta( result ).multiplyScalar( t ).add( this.start );

  },

  closestPointToPointParameter: function() {

    var startP = new THREE.Vector3();
    var startEnd = new THREE.Vector3();

    return function ( point, clampToLine ) {

      startP.subVectors( point, this.start );
      startEnd.subVectors( this.end, this.start );

      var startEnd2 = startEnd.dot( startEnd );
      var startEnd_startP = startEnd.dot( startP );

      var t = startEnd_startP / startEnd2;

      if ( clampToLine ) {

        t = THREE.Math.clamp( t, 0, 1 );

      }

      return t;

    };

  }(),

  closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

    var t = this.closestPointToPointParameter( point, clampToLine );

    var result = optionalTarget || new THREE.Vector3();

    return this.delta( result ).multiplyScalar( t ).add( this.start );

  },

  applyMatrix4: function ( matrix ) {

    this.start.applyMatrix4( matrix );
    this.end.applyMatrix4( matrix );

    return this;

  },

  equals: function ( line ) {

    return line.start.equals( this.start ) && line.end.equals( this.end );

  },

  clone: function () {

    return new THREE.Line3().copy( this );

  }

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Box2 = function ( min, max ) {

  this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
  this.max = ( max !== undefined ) ? max : new THREE.Vector2( -Infinity, -Infinity );

};

THREE.Box2.prototype = {

  constructor: THREE.Box2,

  set: function ( min, max ) {

    this.min.copy( min );
    this.max.copy( max );

    return this;

  },

  setFromPoints: function ( points ) {

    if ( points.length > 0 ) {

      var point = points[ 0 ];

      this.min.copy( point );
      this.max.copy( point );

      for ( var i = 1, il = points.length; i < il; i ++ ) {

        point = points[ i ];

        if ( point.x < this.min.x ) {

          this.min.x = point.x;

        } else if ( point.x > this.max.x ) {

          this.max.x = point.x;

        }

        if ( point.y < this.min.y ) {

          this.min.y = point.y;

        } else if ( point.y > this.max.y ) {

          this.max.y = point.y;

        }

      }

    } else {

      this.makeEmpty();

    }

    return this;

  },

  setFromCenterAndSize: function () {

    var v1 = new THREE.Vector2();

    return function ( center, size ) {

      var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
      this.min.copy( center ).sub( halfSize );
      this.max.copy( center ).add( halfSize );

      return this;

    };

  }(),

  copy: function ( box ) {

    this.min.copy( box.min );
    this.max.copy( box.max );

    return this;

  },

  makeEmpty: function () {

    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;

    return this;

  },

  empty: function () {

    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

  },

  center: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector2();
    return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  },

  size: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector2();
    return result.subVectors( this.max, this.min );

  },

  expandByPoint: function ( point ) {

    this.min.min( point );
    this.max.max( point );

    return this;
  },

  expandByVector: function ( vector ) {

    this.min.sub( vector );
    this.max.add( vector );

    return this;
  },

  expandByScalar: function ( scalar ) {

    this.min.addScalar( -scalar );
    this.max.addScalar( scalar );

    return this;
  },

  containsPoint: function ( point ) {

    if ( point.x < this.min.x || point.x > this.max.x ||
         point.y < this.min.y || point.y > this.max.y ) {

      return false;

    }

    return true;

  },

  containsBox: function ( box ) {

    if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
         ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

      return true;

    }

    return false;

  },

  getParameter: function ( point, optionalTarget ) {

    // This can potentially have a divide by zero if the box
    // has a size dimension of 0.

    var result = optionalTarget || new THREE.Vector2();

    return result.set(
      ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
      ( point.y - this.min.y ) / ( this.max.y - this.min.y )
    );

  },

  isIntersectionBox: function ( box ) {

    // using 6 splitting planes to rule out intersections.

    if ( box.max.x < this.min.x || box.min.x > this.max.x ||
         box.max.y < this.min.y || box.min.y > this.max.y ) {

      return false;

    }

    return true;

  },

  clampPoint: function ( point, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector2();
    return result.copy( point ).clamp( this.min, this.max );

  },

  distanceToPoint: function () {

    var v1 = new THREE.Vector2();

    return function ( point ) {

      var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
      return clampedPoint.sub( point ).length();

    };

  }(),

  intersect: function ( box ) {

    this.min.max( box.min );
    this.max.min( box.max );

    return this;

  },

  union: function ( box ) {

    this.min.min( box.min );
    this.max.max( box.max );

    return this;

  },

  translate: function ( offset ) {

    this.min.add( offset );
    this.max.add( offset );

    return this;

  },

  equals: function ( box ) {

    return box.min.equals( this.min ) && box.max.equals( this.max );

  },

  clone: function () {

    return new THREE.Box2().copy( this );

  }

};

/**
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Box3 = function ( min, max ) {

  this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
  this.max = ( max !== undefined ) ? max : new THREE.Vector3( -Infinity, -Infinity, -Infinity );

};

THREE.Box3.prototype = {

  constructor: THREE.Box3,

  set: function ( min, max ) {

    this.min.copy( min );
    this.max.copy( max );

    return this;

  },

  addPoint: function ( point ) {

    if ( point.x < this.min.x ) {

      this.min.x = point.x;

    } else if ( point.x > this.max.x ) {

      this.max.x = point.x;

    }

    if ( point.y < this.min.y ) {

      this.min.y = point.y;

    } else if ( point.y > this.max.y ) {

      this.max.y = point.y;

    }

    if ( point.z < this.min.z ) {

      this.min.z = point.z;

    } else if ( point.z > this.max.z ) {

      this.max.z = point.z;

    }
    
    return this;

  },

  setFromPoints: function ( points ) {

    if ( points.length > 0 ) {

      var point = points[ 0 ];

      this.min.copy( point );
      this.max.copy( point );

      for ( var i = 1, il = points.length; i < il; i ++ ) {

        this.addPoint( points[ i ] )

      }

    } else {

      this.makeEmpty();

    }

    return this;

  },

  setFromCenterAndSize: function() {

    var v1 = new THREE.Vector3();

    return function ( center, size ) {

      var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

      this.min.copy( center ).sub( halfSize );
      this.max.copy( center ).add( halfSize );

      return this;

    };

  }(),

  setFromObject: function() {

    // Computes the world-axis-aligned bounding box of an object (including its children),
    // accounting for both the object's, and childrens', world transforms

    var v1 = new THREE.Vector3();

    return function( object ) {

      var scope = this;

      object.updateMatrixWorld( true );

      this.makeEmpty();

      object.traverse( function ( node ) {

        if ( node.geometry !== undefined && node.geometry.vertices !== undefined ) {

          var vertices = node.geometry.vertices;

          for ( var i = 0, il = vertices.length; i < il; i++ ) {

            v1.copy( vertices[ i ] );

            v1.applyMatrix4( node.matrixWorld );

            scope.expandByPoint( v1 );

          }

        }

      } );

      return this;

    };

  }(),

  copy: function ( box ) {

    this.min.copy( box.min );
    this.max.copy( box.max );

    return this;

  },

  makeEmpty: function () {

    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;

    return this;

  },

  empty: function () {

    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

    return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

  },

  center: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

  },

  size: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.subVectors( this.max, this.min );

  },

  expandByPoint: function ( point ) {

    this.min.min( point );
    this.max.max( point );

    return this;

  },

  expandByVector: function ( vector ) {

    this.min.sub( vector );
    this.max.add( vector );

    return this;

  },

  expandByScalar: function ( scalar ) {

    this.min.addScalar( -scalar );
    this.max.addScalar( scalar );

    return this;

  },

  containsPoint: function ( point ) {

    if ( point.x < this.min.x || point.x > this.max.x ||
         point.y < this.min.y || point.y > this.max.y ||
         point.z < this.min.z || point.z > this.max.z ) {

      return false;

    }

    return true;

  },

  containsBox: function ( box ) {

    if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
       ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
       ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

      return true;

    }

    return false;

  },

  getParameter: function ( point, optionalTarget ) {

    // This can potentially have a divide by zero if the box
    // has a size dimension of 0.

    var result = optionalTarget || new THREE.Vector3();

    return result.set(
      ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
      ( point.y - this.min.y ) / ( this.max.y - this.min.y ),
      ( point.z - this.min.z ) / ( this.max.z - this.min.z )
    );

  },

  isIntersectionBox: function ( box ) {

    // using 6 splitting planes to rule out intersections.

    if ( box.max.x < this.min.x || box.min.x > this.max.x ||
         box.max.y < this.min.y || box.min.y > this.max.y ||
         box.max.z < this.min.z || box.min.z > this.max.z ) {

      return false;

    }

    return true;

  },

  clampPoint: function ( point, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.copy( point ).clamp( this.min, this.max );

  },

  distanceToPoint: function() {

    var v1 = new THREE.Vector3();

    return function ( point ) {

      var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
      return clampedPoint.sub( point ).length();

    };

  }(),

  getBoundingSphere: function() {

    var v1 = new THREE.Vector3();

    return function ( optionalTarget ) {

      var result = optionalTarget || new THREE.Sphere();

      result.center = this.center();
      result.radius = this.size( v1 ).length() * 0.5;

      return result;

    };

  }(),

  intersect: function ( box ) {

    this.min.max( box.min );
    this.max.min( box.max );

    return this;

  },

  union: function ( box ) {

    this.min.min( box.min );
    this.max.max( box.max );

    return this;

  },

  applyMatrix4: function() {

    var points = [
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3(),
      new THREE.Vector3()
    ];

    return function ( matrix ) {

      // NOTE: I am using a binary pattern to specify all 2^3 combinations below
      points[0].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
      points[1].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
      points[2].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
      points[3].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
      points[4].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
      points[5].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
      points[6].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
      points[7].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111

      this.makeEmpty();
      this.setFromPoints( points );

      return this;

    };

  }(),

  translate: function ( offset ) {

    this.min.add( offset );
    this.max.add( offset );

    return this;

  },

  equals: function ( box ) {

    return box.min.equals( this.min ) && box.max.equals( this.max );

  },

  clone: function () {

    return new THREE.Box3().copy( this );

  }

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Matrix3 = function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

  this.elements = new Float32Array( 9 );

  var te = this.elements;

  te[0] = ( n11 !== undefined ) ? n11 : 1; te[3] = n12 || 0; te[6] = n13 || 0;
  te[1] = n21 || 0; te[4] = ( n22 !== undefined ) ? n22 : 1; te[7] = n23 || 0;
  te[2] = n31 || 0; te[5] = n32 || 0; te[8] = ( n33 !== undefined ) ? n33 : 1;

};

THREE.Matrix3.prototype = {

  constructor: THREE.Matrix3,

  set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

    var te = this.elements;

    te[0] = n11; te[3] = n12; te[6] = n13;
    te[1] = n21; te[4] = n22; te[7] = n23;
    te[2] = n31; te[5] = n32; te[8] = n33;

    return this;

  },

  identity: function () {

    this.set(

      1, 0, 0,
      0, 1, 0,
      0, 0, 1

    );

    return this;

  },

  copy: function ( m ) {

    var me = m.elements;

    this.set(

      me[0], me[3], me[6],
      me[1], me[4], me[7],
      me[2], me[5], me[8]

    );

    return this;

  },

  multiplyVector3: function ( vector ) {

    console.warn( 'DEPRECATED: Matrix3\'s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
    return vector.applyMatrix3( this );

  },

  multiplyVector3Array: function ( a ) {

    console.warn( 'DEPRECATED: Matrix3\'s .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
    return this.applyToVector3Array( a );

  },

  applyToVector3Array: function() {

    var v1 = new THREE.Vector3();

    return function ( array, offset, length ) {

      if ( offset === undefined ) offset = 0;
      if ( length === undefined ) length = array.length;

      for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {

        v1.x = array[ j ];
        v1.y = array[ j + 1 ];
        v1.z = array[ j + 2 ];

        v1.applyMatrix3( this );

        array[ j ]     = v1.x;
        array[ j + 1 ] = v1.y;
        array[ j + 2 ] = v1.z;

      }

      return array;

    };

  }(),

  multiplyScalar: function ( s ) {

    var te = this.elements;

    te[0] *= s; te[3] *= s; te[6] *= s;
    te[1] *= s; te[4] *= s; te[7] *= s;
    te[2] *= s; te[5] *= s; te[8] *= s;

    return this;

  },

  determinant: function () {

    var te = this.elements;

    var a = te[0], b = te[1], c = te[2],
      d = te[3], e = te[4], f = te[5],
      g = te[6], h = te[7], i = te[8];

    return a*e*i - a*f*h - b*d*i + b*f*g + c*d*h - c*e*g;

  },

  getInverse: function ( matrix, throwOnInvertible ) {

    // input: THREE.Matrix4
    // ( based on http://code.google.com/p/webgl-mjs/ )

    var me = matrix.elements;
    var te = this.elements;

    te[ 0 ] =   me[10] * me[5] - me[6] * me[9];
    te[ 1 ] = - me[10] * me[1] + me[2] * me[9];
    te[ 2 ] =   me[6] * me[1] - me[2] * me[5];
    te[ 3 ] = - me[10] * me[4] + me[6] * me[8];
    te[ 4 ] =   me[10] * me[0] - me[2] * me[8];
    te[ 5 ] = - me[6] * me[0] + me[2] * me[4];
    te[ 6 ] =   me[9] * me[4] - me[5] * me[8];
    te[ 7 ] = - me[9] * me[0] + me[1] * me[8];
    te[ 8 ] =   me[5] * me[0] - me[1] * me[4];

    var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];

    // no inverse

    if ( det === 0 ) {

      var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";

      if ( throwOnInvertible || false ) {

        throw new Error( msg );

      } else {

        console.warn( msg );

      }

      this.identity();

      return this;

    }

    this.multiplyScalar( 1.0 / det );

    return this;

  },

  transpose: function () {

    var tmp, m = this.elements;

    tmp = m[1]; m[1] = m[3]; m[3] = tmp;
    tmp = m[2]; m[2] = m[6]; m[6] = tmp;
    tmp = m[5]; m[5] = m[7]; m[7] = tmp;

    return this;

  },

  flattenToArrayOffset: function( array, offset ) {

    var te = this.elements;

    array[ offset     ] = te[0];
    array[ offset + 1 ] = te[1];
    array[ offset + 2 ] = te[2];
    
    array[ offset + 3 ] = te[3];
    array[ offset + 4 ] = te[4];
    array[ offset + 5 ] = te[5];
    
    array[ offset + 6 ] = te[6];
    array[ offset + 7 ] = te[7];
    array[ offset + 8 ]  = te[8];

    return array;

  },

  getNormalMatrix: function ( m ) {

    // input: THREE.Matrix4

    this.getInverse( m ).transpose();

    return this;

  },

  transposeIntoArray: function ( r ) {

    var m = this.elements;

    r[ 0 ] = m[ 0 ];
    r[ 1 ] = m[ 3 ];
    r[ 2 ] = m[ 6 ];
    r[ 3 ] = m[ 1 ];
    r[ 4 ] = m[ 4 ];
    r[ 5 ] = m[ 7 ];
    r[ 6 ] = m[ 2 ];
    r[ 7 ] = m[ 5 ];
    r[ 8 ] = m[ 8 ];

    return this;

  },

  fromArray: function ( array ) {

    this.elements.set( array );

    return this;

  },

  toArray: function () {

    var te = this.elements;

    return [
      te[ 0 ], te[ 1 ], te[ 2 ],
      te[ 3 ], te[ 4 ], te[ 5 ],
      te[ 6 ], te[ 7 ], te[ 8 ]
    ];

  },

  clone: function () {

    var te = this.elements;

    return new THREE.Matrix3(

      te[0], te[3], te[6],
      te[1], te[4], te[7],
      te[2], te[5], te[8]

    );

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */


THREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

  this.elements = new Float32Array( 16 );

  // TODO: if n11 is undefined, then just set to identity, otherwise copy all other values into matrix
  //   we should not support semi specification of Matrix4, it is just weird.

  var te = this.elements;

  te[0] = ( n11 !== undefined ) ? n11 : 1; te[4] = n12 || 0; te[8] = n13 || 0; te[12] = n14 || 0;
  te[1] = n21 || 0; te[5] = ( n22 !== undefined ) ? n22 : 1; te[9] = n23 || 0; te[13] = n24 || 0;
  te[2] = n31 || 0; te[6] = n32 || 0; te[10] = ( n33 !== undefined ) ? n33 : 1; te[14] = n34 || 0;
  te[3] = n41 || 0; te[7] = n42 || 0; te[11] = n43 || 0; te[15] = ( n44 !== undefined ) ? n44 : 1;

};

THREE.Matrix4.prototype = {

  constructor: THREE.Matrix4,

  set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

    var te = this.elements;

    te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;
    te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;
    te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;
    te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;

    return this;

  },

  identity: function () {

    this.set(

      1, 0, 0, 0,
      0, 1, 0, 0,
      0, 0, 1, 0,
      0, 0, 0, 1

    );

    return this;

  },

  copy: function ( m ) {

    this.elements.set( m.elements );

    return this;

  },

  extractPosition: function ( m ) {

    console.warn( 'DEPRECATED: Matrix4\'s .extractPosition() has been renamed to .copyPosition().' );
    return this.copyPosition( m );

  },

  copyPosition: function ( m ) {

    var te = this.elements;
    var me = m.elements;

    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];

    return this;

  },

  extractRotation: function () {

    var v1 = new THREE.Vector3();

    return function ( m ) {

      var te = this.elements;
      var me = m.elements;

      var scaleX = 1 / v1.set( me[0], me[1], me[2] ).length();
      var scaleY = 1 / v1.set( me[4], me[5], me[6] ).length();
      var scaleZ = 1 / v1.set( me[8], me[9], me[10] ).length();

      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;

      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;

      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;

      return this;

    };

  }(),

  makeRotationFromEuler: function ( euler ) {

    if ( euler instanceof THREE.Euler === false ) {

      console.error( 'ERROR: Matrix\'s .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.' );

    }

    var te = this.elements;

    var x = euler.x, y = euler.y, z = euler.z;
    var a = Math.cos( x ), b = Math.sin( x );
    var c = Math.cos( y ), d = Math.sin( y );
    var e = Math.cos( z ), f = Math.sin( z );

    if ( euler.order === 'XYZ' ) {

      var ae = a * e, af = a * f, be = b * e, bf = b * f;

      te[0] = c * e;
      te[4] = - c * f;
      te[8] = d;

      te[1] = af + be * d;
      te[5] = ae - bf * d;
      te[9] = - b * c;

      te[2] = bf - ae * d;
      te[6] = be + af * d;
      te[10] = a * c;

    } else if ( euler.order === 'YXZ' ) {

      var ce = c * e, cf = c * f, de = d * e, df = d * f;

      te[0] = ce + df * b;
      te[4] = de * b - cf;
      te[8] = a * d;

      te[1] = a * f;
      te[5] = a * e;
      te[9] = - b;

      te[2] = cf * b - de;
      te[6] = df + ce * b;
      te[10] = a * c;

    } else if ( euler.order === 'ZXY' ) {

      var ce = c * e, cf = c * f, de = d * e, df = d * f;

      te[0] = ce - df * b;
      te[4] = - a * f;
      te[8] = de + cf * b;

      te[1] = cf + de * b;
      te[5] = a * e;
      te[9] = df - ce * b;

      te[2] = - a * d;
      te[6] = b;
      te[10] = a * c;

    } else if ( euler.order === 'ZYX' ) {

      var ae = a * e, af = a * f, be = b * e, bf = b * f;

      te[0] = c * e;
      te[4] = be * d - af;
      te[8] = ae * d + bf;

      te[1] = c * f;
      te[5] = bf * d + ae;
      te[9] = af * d - be;

      te[2] = - d;
      te[6] = b * c;
      te[10] = a * c;

    } else if ( euler.order === 'YZX' ) {

      var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

      te[0] = c * e;
      te[4] = bd - ac * f;
      te[8] = bc * f + ad;

      te[1] = f;
      te[5] = a * e;
      te[9] = - b * e;

      te[2] = - d * e;
      te[6] = ad * f + bc;
      te[10] = ac - bd * f;

    } else if ( euler.order === 'XZY' ) {

      var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

      te[0] = c * e;
      te[4] = - f;
      te[8] = d * e;

      te[1] = ac * f + bd;
      te[5] = a * e;
      te[9] = ad * f - bc;

      te[2] = bc * f - ad;
      te[6] = b * e;
      te[10] = bd * f + ac;

    }

    // last column
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;

    // bottom row
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;

    return this;

  },

  setRotationFromQuaternion: function ( q ) {

    console.warn( 'DEPRECATED: Matrix4\'s .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.' );

    return this.makeRotationFromQuaternion( q );

  },

  makeRotationFromQuaternion: function ( q ) {

    var te = this.elements;

    var x = q.x, y = q.y, z = q.z, w = q.w;
    var x2 = x + x, y2 = y + y, z2 = z + z;
    var xx = x * x2, xy = x * y2, xz = x * z2;
    var yy = y * y2, yz = y * z2, zz = z * z2;
    var wx = w * x2, wy = w * y2, wz = w * z2;

    te[0] = 1 - ( yy + zz );
    te[4] = xy - wz;
    te[8] = xz + wy;

    te[1] = xy + wz;
    te[5] = 1 - ( xx + zz );
    te[9] = yz - wx;

    te[2] = xz - wy;
    te[6] = yz + wx;
    te[10] = 1 - ( xx + yy );

    // last column
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;

    // bottom row
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;

    return this;

  },

  lookAt: function() {

    var x = new THREE.Vector3();
    var y = new THREE.Vector3();
    var z = new THREE.Vector3();

    return function ( eye, target, up ) {

      var te = this.elements;

      z.subVectors( eye, target ).normalize();

      if ( z.length() === 0 ) {

        z.z = 1;

      }

      x.crossVectors( up, z ).normalize();

      if ( x.length() === 0 ) {

        z.x += 0.0001;
        x.crossVectors( up, z ).normalize();

      }

      y.crossVectors( z, x );


      te[0] = x.x; te[4] = y.x; te[8] = z.x;
      te[1] = x.y; te[5] = y.y; te[9] = z.y;
      te[2] = x.z; te[6] = y.z; te[10] = z.z;

      return this;

    };

  }(),

  multiply: function ( m, n ) {

    if ( n !== undefined ) {

      console.warn( 'DEPRECATED: Matrix4\'s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
      return this.multiplyMatrices( m, n );

    }

    return this.multiplyMatrices( this, m );

  },

  multiplyMatrices: function ( a, b ) {

    var ae = a.elements;
    var be = b.elements;
    var te = this.elements;

    var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];

    var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];

    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

    return this;

  },

  multiplyToArray: function ( a, b, r ) {

    var te = this.elements;

    this.multiplyMatrices( a, b );

    r[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];
    r[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];
    r[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];
    r[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];

    return this;

  },

  multiplyScalar: function ( s ) {

    var te = this.elements;

    te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;
    te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;
    te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;
    te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;

    return this;

  },

  multiplyVector3: function ( vector ) {

    console.warn( 'DEPRECATED: Matrix4\'s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
    return vector.applyProjection( this );

  },

  multiplyVector4: function ( vector ) {

    console.warn( 'DEPRECATED: Matrix4\'s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
    return vector.applyMatrix4( this );

  },

  multiplyVector3Array: function ( a ) {

    console.warn( 'DEPRECATED: Matrix4\'s .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
    return this.applyToVector3Array( a );

  },

  applyToVector3Array: function() {

    var v1 = new THREE.Vector3();

    return function ( array, offset, length ) {

      if ( offset === undefined ) offset = 0;
      if ( length === undefined ) length = array.length;

      for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {

        v1.x = array[ j ];
        v1.y = array[ j + 1 ];
        v1.z = array[ j + 2 ];

        v1.applyMatrix4( this );

        array[ j ]     = v1.x;
        array[ j + 1 ] = v1.y;
        array[ j + 2 ] = v1.z;

      }

      return array;

    };

  }(),

  rotateAxis: function ( v ) {

    console.warn( 'DEPRECATED: Matrix4\'s .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );

    v.transformDirection( this );

  },

  crossVector: function ( vector ) {

    console.warn( 'DEPRECATED: Matrix4\'s .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
    return vector.applyMatrix4( this );

  },

  determinant: function () {

    var te = this.elements;

    var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];

    //TODO: make this more efficient
    //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

    return (
      n41 * (
        +n14 * n23 * n32
        -n13 * n24 * n32
        -n14 * n22 * n33
        +n12 * n24 * n33
        +n13 * n22 * n34
        -n12 * n23 * n34
      ) +
      n42 * (
        +n11 * n23 * n34
        -n11 * n24 * n33
        +n14 * n21 * n33
        -n13 * n21 * n34
        +n13 * n24 * n31
        -n14 * n23 * n31
      ) +
      n43 * (
        +n11 * n24 * n32
        -n11 * n22 * n34
        -n14 * n21 * n32
        +n12 * n21 * n34
        +n14 * n22 * n31
        -n12 * n24 * n31
      ) +
      n44 * (
        -n13 * n22 * n31
        -n11 * n23 * n32
        +n11 * n22 * n33
        +n13 * n21 * n32
        -n12 * n21 * n33
        +n12 * n23 * n31
      )

    );

  },

  transpose: function () {

    var te = this.elements;
    var tmp;

    tmp = te[1]; te[1] = te[4]; te[4] = tmp;
    tmp = te[2]; te[2] = te[8]; te[8] = tmp;
    tmp = te[6]; te[6] = te[9]; te[9] = tmp;

    tmp = te[3]; te[3] = te[12]; te[12] = tmp;
    tmp = te[7]; te[7] = te[13]; te[13] = tmp;
    tmp = te[11]; te[11] = te[14]; te[14] = tmp;

    return this;

  },

  flattenToArrayOffset: function( array, offset ) {

    var te = this.elements;

    array[ offset     ] = te[0];
    array[ offset + 1 ] = te[1];
    array[ offset + 2 ] = te[2];
    array[ offset + 3 ] = te[3];

    array[ offset + 4 ] = te[4];
    array[ offset + 5 ] = te[5];
    array[ offset + 6 ] = te[6];
    array[ offset + 7 ] = te[7];

    array[ offset + 8 ]  = te[8];
    array[ offset + 9 ]  = te[9];
    array[ offset + 10 ] = te[10];
    array[ offset + 11 ] = te[11];

    array[ offset + 12 ] = te[12];
    array[ offset + 13 ] = te[13];
    array[ offset + 14 ] = te[14];
    array[ offset + 15 ] = te[15];

    return array;

  },

  getPosition: function() {

    var v1 = new THREE.Vector3();

    return function () {

      console.warn( 'DEPRECATED: Matrix4\'s .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

      var te = this.elements;
      return v1.set( te[12], te[13], te[14] );

    };

  }(),

  setPosition: function ( v ) {

    var te = this.elements;

    te[12] = v.x;
    te[13] = v.y;
    te[14] = v.z;

    return this;

  },

  getInverse: function ( m, throwOnInvertible ) {

    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
    var te = this.elements;
    var me = m.elements;

    var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];
    var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];
    var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];
    var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];

    te[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;
    te[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;
    te[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;
    te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;
    te[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;
    te[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;
    te[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;
    te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;
    te[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;
    te[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;
    te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;
    te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;
    te[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;
    te[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;
    te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;
    te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;

    var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

    if ( det == 0 ) {

      var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";

      if ( throwOnInvertible || false ) {

        throw new Error( msg ); 

      } else {

        console.warn( msg );

      }

      this.identity();

      return this;
    }

    this.multiplyScalar( 1 / det );

    return this;

  },

  translate: function ( v ) {

    console.warn( 'DEPRECATED: Matrix4\'s .translate() has been removed.');

  },

  rotateX: function ( angle ) {

    console.warn( 'DEPRECATED: Matrix4\'s .rotateX() has been removed.');

  },

  rotateY: function ( angle ) {

    console.warn( 'DEPRECATED: Matrix4\'s .rotateY() has been removed.');

  },

  rotateZ: function ( angle ) {

    console.warn( 'DEPRECATED: Matrix4\'s .rotateZ() has been removed.');

  },

  rotateByAxis: function ( axis, angle ) {

    console.warn( 'DEPRECATED: Matrix4\'s .rotateByAxis() has been removed.');

  },

  scale: function ( v ) {

    var te = this.elements;
    var x = v.x, y = v.y, z = v.z;

    te[0] *= x; te[4] *= y; te[8] *= z;
    te[1] *= x; te[5] *= y; te[9] *= z;
    te[2] *= x; te[6] *= y; te[10] *= z;
    te[3] *= x; te[7] *= y; te[11] *= z;

    return this;

  },

  getMaxScaleOnAxis: function () {

    var te = this.elements;

    var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

    return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );

  },

  makeTranslation: function ( x, y, z ) {

    this.set(

      1, 0, 0, x,
      0, 1, 0, y,
      0, 0, 1, z,
      0, 0, 0, 1

    );

    return this;

  },

  makeRotationX: function ( theta ) {

    var c = Math.cos( theta ), s = Math.sin( theta );

    this.set(

      1, 0,  0, 0,
      0, c, -s, 0,
      0, s,  c, 0,
      0, 0,  0, 1

    );

    return this;

  },

  makeRotationY: function ( theta ) {

    var c = Math.cos( theta ), s = Math.sin( theta );

    this.set(

       c, 0, s, 0,
       0, 1, 0, 0,
      -s, 0, c, 0,
       0, 0, 0, 1

    );

    return this;

  },

  makeRotationZ: function ( theta ) {

    var c = Math.cos( theta ), s = Math.sin( theta );

    this.set(

      c, -s, 0, 0,
      s,  c, 0, 0,
      0,  0, 1, 0,
      0,  0, 0, 1

    );

    return this;

  },

  makeRotationAxis: function ( axis, angle ) {

    // Based on http://www.gamedev.net/reference/articles/article1199.asp

    var c = Math.cos( angle );
    var s = Math.sin( angle );
    var t = 1 - c;
    var x = axis.x, y = axis.y, z = axis.z;
    var tx = t * x, ty = t * y;

    this.set(

      tx * x + c, tx * y - s * z, tx * z + s * y, 0,
      tx * y + s * z, ty * y + c, ty * z - s * x, 0,
      tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
      0, 0, 0, 1

    );

     return this;

  },

  makeScale: function ( x, y, z ) {

    this.set(

      x, 0, 0, 0,
      0, y, 0, 0,
      0, 0, z, 0,
      0, 0, 0, 1

    );

    return this;

  },

  compose: function ( position, quaternion, scale ) {

    this.makeRotationFromQuaternion( quaternion );
    this.scale( scale );
    this.setPosition( position );

    return this;

  },

  decompose: function () {

    var vector = new THREE.Vector3();
    var matrix = new THREE.Matrix4();

    return function ( position, quaternion, scale ) {

      var te = this.elements;

      var sx = vector.set( te[0], te[1], te[2] ).length();
      var sy = vector.set( te[4], te[5], te[6] ).length();
      var sz = vector.set( te[8], te[9], te[10] ).length();

      // if determine is negative, we need to invert one scale
      var det = this.determinant();
      if( det < 0 ) {
        sx = -sx;
      }

      position.x = te[12];
      position.y = te[13];
      position.z = te[14];

      // scale the rotation part

      matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

      var invSX = 1 / sx;
      var invSY = 1 / sy;
      var invSZ = 1 / sz;

      matrix.elements[0] *= invSX;
      matrix.elements[1] *= invSX;
      matrix.elements[2] *= invSX;

      matrix.elements[4] *= invSY;
      matrix.elements[5] *= invSY;
      matrix.elements[6] *= invSY;

      matrix.elements[8] *= invSZ;
      matrix.elements[9] *= invSZ;
      matrix.elements[10] *= invSZ;

      quaternion.setFromRotationMatrix( matrix );

      scale.x = sx;
      scale.y = sy;
      scale.z = sz;

      return this;

    };

  }(),

  makeFrustum: function ( left, right, bottom, top, near, far ) {

    var te = this.elements;
    var x = 2 * near / ( right - left );
    var y = 2 * near / ( top - bottom );

    var a = ( right + left ) / ( right - left );
    var b = ( top + bottom ) / ( top - bottom );
    var c = - ( far + near ) / ( far - near );
    var d = - 2 * far * near / ( far - near );

    te[0] = x;  te[4] = 0;  te[8] = a;  te[12] = 0;
    te[1] = 0;  te[5] = y;  te[9] = b;  te[13] = 0;
    te[2] = 0;  te[6] = 0;  te[10] = c; te[14] = d;
    te[3] = 0;  te[7] = 0;  te[11] = - 1; te[15] = 0;

    return this;

  },

  makePerspective: function ( fov, aspect, near, far ) {

    var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
    var ymin = - ymax;
    var xmin = ymin * aspect;
    var xmax = ymax * aspect;

    return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

  },

  makeOrthographic: function ( left, right, top, bottom, near, far ) {

    var te = this.elements;
    var w = right - left;
    var h = top - bottom;
    var p = far - near;

    var x = ( right + left ) / w;
    var y = ( top + bottom ) / h;
    var z = ( far + near ) / p;

    te[0] = 2 / w;  te[4] = 0;  te[8] = 0;  te[12] = -x;
    te[1] = 0;  te[5] = 2 / h;  te[9] = 0;  te[13] = -y;
    te[2] = 0;  te[6] = 0;  te[10] = -2/p;  te[14] = -z;
    te[3] = 0;  te[7] = 0;  te[11] = 0; te[15] = 1;

    return this;

  },

  fromArray: function ( array ) {

    this.elements.set( array );

    return this;

  },

  toArray: function () {

    var te = this.elements;

    return [
      te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
      te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
      te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
      te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
    ];

  },

  clone: function () {

    var te = this.elements;

    return new THREE.Matrix4(

      te[0], te[4], te[8], te[12],
      te[1], te[5], te[9], te[13],
      te[2], te[6], te[10], te[14],
      te[3], te[7], te[11], te[15]

    );

  }

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Ray = function ( origin, direction ) {

  this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
  this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

};

THREE.Ray.prototype = {

  constructor: THREE.Ray,

  set: function ( origin, direction ) {

    this.origin.copy( origin );
    this.direction.copy( direction );

    return this;

  },

  copy: function ( ray ) {

    this.origin.copy( ray.origin );
    this.direction.copy( ray.direction );

    return this;

  },

  at: function ( t, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();

    return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

  },

  recast: function () {

    var v1 = new THREE.Vector3();

    return function ( t ) {

      this.origin.copy( this.at( t, v1 ) );

      return this;

    };

  }(),

  closestPointToPoint: function ( point, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    result.subVectors( point, this.origin );
    var directionDistance = result.dot( this.direction );

    if ( directionDistance < 0 ) {

      return result.copy( this.origin );

    }

    return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

  },

  distanceToPoint: function () {

    var v1 = new THREE.Vector3();

    return function ( point ) {

      var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

      // point behind the ray

      if ( directionDistance < 0 ) {

        return this.origin.distanceTo( point );

      }

      v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

      return v1.distanceTo( point );

    };

  }(),

  distanceSqToSegment: function( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

    // from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
    // It returns the min distance between the ray and the segment
    // defined by v0 and v1
    // It can also set two optional targets :
    // - The closest point on the ray
    // - The closest point on the segment

    var segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );
    var segDir = v1.clone().sub( v0 ).normalize();
    var segExtent = v0.distanceTo( v1 ) * 0.5;
    var diff = this.origin.clone().sub( segCenter );
    var a01 = - this.direction.dot( segDir );
    var b0 = diff.dot( this.direction );
    var b1 = - diff.dot( segDir );
    var c = diff.lengthSq();
    var det = Math.abs( 1 - a01 * a01 );
    var s0, s1, sqrDist, extDet;

    if ( det >= 0 ) {

      // The ray and segment are not parallel.

      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;

      if ( s0 >= 0 ) {

        if ( s1 >= - extDet ) {

          if ( s1 <= extDet ) {

            // region 0
            // Minimum at interior points of ray and segment.

            var invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

          } else {

            // region 1

            s1 = segExtent;
            s0 = Math.max( 0, - ( a01 * s1 + b0) );
            sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

          }

        } else {

          // region 5

          s1 = - segExtent;
          s0 = Math.max( 0, - ( a01 * s1 + b0) );
          sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

        }

      } else {

        if ( s1 <= - extDet) {

          // region 4

          s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
          s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
          sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

        } else if ( s1 <= extDet ) {

          // region 3

          s0 = 0;
          s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
          sqrDist = s1 * ( s1 + 2 * b1 ) + c;

        } else {

          // region 2

          s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
          s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
          sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

        }

      }

    } else {

      // Ray and segment are parallel.

      s1 = ( a01 > 0 ) ? - segExtent : segExtent;
      s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
      sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

    }

    if ( optionalPointOnRay ) {

      optionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );

    }

    if ( optionalPointOnSegment ) {

      optionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );

    }

    return sqrDist;

  },

  isIntersectionSphere: function ( sphere ) {

    return this.distanceToPoint( sphere.center ) <= sphere.radius;

  },

  isIntersectionPlane: function ( plane ) {

    // check if the ray lies on the plane first

    var distToPoint = plane.distanceToPoint( this.origin );

    if ( distToPoint === 0 ) {

      return true;

    }

    var denominator = plane.normal.dot( this.direction );

    if ( denominator * distToPoint < 0 ) {

      return true

    }

    // ray origin is behind the plane (and is pointing behind it)

    return false;

  },

  distanceToPlane: function ( plane ) {

    var denominator = plane.normal.dot( this.direction );
    if ( denominator == 0 ) {

      // line is coplanar, return origin
      if( plane.distanceToPoint( this.origin ) == 0 ) {

        return 0;

      }

      // Null is preferable to undefined since undefined means.... it is undefined

      return null;

    }

    var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

    // Return if the ray never intersects the plane

    return t >= 0 ? t :  null;

  },

  intersectPlane: function ( plane, optionalTarget ) {

    var t = this.distanceToPlane( plane );

    if ( t === null ) {

      return null;
    }

    return this.at( t, optionalTarget );

  },

  isIntersectionBox: function () {
    
    var v = new THREE.Vector3();

    return function ( box ) {

      return this.intersectBox( box, v ) !== null;

    }

  }(),

  intersectBox: function ( box , optionalTarget ) {

    // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/

    var tmin,tmax,tymin,tymax,tzmin,tzmax;

    var invdirx = 1/this.direction.x,
      invdiry = 1/this.direction.y,
      invdirz = 1/this.direction.z;

    var origin = this.origin;

    if (invdirx >= 0) {
        
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;

    } else { 

      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }     

    if (invdiry >= 0) {
    
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;

    } else {

      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }

    if ((tmin > tymax) || (tymin > tmax)) return null;

    // These lines also handle the case where tmin or tmax is NaN
    // (result of 0 * Infinity). x !== x returns true if x is NaN
    
    if (tymin > tmin || tmin !== tmin ) tmin = tymin;

    if (tymax < tmax || tmax !== tmax ) tmax = tymax;

    if (invdirz >= 0) {
    
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;

    } else {

      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }

    if ((tmin > tzmax) || (tzmin > tmax)) return null;

    if (tzmin > tmin || tmin !== tmin ) tmin = tzmin;

    if (tzmax < tmax || tmax !== tmax ) tmax = tzmax;

    //return point closest to the ray (positive side)

    if ( tmax < 0 ) return null;

    return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

  },

  intersectTriangle: function() {

    // Compute the offset origin, edges, and normal.
    var diff = new THREE.Vector3();
    var edge1 = new THREE.Vector3();
    var edge2 = new THREE.Vector3();
    var normal = new THREE.Vector3();

    return function ( a, b, c, backfaceCulling, optionalTarget ) {

      // from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp

      edge1.subVectors( b, a );
      edge2.subVectors( c, a );
      normal.crossVectors( edge1, edge2 );

      // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
      //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
      //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
      //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
      var DdN = this.direction.dot( normal );
      var sign;

      if ( DdN > 0 ) {

        if ( backfaceCulling ) return null;
        sign = 1;

      } else if ( DdN < 0 ) {

        sign = - 1;
        DdN = - DdN;

      } else {

        return null;

      }

      diff.subVectors( this.origin, a );
      var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

      // b1 < 0, no intersection
      if ( DdQxE2 < 0 ) {

        return null;

      }

      var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

      // b2 < 0, no intersection
      if ( DdE1xQ < 0 ) {

        return null;

      }

      // b1+b2 > 1, no intersection
      if ( DdQxE2 + DdE1xQ > DdN ) {

        return null;

      }

      // Line intersects triangle, check if ray does.
      var QdN = - sign * diff.dot( normal );

      // t < 0, no intersection
      if ( QdN < 0 ) {

        return null;

      }

      // Ray intersects triangle.
      return this.at( QdN / DdN, optionalTarget );
  
    }
  
  }(),

  applyMatrix4: function ( matrix4 ) {

    this.direction.add( this.origin ).applyMatrix4( matrix4 );
    this.origin.applyMatrix4( matrix4 );
    this.direction.sub( this.origin );
    this.direction.normalize();

    return this;
  },

  equals: function ( ray ) {

    return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

  },

  clone: function () {

    return new THREE.Ray().copy( this );

  }

};

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Sphere = function ( center, radius ) {

  this.center = ( center !== undefined ) ? center : new THREE.Vector3();
  this.radius = ( radius !== undefined ) ? radius : 0;

};

THREE.Sphere.prototype = {

  constructor: THREE.Sphere,

  set: function ( center, radius ) {

    this.center.copy( center );
    this.radius = radius;

    return this;
  },


  setFromPoints: function () {

    var box = new THREE.Box3();

    return function ( points, optionalCenter )  {

      var center = this.center;

      if ( optionalCenter !== undefined ) {

        center.copy( optionalCenter );

      } else {

        box.setFromPoints( points ).center( center );

      }

      var maxRadiusSq = 0;

      for ( var i = 0, il = points.length; i < il; i ++ ) {

        maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

      }

      this.radius = Math.sqrt( maxRadiusSq );

      return this;      
    
    };

  }(),

  copy: function ( sphere ) {

    this.center.copy( sphere.center );
    this.radius = sphere.radius;

    return this;

  },

  empty: function () {

    return ( this.radius <= 0 );

  },

  containsPoint: function ( point ) {

    return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

  },

  distanceToPoint: function ( point ) {

    return ( point.distanceTo( this.center ) - this.radius );

  },

  intersectsSphere: function ( sphere ) {

    var radiusSum = this.radius + sphere.radius;

    return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

  },

  clampPoint: function ( point, optionalTarget ) {

    var deltaLengthSq = this.center.distanceToSquared( point );

    var result = optionalTarget || new THREE.Vector3();
    result.copy( point );

    if ( deltaLengthSq > ( this.radius * this.radius ) ) {

      result.sub( this.center ).normalize();
      result.multiplyScalar( this.radius ).add( this.center );

    }

    return result;

  },

  getBoundingBox: function ( optionalTarget ) {

    var box = optionalTarget || new THREE.Box3();

    box.set( this.center, this.center );
    box.expandByScalar( this.radius );

    return box;

  },

  applyMatrix4: function ( matrix ) {

    this.center.applyMatrix4( matrix );
    this.radius = this.radius * matrix.getMaxScaleOnAxis();

    return this;

  },

  translate: function ( offset ) {

    this.center.add( offset );

    return this;

  },

  equals: function ( sphere ) {

    return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

  },

  clone: function () {

    return new THREE.Sphere().copy( this );

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://exocortex.com
 */

THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

  this.planes = [

    ( p0 !== undefined ) ? p0 : new THREE.Plane(),
    ( p1 !== undefined ) ? p1 : new THREE.Plane(),
    ( p2 !== undefined ) ? p2 : new THREE.Plane(),
    ( p3 !== undefined ) ? p3 : new THREE.Plane(),
    ( p4 !== undefined ) ? p4 : new THREE.Plane(),
    ( p5 !== undefined ) ? p5 : new THREE.Plane()

  ];

};

THREE.Frustum.prototype = {

  constructor: THREE.Frustum,

  set: function ( p0, p1, p2, p3, p4, p5 ) {

    var planes = this.planes;

    planes[0].copy( p0 );
    planes[1].copy( p1 );
    planes[2].copy( p2 );
    planes[3].copy( p3 );
    planes[4].copy( p4 );
    planes[5].copy( p5 );

    return this;

  },

  copy: function ( frustum ) {

    var planes = this.planes;

    for( var i = 0; i < 6; i ++ ) {

      planes[i].copy( frustum.planes[i] );

    }

    return this;

  },

  setFromMatrix: function ( m ) {

    var planes = this.planes;
    var me = m.elements;
    var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
    var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
    var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
    var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];

    planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
    planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
    planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
    planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
    planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
    planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

    return this;

  },

  intersectsObject: function () {

    var sphere = new THREE.Sphere();

    return function ( object ) {

      var geometry = object.geometry;

      if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

      sphere.copy( geometry.boundingSphere );
      sphere.applyMatrix4( object.matrixWorld );

      return this.intersectsSphere( sphere );

    };

  }(),

  intersectsSphere: function ( sphere ) {

    var planes = this.planes;
    var center = sphere.center;
    var negRadius = -sphere.radius;

    for ( var i = 0; i < 6; i ++ ) {

      var distance = planes[ i ].distanceToPoint( center );

      if ( distance < negRadius ) {

        return false;

      }

    }

    return true;

  },

  intersectsBox : function() {

    var p1 = new THREE.Vector3(),
      p2 = new THREE.Vector3();

    return function( box ) {

      var planes = this.planes;
      
      for ( var i = 0; i < 6 ; i ++ ) {
      
        var plane = planes[i];
        
        p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
        p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
        p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
        p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

        var d1 = plane.distanceToPoint( p1 );
        var d2 = plane.distanceToPoint( p2 );
        
        // if both outside plane, no intersection

        if ( d1 < 0 && d2 < 0 ) {
          
          return false;
    
        }
      }

      return true;
    };

  }(),


  containsPoint: function ( point ) {

    var planes = this.planes;

    for ( var i = 0; i < 6; i ++ ) {

      if ( planes[ i ].distanceToPoint( point ) < 0 ) {

        return false;

      }

    }

    return true;

  },

  clone: function () {

    return new THREE.Frustum().copy( this );

  }

};

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Plane = function ( normal, constant ) {

  this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
  this.constant = ( constant !== undefined ) ? constant : 0;

};

THREE.Plane.prototype = {

  constructor: THREE.Plane,

  set: function ( normal, constant ) {

    this.normal.copy( normal );
    this.constant = constant;

    return this;

  },

  setComponents: function ( x, y, z, w ) {

    this.normal.set( x, y, z );
    this.constant = w;

    return this;

  },

  setFromNormalAndCoplanarPoint: function ( normal, point ) {

    this.normal.copy( normal );
    this.constant = - point.dot( this.normal ); // must be this.normal, not normal, as this.normal is normalized

    return this;

  },

  setFromCoplanarPoints: function() {

    var v1 = new THREE.Vector3();
    var v2 = new THREE.Vector3();

    return function ( a, b, c ) {

      var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

      // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

      this.setFromNormalAndCoplanarPoint( normal, a );

      return this;

    };

  }(),


  copy: function ( plane ) {

    this.normal.copy( plane.normal );
    this.constant = plane.constant;

    return this;

  },

  normalize: function () {

    // Note: will lead to a divide by zero if the plane is invalid.

    var inverseNormalLength = 1.0 / this.normal.length();
    this.normal.multiplyScalar( inverseNormalLength );
    this.constant *= inverseNormalLength;

    return this;

  },

  negate: function () {

    this.constant *= -1;
    this.normal.negate();

    return this;

  },

  distanceToPoint: function ( point ) {

    return this.normal.dot( point ) + this.constant;

  },

  distanceToSphere: function ( sphere ) {

    return this.distanceToPoint( sphere.center ) - sphere.radius;

  },

  projectPoint: function ( point, optionalTarget ) {

    return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

  },

  orthoPoint: function ( point, optionalTarget ) {

    var perpendicularMagnitude = this.distanceToPoint( point );

    var result = optionalTarget || new THREE.Vector3();
    return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

  },

  isIntersectionLine: function ( line ) {

    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

    var startSign = this.distanceToPoint( line.start );
    var endSign = this.distanceToPoint( line.end );

    return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

  },

  intersectLine: function() {

    var v1 = new THREE.Vector3();

    return function ( line, optionalTarget ) {

      var result = optionalTarget || new THREE.Vector3();

      var direction = line.delta( v1 );

      var denominator = this.normal.dot( direction );

      if ( denominator == 0 ) {

        // line is coplanar, return origin
        if( this.distanceToPoint( line.start ) == 0 ) {

          return result.copy( line.start );

        }

        // Unsure if this is the correct method to handle this case.
        return undefined;

      }

      var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

      if( t < 0 || t > 1 ) {

        return undefined;

      }

      return result.copy( direction ).multiplyScalar( t ).add( line.start );

    };

  }(),


  coplanarPoint: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.copy( this.normal ).multiplyScalar( - this.constant );

  },

  applyMatrix4: function() {

    var v1 = new THREE.Vector3();
    var v2 = new THREE.Vector3();
    var m1 = new THREE.Matrix3();

    return function ( matrix, optionalNormalMatrix ) {

      // compute new normal based on theory here:
      // http://www.songho.ca/opengl/gl_normaltransform.html
      var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
      var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );
      
      var newCoplanarPoint = this.coplanarPoint( v2 );
      newCoplanarPoint.applyMatrix4( matrix );

      this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

      return this;

    };

  }(),

  translate: function ( offset ) {

    this.constant = this.constant - offset.dot( this.normal );

    return this;

  },

  equals: function ( plane ) {

    return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );

  },

  clone: function () {

    return new THREE.Plane().copy( this );

  }

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Math = {

  generateUUID: function () {

    // http://www.broofa.com/Tools/Math.uuid.htm
    
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    var uuid = new Array(36);
    var rnd = 0, r;

    return function () {

      for ( var i = 0; i < 36; i ++ ) {

        if ( i == 8 || i == 13 || i == 18 || i == 23 ) {
      
          uuid[ i ] = '-';
      
        } else if ( i == 14 ) {
      
          uuid[ i ] = '4';
      
        } else {
      
          if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;
          r = rnd & 0xf;
          rnd = rnd >> 4;
          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];

        }
      }
      
      return uuid.join('');

    };

  }(),

  // Clamp value to range <a, b>

  clamp: function ( x, a, b ) {

    return ( x < a ) ? a : ( ( x > b ) ? b : x );

  },

  // Clamp value to range <a, inf)

  clampBottom: function ( x, a ) {

    return x < a ? a : x;

  },

  // Linear mapping from range <a1, a2> to range <b1, b2>

  mapLinear: function ( x, a1, a2, b1, b2 ) {

    return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

  },

  // http://en.wikipedia.org/wiki/Smoothstep

  smoothstep: function ( x, min, max ) {

    if ( x <= min ) return 0;
    if ( x >= max ) return 1;

    x = ( x - min )/( max - min );

    return x*x*(3 - 2*x);

  },

  smootherstep: function ( x, min, max ) {

    if ( x <= min ) return 0;
    if ( x >= max ) return 1;

    x = ( x - min )/( max - min );

    return x*x*x*(x*(x*6 - 15) + 10);

  },

  // Random float from <0, 1> with 16 bits of randomness
  // (standard Math.random() creates repetitive patterns when applied over larger space)

  random16: function () {

    return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;

  },

  // Random integer from <low, high> interval

  randInt: function ( low, high ) {

    return low + Math.floor( Math.random() * ( high - low + 1 ) );

  },

  // Random float from <low, high> interval

  randFloat: function ( low, high ) {

    return low + Math.random() * ( high - low );

  },

  // Random float from <-range/2, range/2> interval

  randFloatSpread: function ( range ) {

    return range * ( 0.5 - Math.random() );

  },

  sign: function ( x ) {

    return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : 0;

  },

  degToRad: function() {

    var degreeToRadiansFactor = Math.PI / 180;

    return function ( degrees ) {

      return degrees * degreeToRadiansFactor;

    };

  }(),

  radToDeg: function() {

    var radianToDegreesFactor = 180 / Math.PI;

    return function ( radians ) {

      return radians * radianToDegreesFactor;

    };

  }(),

  isPowerOfTwo: function ( value ) {

    return ( value & ( value - 1 ) ) === 0 && value !== 0;

  }

};

/**
 * Spline from Tween.js, slightly optimized (and trashed)
 * http://sole.github.com/tween.js/examples/05_spline.html
 *
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Spline = function ( points ) {

  this.points = points;

  var c = [], v3 = { x: 0, y: 0, z: 0 },
  point, intPoint, weight, w2, w3,
  pa, pb, pc, pd;

  this.initFromArray = function( a ) {

    this.points = [];

    for ( var i = 0; i < a.length; i++ ) {

      this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

    }

  };

  this.getPoint = function ( k ) {

    point = ( this.points.length - 1 ) * k;
    intPoint = Math.floor( point );
    weight = point - intPoint;

    c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
    c[ 1 ] = intPoint;
    c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
    c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

    pa = this.points[ c[ 0 ] ];
    pb = this.points[ c[ 1 ] ];
    pc = this.points[ c[ 2 ] ];
    pd = this.points[ c[ 3 ] ];

    w2 = weight * weight;
    w3 = weight * w2;

    v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
    v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
    v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

    return v3;

  };

  this.getControlPointsArray = function () {

    var i, p, l = this.points.length,
      coords = [];

    for ( i = 0; i < l; i ++ ) {

      p = this.points[ i ];
      coords[ i ] = [ p.x, p.y, p.z ];

    }

    return coords;

  };

  // approximate length by summing linear segments

  this.getLength = function ( nSubDivisions ) {

    var i, index, nSamples, position,
      point = 0, intPoint = 0, oldIntPoint = 0,
      oldPosition = new THREE.Vector3(),
      tmpVec = new THREE.Vector3(),
      chunkLengths = [],
      totalLength = 0;

    // first point has 0 length

    chunkLengths[ 0 ] = 0;

    if ( !nSubDivisions ) nSubDivisions = 100;

    nSamples = this.points.length * nSubDivisions;

    oldPosition.copy( this.points[ 0 ] );

    for ( i = 1; i < nSamples; i ++ ) {

      index = i / nSamples;

      position = this.getPoint( index );
      tmpVec.copy( position );

      totalLength += tmpVec.distanceTo( oldPosition );

      oldPosition.copy( position );

      point = ( this.points.length - 1 ) * index;
      intPoint = Math.floor( point );

      if ( intPoint != oldIntPoint ) {

        chunkLengths[ intPoint ] = totalLength;
        oldIntPoint = intPoint;

      }

    }

    // last point ends with total length

    chunkLengths[ chunkLengths.length ] = totalLength;

    return { chunks: chunkLengths, total: totalLength };

  };

  this.reparametrizeByArcLength = function ( samplingCoef ) {

    var i, j,
      index, indexCurrent, indexNext,
      linearDistance, realDistance,
      sampling, position,
      newpoints = [],
      tmpVec = new THREE.Vector3(),
      sl = this.getLength();

    newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

    for ( i = 1; i < this.points.length; i++ ) {

      //tmpVec.copy( this.points[ i - 1 ] );
      //linearDistance = tmpVec.distanceTo( this.points[ i ] );

      realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

      sampling = Math.ceil( samplingCoef * realDistance / sl.total );

      indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
      indexNext = i / ( this.points.length - 1 );

      for ( j = 1; j < sampling - 1; j++ ) {

        index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

        position = this.getPoint( index );
        newpoints.push( tmpVec.copy( position ).clone() );

      }

      newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

    }

    this.points = newpoints;

  };

  // Catmull-Rom

  function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

    var v0 = ( p2 - p0 ) * 0.5,
      v1 = ( p3 - p1 ) * 0.5;

    return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  };

};

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Triangle = function ( a, b, c ) {

  this.a = ( a !== undefined ) ? a : new THREE.Vector3();
  this.b = ( b !== undefined ) ? b : new THREE.Vector3();
  this.c = ( c !== undefined ) ? c : new THREE.Vector3();

};

THREE.Triangle.normal = function() {

  var v0 = new THREE.Vector3();

  return function ( a, b, c, optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();

    result.subVectors( c, b );
    v0.subVectors( a, b );
    result.cross( v0 );

    var resultLengthSq = result.lengthSq();
    if( resultLengthSq > 0 ) {

      return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

    }

    return result.set( 0, 0, 0 );

  };

}();

// static/instance method to calculate barycoordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
THREE.Triangle.barycoordFromPoint = function() {

  var v0 = new THREE.Vector3();
  var v1 = new THREE.Vector3();
  var v2 = new THREE.Vector3();

  return function ( point, a, b, c, optionalTarget ) {

    v0.subVectors( c, a );
    v1.subVectors( b, a );
    v2.subVectors( point, a );

    var dot00 = v0.dot( v0 );
    var dot01 = v0.dot( v1 );
    var dot02 = v0.dot( v2 );
    var dot11 = v1.dot( v1 );
    var dot12 = v1.dot( v2 );

    var denom = ( dot00 * dot11 - dot01 * dot01 );

    var result = optionalTarget || new THREE.Vector3();

    // colinear or singular triangle
    if( denom == 0 ) {
      // arbitrary location outside of triangle?
      // not sure if this is the best idea, maybe should be returning undefined
      return result.set( -2, -1, -1 );
    }

    var invDenom = 1 / denom;
    var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
    var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

    // barycoordinates must always sum to 1
    return result.set( 1 - u - v, v, u );

  };

}();

THREE.Triangle.containsPoint = function() {

  var v1 = new THREE.Vector3();

  return function ( point, a, b, c ) {

    var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

    return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

  };

}();

THREE.Triangle.prototype = {

  constructor: THREE.Triangle,

  set: function ( a, b, c ) {

    this.a.copy( a );
    this.b.copy( b );
    this.c.copy( c );

    return this;

  },

  setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

    this.a.copy( points[i0] );
    this.b.copy( points[i1] );
    this.c.copy( points[i2] );

    return this;

  },

  copy: function ( triangle ) {

    this.a.copy( triangle.a );
    this.b.copy( triangle.b );
    this.c.copy( triangle.c );

    return this;

  },

  area: function() {

    var v0 = new THREE.Vector3();
    var v1 = new THREE.Vector3();

    return function () {

      v0.subVectors( this.c, this.b );
      v1.subVectors( this.a, this.b );

      return v0.cross( v1 ).length() * 0.5;

    };

  }(),

  midpoint: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Vector3();
    return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

  },

  normal: function ( optionalTarget ) {

    return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

  },

  plane: function ( optionalTarget ) {

    var result = optionalTarget || new THREE.Plane();

    return result.setFromCoplanarPoints( this.a, this.b, this.c );

  },

  barycoordFromPoint: function ( point, optionalTarget ) {

    return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

  },

  containsPoint: function ( point ) {

    return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

  },

  equals: function ( triangle ) {

    return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

  },

  clone: function () {

    return new THREE.Triangle().copy( this );

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Vertex = function ( v ) {

  console.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')
  return v;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Clock = function ( autoStart ) {

  this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

  this.startTime = 0;
  this.oldTime = 0;
  this.elapsedTime = 0;

  this.running = false;

};

THREE.Clock.prototype = {

  constructor: THREE.Clock,

  start: function () {

    this.startTime = self.performance !== undefined && self.performance.now !== undefined
          ? self.performance.now()
          : Date.now();

    this.oldTime = this.startTime;
    this.running = true;
  },

  stop: function () {

    this.getElapsedTime();
    this.running = false;

  },

  getElapsedTime: function () {

    this.getDelta();
    return this.elapsedTime;

  },

  getDelta: function () {

    var diff = 0;

    if ( this.autoStart && ! this.running ) {

      this.start();

    }

    if ( this.running ) {

      var newTime = self.performance !== undefined && self.performance.now !== undefined
          ? self.performance.now()
          : Date.now();

      diff = 0.001 * ( newTime - this.oldTime );
      this.oldTime = newTime;

      this.elapsedTime += diff;

    }

    return diff;

  }

};

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

THREE.EventDispatcher = function () {}

THREE.EventDispatcher.prototype = {

  constructor: THREE.EventDispatcher,

  apply: function ( object ) {

    object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
    object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
    object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
    object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;

  },

  addEventListener: function ( type, listener ) {

    if ( this._listeners === undefined ) this._listeners = {};

    var listeners = this._listeners;

    if ( listeners[ type ] === undefined ) {

      listeners[ type ] = [];

    }

    if ( listeners[ type ].indexOf( listener ) === - 1 ) {

      listeners[ type ].push( listener );

    }

  },

  hasEventListener: function ( type, listener ) {

    if ( this._listeners === undefined ) return false;

    var listeners = this._listeners;

    if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

      return true;

    }

    return false;

  },

  removeEventListener: function ( type, listener ) {

    if ( this._listeners === undefined ) return;

    var listeners = this._listeners;
    var listenerArray = listeners[ type ];

    if ( listenerArray !== undefined ) {

      var index = listenerArray.indexOf( listener );

      if ( index !== - 1 ) {

        listenerArray.splice( index, 1 );

      }

    }

  },

  dispatchEvent: function ( event ) {
      
    if ( this._listeners === undefined ) return;

    var listeners = this._listeners;
    var listenerArray = listeners[ event.type ];

    if ( listenerArray !== undefined ) {

      event.target = this;

      var array = [];
      var length = listenerArray.length;

      for ( var i = 0; i < length; i ++ ) {

        array[ i ] = listenerArray[ i ];

      }

      for ( var i = 0; i < length; i ++ ) {

        array[ i ].call( this, event );

      }

    }

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://exocortex.com/
 * @author stephomi / http://stephaneginier.com/
 */

( function ( THREE ) {

  THREE.Raycaster = function ( origin, direction, near, far ) {

    this.ray = new THREE.Ray( origin, direction );
    // direction is assumed to be normalized (for accurate distance calculations)

    this.near = near || 0;
    this.far = far || Infinity;

  };

  var sphere = new THREE.Sphere();
  var localRay = new THREE.Ray();
  var facePlane = new THREE.Plane();
  var intersectPoint = new THREE.Vector3();
  var matrixPosition = new THREE.Vector3();

  var inverseMatrix = new THREE.Matrix4();

  var descSort = function ( a, b ) {

    return a.distance - b.distance;

  };

  var vA = new THREE.Vector3();
  var vB = new THREE.Vector3();
  var vC = new THREE.Vector3();

  var intersectObject = function ( object, raycaster, intersects ) {

    if ( object instanceof THREE.Sprite ) {

      matrixPosition.setFromMatrixPosition( object.matrixWorld );
      
      var distance = raycaster.ray.distanceToPoint( matrixPosition );

      if ( distance > object.scale.x ) {

        return intersects;

      }

      intersects.push( {

        distance: distance,
        point: object.position,
        face: null,
        object: object

      } );

    } else if ( object instanceof THREE.LOD ) {

      matrixPosition.setFromMatrixPosition( object.matrixWorld );
      var distance = raycaster.ray.origin.distanceTo( matrixPosition );

      intersectObject( object.getObjectForDistance( distance ), raycaster, intersects );

    } else if ( object instanceof THREE.Mesh ) {

      var geometry = object.geometry;

      // Checking boundingSphere distance to ray

      if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

      sphere.copy( geometry.boundingSphere );
      sphere.applyMatrix4( object.matrixWorld );

      if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

        return intersects;

      }

      // Check boundingBox before continuing
      
      inverseMatrix.getInverse( object.matrixWorld );  
      localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

      if ( geometry.boundingBox !== null ) {

        if ( localRay.isIntersectionBox( geometry.boundingBox ) === false )  {

          return intersects;

        }

      } 

      if ( geometry instanceof THREE.BufferGeometry ) {

        var material = object.material;

        if ( material === undefined ) return intersects;

        var attributes = geometry.attributes;

        var a, b, c;
        var precision = raycaster.precision;

        if ( attributes.index !== undefined ) {

          var indices = attributes.index.array;
          var positions = attributes.position.array;
          var offsets = geometry.offsets;

          if ( offsets.length === 0 ) {

            offsets = [ { start: 0, count: positions.length, index: 0 } ];

          }

          for ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {

            var start = offsets[ oi ].start;
            var count = offsets[ oi ].count;
            var index = offsets[ oi ].index;

            for ( var i = start, il = start + count; i < il; i += 3 ) {

              a = index + indices[ i ];
              b = index + indices[ i + 1 ]; 
              c = index + indices[ i + 2 ];

              vA.set(
                positions[ a * 3 ],
                positions[ a * 3 + 1 ],
                positions[ a * 3 + 2 ]
              );
              vB.set(
                positions[ b * 3 ],
                positions[ b * 3 + 1 ],
                positions[ b * 3 + 2 ]
              );
              vC.set(
                positions[ c * 3 ],
                positions[ c * 3 + 1 ],
                positions[ c * 3 + 2 ]
              );

              
              if ( material.side === THREE.BackSide ) {
              
                var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true ); 

              } else {

                var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

              }

              if ( intersectionPoint === null ) continue;

              intersectionPoint.applyMatrix4( object.matrixWorld );

              var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

              if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

              intersects.push( {

                distance: distance,
                point: intersectionPoint,
                indices: [a, b, c],
                face: null,
                faceIndex: null,
                object: object

              } );

            }

          }

        } else {

          var offsets = geometry.offsets;
          var positions = attributes.position.array;

          for ( var i = 0, il = attributes.position.array.length; i < il; i += 3 ) {

            a = i;
            b = i + 1;
            c = i + 2;

            vA.set(
              positions[ a * 3 ],
              positions[ a * 3 + 1 ],
              positions[ a * 3 + 2 ]
            );
            vB.set(
              positions[ b * 3 ],
              positions[ b * 3 + 1 ],
              positions[ b * 3 + 2 ]
            );
            vC.set(
              positions[ c * 3 ],
              positions[ c * 3 + 1 ],
              positions[ c * 3 + 2 ]
            );

            
            if ( material.side === THREE.BackSide ) {
              
              var intersectionPoint = localRay.intersectTriangle( vC, vB, vA, true ); 

            } else {

              var intersectionPoint = localRay.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

            }

            if ( intersectionPoint === null ) continue;

            intersectionPoint.applyMatrix4( object.matrixWorld );

            var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

            if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

            intersects.push( {

              distance: distance,
              point: intersectionPoint,
              indices: [a, b, c],
              face: null,
              faceIndex: null,
              object: object

            } );

          }

        }

      } else if ( geometry instanceof THREE.Geometry ) {

        var isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
        var objectMaterials = isFaceMaterial === true ? object.material.materials : null;

        var a, b, c, d;
        var precision = raycaster.precision;

        var vertices = geometry.vertices;

        for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

          var face = geometry.faces[ f ];

          var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;

          if ( material === undefined ) continue;

          a = vertices[ face.a ];
          b = vertices[ face.b ];
          c = vertices[ face.c ];

          if ( material.morphTargets === true ) {

            var morphTargets = geometry.morphTargets;
            var morphInfluences = object.morphTargetInfluences;

            vA.set( 0, 0, 0 );
            vB.set( 0, 0, 0 );
            vC.set( 0, 0, 0 );

            for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

              var influence = morphInfluences[ t ];

              if ( influence === 0 ) continue;

              var targets = morphTargets[ t ].vertices;

              vA.x += ( targets[ face.a ].x - a.x ) * influence;
              vA.y += ( targets[ face.a ].y - a.y ) * influence;
              vA.z += ( targets[ face.a ].z - a.z ) * influence;

              vB.x += ( targets[ face.b ].x - b.x ) * influence;
              vB.y += ( targets[ face.b ].y - b.y ) * influence;
              vB.z += ( targets[ face.b ].z - b.z ) * influence;

              vC.x += ( targets[ face.c ].x - c.x ) * influence;
              vC.y += ( targets[ face.c ].y - c.y ) * influence;
              vC.z += ( targets[ face.c ].z - c.z ) * influence;

            }

            vA.add( a );
            vB.add( b );
            vC.add( c );

            a = vA;
            b = vB;
            c = vC;

          }

          if ( material.side === THREE.BackSide ) {
              
            var intersectionPoint = localRay.intersectTriangle( c, b, a, true );

          } else {
                
            var intersectionPoint = localRay.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );

          }

          if ( intersectionPoint === null ) continue;

          intersectionPoint.applyMatrix4( object.matrixWorld );

          var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

          if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

          intersects.push( {

            distance: distance,
            point: intersectionPoint,
            face: face,
            faceIndex: f,
            object: object

          } );

        }

      }

    } else if ( object instanceof THREE.Line ) {

      var precision = raycaster.linePrecision;
      var precisionSq = precision * precision;

      var geometry = object.geometry;

      if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

      // Checking boundingSphere distance to ray

      sphere.copy( geometry.boundingSphere );
      sphere.applyMatrix4( object.matrixWorld );
      
      if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

        return intersects;

      }
      
      inverseMatrix.getInverse( object.matrixWorld );
      localRay.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

      /* if ( geometry instanceof THREE.BufferGeometry ) {

      } else */ if ( geometry instanceof THREE.Geometry ) {

        var vertices = geometry.vertices;
        var nbVertices = vertices.length;
        var interSegment = new THREE.Vector3();
        var interRay = new THREE.Vector3();
        var step = object.type === THREE.LineStrip ? 1 : 2;

        for ( var i = 0; i < nbVertices - 1; i = i + step ) {

          var distSq = localRay.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

          if ( distSq > precisionSq ) continue;

          var distance = localRay.origin.distanceTo( interRay );

          if ( distance < raycaster.near || distance > raycaster.far ) continue;

          intersects.push( {

            distance: distance,
            // What do we want? intersection point on the ray or on the segment??
            // point: raycaster.ray.at( distance ),
            point: interSegment.clone().applyMatrix4( object.matrixWorld ),
            face: null,
            faceIndex: null,
            object: object

          } );

        }

      }

    }

  };

  var intersectDescendants = function ( object, raycaster, intersects ) {

    var descendants = object.getDescendants();

    for ( var i = 0, l = descendants.length; i < l; i ++ ) {
      //Weidong: We add skip_selection property to the object to prevent it been detected
      if(descendants[ i ].skip_selection == undefined || descendants[ i ].skip_selection == false)
        intersectObject( descendants[ i ], raycaster, intersects );
      // else
      //   console.log("intersectDescendants skipping");


      // intersectObject( descendants[ i ], raycaster, intersects );
    }
  };

  //

  THREE.Raycaster.prototype.precision = 0.0001;
  THREE.Raycaster.prototype.linePrecision = 1;

  THREE.Raycaster.prototype.set = function ( origin, direction ) {

    this.ray.set( origin, direction );
    // direction is assumed to be normalized (for accurate distance calculations)

  };

  THREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {

    var intersects = [];

    if ( recursive === true ) {

      intersectDescendants( object, this, intersects );

    }

    intersectObject( object, this, intersects );

    intersects.sort( descSort );

    return intersects;

  };

  THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {

    var intersects = [];

    for ( var i = 0, l = objects.length; i < l; i ++ ) {

      intersectObject( objects[ i ], this, intersects );

      if ( recursive === true ) {

        intersectDescendants( objects[ i ], this, intersects );

      }

    }

    intersects.sort( descSort );

    return intersects;

  };

}( THREE ) );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Object3D = function () {

  this.id = THREE.Object3DIdCount ++;
  this.uuid = THREE.Math.generateUUID();

  this.name = '';

  this.parent = undefined;
  this.children = [];

  this.up = new THREE.Vector3( 0, 1, 0 );

  this.position = new THREE.Vector3();

  var scope = this;

  Object.defineProperties( this, {
    rotation: {
      enumerable: true,
      value: new THREE.Euler().onChange( function () {
        scope.quaternion.setFromEuler( scope.rotation, false );
      } )
    },
    quaternion: {
      enumerable: true,
      value: new THREE.Quaternion().onChange( function () {
        scope.rotation.setFromQuaternion( scope.quaternion, undefined, false );
      } )
    },
    scale: {
      enumerable: true,
      value: new THREE.Vector3( 1, 1, 1 )
    }
  } );

  this.renderDepth = null;

  this.rotationAutoUpdate = true;

  this.matrix = new THREE.Matrix4();
  this.matrixWorld = new THREE.Matrix4();

  this.matrixAutoUpdate = true;
  this.matrixWorldNeedsUpdate = false;

  this.visible = true;

  this.castShadow = false;
  this.receiveShadow = false;

  this.frustumCulled = true;

  this.userData = {};

};


THREE.Object3D.prototype = {

  constructor: THREE.Object3D,

  get eulerOrder () {

    console.warn( 'DEPRECATED: Object3D\'s .eulerOrder has been moved to Object3D\'s .rotation.order.' );

    return this.rotation.order;

  },

  set eulerOrder ( value ) {

    console.warn( 'DEPRECATED: Object3D\'s .eulerOrder has been moved to Object3D\'s .rotation.order.' );

    this.rotation.order = value;

  },

  get useQuaternion () {

    console.warn( 'DEPRECATED: Object3D\'s .useQuaternion has been removed. The library now uses quaternions by default.' );

  },

  set useQuaternion ( value ) {

    console.warn( 'DEPRECATED: Object3D\'s .useQuaternion has been removed. The library now uses quaternions by default.' );

  },

  applyMatrix: function ( matrix ) {

    this.matrix.multiplyMatrices( matrix, this.matrix );

    this.matrix.decompose( this.position, this.quaternion, this.scale );

  },

  setRotationFromAxisAngle: function ( axis, angle ) {

    // assumes axis is normalized

    this.quaternion.setFromAxisAngle( axis, angle );

  },

  setRotationFromEuler: function ( euler ) {

    this.quaternion.setFromEuler( euler, true );

  },

  setRotationFromMatrix: function ( m ) {

    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    this.quaternion.setFromRotationMatrix( m );

  },

  setRotationFromQuaternion: function ( q ) {

    // assumes q is normalized

    this.quaternion.copy( q );

  },

  rotateOnAxis: function() {

    // rotate object on axis in object space
    // axis is assumed to be normalized

    var q1 = new THREE.Quaternion();

    return function ( axis, angle ) {

      q1.setFromAxisAngle( axis, angle );

      this.quaternion.multiply( q1 );

      return this;

    }

  }(),

  rotateX: function () {

    var v1 = new THREE.Vector3( 1, 0, 0 );

    return function ( angle ) {

      return this.rotateOnAxis( v1, angle );

    };

  }(),

  rotateY: function () {

    var v1 = new THREE.Vector3( 0, 1, 0 );

    return function ( angle ) {

      return this.rotateOnAxis( v1, angle );

    };

  }(),

  rotateZ: function () {

    var v1 = new THREE.Vector3( 0, 0, 1 );

    return function ( angle ) {

      return this.rotateOnAxis( v1, angle );

    };

  }(),

  translateOnAxis: function () {

    // translate object by distance along axis in object space
    // axis is assumed to be normalized

    var v1 = new THREE.Vector3();

    return function ( axis, distance ) {

      v1.copy( axis );

      v1.applyQuaternion( this.quaternion );

      this.position.add( v1.multiplyScalar( distance ) );

      return this;

    }

  }(),

  translate: function ( distance, axis ) {

    console.warn( 'DEPRECATED: Object3D\'s .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.' );
    return this.translateOnAxis( axis, distance );

  },

  translateX: function () {

    var v1 = new THREE.Vector3( 1, 0, 0 );

    return function ( distance ) {

      return this.translateOnAxis( v1, distance );

    };

  }(),

  translateY: function () {

    var v1 = new THREE.Vector3( 0, 1, 0 );

    return function ( distance ) {

      return this.translateOnAxis( v1, distance );

    };

  }(),

  translateZ: function () {

    var v1 = new THREE.Vector3( 0, 0, 1 );

    return function ( distance ) {

      return this.translateOnAxis( v1, distance );

    };

  }(),

  localToWorld: function ( vector ) {

    return vector.applyMatrix4( this.matrixWorld );

  },

  worldToLocal: function () {

    var m1 = new THREE.Matrix4();

    return function ( vector ) {

      return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

    };

  }(),

  lookAt: function () {

    // This routine does not support objects with rotated and/or translated parent(s)

    var m1 = new THREE.Matrix4();

    return function ( vector ) {

      m1.lookAt( vector, this.position, this.up );

      this.quaternion.setFromRotationMatrix( m1 );

    };

  }(),

  add: function ( object ) {

    if ( object === this ) {

      console.warn( 'THREE.Object3D.add: An object can\'t be added as a child of itself.' );
      return;

    }

    if ( object instanceof THREE.Object3D ) {

      if ( object.parent !== undefined ) {

        object.parent.remove( object );

      }

      object.parent = this;
      object.dispatchEvent( { type: 'added' } );

      this.children.push( object );

      // add to scene

      var scene = this;

      while ( scene.parent !== undefined ) {

        scene = scene.parent;

      }

      if ( scene !== undefined && scene instanceof THREE.Scene )  {

        scene.__addObject( object );

      }

    }

  },

  remove: function ( object ) {

    var index = this.children.indexOf( object );

    if ( index !== - 1 ) {

      object.parent = undefined;
      object.dispatchEvent( { type: 'removed' } );

      this.children.splice( index, 1 );

      // remove from scene

      var scene = this;

      while ( scene.parent !== undefined ) {

        scene = scene.parent;

      }

      if ( scene !== undefined && scene instanceof THREE.Scene ) {

        scene.__removeObject( object );

      }

    }

  },

  traverse: function ( callback ) {

    callback( this );

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      this.children[ i ].traverse( callback );

    }

  },

  getObjectById: function ( id, recursive ) {

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      var child = this.children[ i ];

      if ( child.id === id ) {

        return child;

      }

      if ( recursive === true ) {

        child = child.getObjectById( id, recursive );

        if ( child !== undefined ) {

          return child;

        }

      }

    }

    return undefined;

  },

  getObjectByName: function ( name, recursive ) {

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      var child = this.children[ i ];

      if ( child.name === name ) {

        return child;

      }

      if ( recursive === true ) {

        child = child.getObjectByName( name, recursive );

        if ( child !== undefined ) {

          return child;

        }

      }

    }

    return undefined;

  },

  getChildByName: function ( name, recursive ) {

    console.warn( 'DEPRECATED: Object3D\'s .getChildByName() has been renamed to .getObjectByName().' );
    return this.getObjectByName( name, recursive );

  },

  getDescendants: function ( array ) {

    if ( array === undefined ) array = [];

    Array.prototype.push.apply( array, this.children );

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      this.children[ i ].getDescendants( array );

    }

    return array;

  },

  updateMatrix: function () {

    this.matrix.compose( this.position, this.quaternion, this.scale );

    this.matrixWorldNeedsUpdate = true;

  },

  updateMatrixWorld: function ( force ) {

    if ( this.matrixAutoUpdate === true ) this.updateMatrix();

    if ( this.matrixWorldNeedsUpdate === true || force === true ) {

      if ( this.parent === undefined ) {

        this.matrixWorld.copy( this.matrix );

      } else {

        this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

      }

      this.matrixWorldNeedsUpdate = false;

      force = true;

    }

    // update children

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      this.children[ i ].updateMatrixWorld( force );

    }

  },

  clone: function ( object, recursive ) {

    if ( object === undefined ) object = new THREE.Object3D();
    if ( recursive === undefined ) recursive = true;

    object.name = this.name;

    object.up.copy( this.up );

    object.position.copy( this.position );
    object.quaternion.copy( this.quaternion );
    object.scale.copy( this.scale );

    object.renderDepth = this.renderDepth;

    object.rotationAutoUpdate = this.rotationAutoUpdate;

    object.matrix.copy( this.matrix );
    object.matrixWorld.copy( this.matrixWorld );

    object.matrixAutoUpdate = this.matrixAutoUpdate;
    object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;

    object.visible = this.visible;

    object.castShadow = this.castShadow;
    object.receiveShadow = this.receiveShadow;

    object.frustumCulled = this.frustumCulled;

    object.userData = JSON.parse( JSON.stringify( this.userData ) );

    if ( recursive === true ) {

      for ( var i = 0; i < this.children.length; i ++ ) {

        var child = this.children[ i ];
        object.add( child.clone() );

      }

    }

    return object;

  }

};

THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );

THREE.Object3DIdCount = 0;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author julianwa / https://github.com/julianwa
 */

THREE.Projector = function () {

  var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,
  _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,
  _face, _faceCount, _facePool = [], _facePoolLength = 0,
  _line, _lineCount, _linePool = [], _linePoolLength = 0,
  _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,

  _renderData = { objects: [], lights: [], elements: [] },

  _vA = new THREE.Vector3(),
  _vB = new THREE.Vector3(),
  _vC = new THREE.Vector3(),

  _vector3 = new THREE.Vector3(),
  _vector4 = new THREE.Vector4(),

  _clipBox = new THREE.Box3( new THREE.Vector3( -1, -1, -1 ), new THREE.Vector3( 1, 1, 1 ) ),
  _boundingBox = new THREE.Box3(),
  _points3 = new Array( 3 ),
  _points4 = new Array( 4 ),

  _viewMatrix = new THREE.Matrix4(),
  _viewProjectionMatrix = new THREE.Matrix4(),

  _modelMatrix,
  _modelViewProjectionMatrix = new THREE.Matrix4(),

  _normalMatrix = new THREE.Matrix3(),

  _frustum = new THREE.Frustum(),

  _clippedVertex1PositionScreen = new THREE.Vector4(),
  _clippedVertex2PositionScreen = new THREE.Vector4();

  this.projectVector = function ( vector, camera ) {

    camera.matrixWorldInverse.getInverse( camera.matrixWorld );

    _viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );

    return vector.applyProjection( _viewProjectionMatrix );

  };

  this.unprojectVector = function () {

    var projectionMatrixInverse = new THREE.Matrix4();

    return function ( vector, camera ) {

      projectionMatrixInverse.getInverse( camera.projectionMatrix );
      _viewProjectionMatrix.multiplyMatrices( camera.matrixWorld, projectionMatrixInverse );

      return vector.applyProjection( _viewProjectionMatrix );

    };

  }();

  this.pickingRay = function ( vector, camera ) {

    // set two vectors with opposing z values
    vector.z = -1.0;
    var end = new THREE.Vector3( vector.x, vector.y, 1.0 );

    this.unprojectVector( vector, camera );
    this.unprojectVector( end, camera );

    // find direction from vector to end
    end.sub( vector ).normalize();

    return new THREE.Raycaster( vector, end );

  };

  var projectObject = function ( object ) {

    if ( object.visible === false ) return;

    if ( object instanceof THREE.Light ) {

      _renderData.lights.push( object );

    } else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {

      if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

        _object = getNextObjectInPool();
        _object.id = object.id;
        _object.object = object;

        if ( object.renderDepth !== null ) {

          _object.z = object.renderDepth;

        } else {

          _vector3.setFromMatrixPosition( object.matrixWorld );
          _vector3.applyProjection( _viewProjectionMatrix );
          _object.z = _vector3.z;

        }

        _renderData.objects.push( _object );

      }

    }

    for ( var i = 0, l = object.children.length; i < l; i ++ ) {

      projectObject( object.children[ i ] );

    }

  };

  var projectGraph = function ( root, sortObjects ) {

    _objectCount = 0;

    _renderData.objects.length = 0;
    _renderData.lights.length = 0;

    projectObject( root );

    if ( sortObjects === true ) {

      _renderData.objects.sort( painterSort );

    }

  };

  var RenderList = function () {

    var normals = [];
    var uvs = [];

    var object = null;
    var material = null;

    var normalMatrix = new THREE.Matrix3();

    var setObject = function ( value ) {

      object = value;
      material = object.material;

      normalMatrix.getNormalMatrix( object.matrixWorld );

      normals.length = 0;
      uvs.length = 0;

    };

    var projectVertex = function ( vertex ) {

      var position = vertex.position;
      var positionWorld = vertex.positionWorld;
      var positionScreen = vertex.positionScreen;

      positionWorld.copy( position ).applyMatrix4( _modelMatrix );
      positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );

      var invW = 1 / positionScreen.w;

      positionScreen.x *= invW;
      positionScreen.y *= invW;
      positionScreen.z *= invW;

      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 &&
           positionScreen.y >= -1 && positionScreen.y <= 1 &&
           positionScreen.z >= -1 && positionScreen.z <= 1;

    };

    var pushVertex = function ( x, y, z ) {

      _vertex = getNextVertexInPool();
      _vertex.position.set( x, y, z );

      projectVertex( _vertex );

    };

    var pushNormal = function ( x, y, z ) {

      normals.push( x, y, z );

    };

    var pushUv = function ( x, y ) {

      uvs.push( x, y );

    };

    var checkTriangleVisibility = function ( v1, v2, v3 ) {

      if ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;

      _points3[ 0 ] = v1.positionScreen;
      _points3[ 1 ] = v2.positionScreen;
      _points3[ 2 ] = v3.positionScreen;

      return _clipBox.isIntersectionBox( _boundingBox.setFromPoints( _points3 ) );

    };

    var checkBackfaceCulling = function ( v1, v2, v3 ) {

      return ( ( v3.positionScreen.x - v1.positionScreen.x ) *
            ( v2.positionScreen.y - v1.positionScreen.y ) -
            ( v3.positionScreen.y - v1.positionScreen.y ) *
            ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;

    };

    var pushLine = function ( a, b ) {

      var v1 = _vertexPool[ a ];
      var v2 = _vertexPool[ b ];

      _line = getNextLineInPool();

      _line.id = object.id;
      _line.v1.copy( v1 );
      _line.v2.copy( v2 );
      _line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;

      _line.material = object.material;

      _renderData.elements.push( _line );

    };

    var pushTriangle = function ( a, b, c ) {

      var v1 = _vertexPool[ a ];
      var v2 = _vertexPool[ b ];
      var v3 = _vertexPool[ c ];

      if ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;

      if ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {

        _face = getNextFaceInPool();

        _face.id = object.id;
        _face.v1.copy( v1 );
        _face.v2.copy( v2 );
        _face.v3.copy( v3 );
        _face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;

        for ( var i = 0; i < 3; i ++ ) {

          var offset = arguments[ i ] * 3;
          var normal = _face.vertexNormalsModel[ i ];

          normal.set( normals[ offset ], normals[ offset + 1 ], normals[ offset + 2 ] );
          normal.applyMatrix3( normalMatrix ).normalize();

          var offset2 = arguments[ i ] * 2;

          var uv = _face.uvs[ i ];
          uv.set( uvs[ offset2 ], uvs[ offset2 + 1 ] );

        }

        _face.vertexNormalsLength = 3;

        _face.material = object.material;

        _renderData.elements.push( _face );

      }

    };

    return {
      setObject: setObject,
      projectVertex: projectVertex,
      checkTriangleVisibility: checkTriangleVisibility,
      checkBackfaceCulling: checkBackfaceCulling,
      pushVertex: pushVertex,
      pushNormal: pushNormal,
      pushUv: pushUv,
      pushLine: pushLine,
      pushTriangle: pushTriangle
    }

  };

  var renderList = new RenderList();

  this.projectScene = function ( scene, camera, sortObjects, sortElements ) {

    var object, geometry, vertices, faces, face, faceVertexNormals, faceVertexUvs,
    isFaceMaterial, objectMaterials;

    _faceCount = 0;
    _lineCount = 0;
    _spriteCount = 0;

    _renderData.elements.length = 0;

    if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
    if ( camera.parent === undefined ) camera.updateMatrixWorld();

    _viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );
    _viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );

    _frustum.setFromMatrix( _viewProjectionMatrix );

    projectGraph( scene, sortObjects );

    for ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {

      object = _renderData.objects[ o ].object;
      geometry = object.geometry;

      renderList.setObject( object );

      _modelMatrix = object.matrixWorld;

      _vertexCount = 0;

      if ( object instanceof THREE.Mesh ) {

        if ( geometry instanceof THREE.BufferGeometry ) {

          var attributes = geometry.attributes;
          var offsets = geometry.offsets;

          if ( attributes.position === undefined ) continue;

          var positions = attributes.position.array;

          for ( var i = 0, l = positions.length; i < l; i += 3 ) {

            renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );

          }

          if ( attributes.normal !== undefined ) {

            var normals = attributes.normal.array;

            for ( var i = 0, l = normals.length; i < l; i += 3 ) {

              renderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );

            }

          }

          if ( attributes.uv !== undefined ) {

            var uvs = attributes.uv.array;

            for ( var i = 0, l = uvs.length; i < l; i += 2 ) {

              renderList.pushUv( uvs[ i ], uvs[ i + 1 ] );

            }

          }

          if ( attributes.index !== undefined ) {

            var indices = attributes.index.array;

            if ( offsets.length > 0 ) {

              for ( var o = 0; o < offsets.length; o ++ ) {

                var offset = offsets[ o ];
                var index = offset.index;

                for ( var i = offset.start, l = offset.start + offset.count; i < l; i += 3 ) {

                  renderList.pushTriangle( indices[ i ] + index, indices[ i + 1 ] + index, indices[ i + 2 ] + index );

                }

              }

            } else {

              for ( var i = 0, l = indices.length; i < l; i += 3 ) {

                renderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

              }

            }

          } else {

            for ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {

              renderList.pushTriangle( i, i + 1, i + 2 );

            }

          }

        } else if ( geometry instanceof THREE.Geometry ) {

          vertices = geometry.vertices;
          faces = geometry.faces;
          faceVertexUvs = geometry.faceVertexUvs[ 0 ];

          _normalMatrix.getNormalMatrix( _modelMatrix );

          isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
          objectMaterials = isFaceMaterial === true ? object.material : null;

          for ( var v = 0, vl = vertices.length; v < vl; v ++ ) {

            var vertex = vertices[ v ];
            renderList.pushVertex( vertex.x, vertex.y, vertex.z );

          }

          for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

            face = faces[ f ];

            var material = isFaceMaterial === true
              ? objectMaterials.materials[ face.materialIndex ]
              : object.material;

            if ( material === undefined ) continue;

            var side = material.side;

            var v1 = _vertexPool[ face.a ];
            var v2 = _vertexPool[ face.b ];
            var v3 = _vertexPool[ face.c ];

            if ( material.morphTargets === true ) {

              var morphTargets = geometry.morphTargets;
              var morphInfluences = object.morphTargetInfluences;

              var v1p = v1.position;
              var v2p = v2.position;
              var v3p = v3.position;

              _vA.set( 0, 0, 0 );
              _vB.set( 0, 0, 0 );
              _vC.set( 0, 0, 0 );

              for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

                var influence = morphInfluences[ t ];

                if ( influence === 0 ) continue;

                var targets = morphTargets[ t ].vertices;

                _vA.x += ( targets[ face.a ].x - v1p.x ) * influence;
                _vA.y += ( targets[ face.a ].y - v1p.y ) * influence;
                _vA.z += ( targets[ face.a ].z - v1p.z ) * influence;

                _vB.x += ( targets[ face.b ].x - v2p.x ) * influence;
                _vB.y += ( targets[ face.b ].y - v2p.y ) * influence;
                _vB.z += ( targets[ face.b ].z - v2p.z ) * influence;

                _vC.x += ( targets[ face.c ].x - v3p.x ) * influence;
                _vC.y += ( targets[ face.c ].y - v3p.y ) * influence;
                _vC.z += ( targets[ face.c ].z - v3p.z ) * influence;

              }

              v1.position.add( _vA );
              v2.position.add( _vB );
              v3.position.add( _vC );

              renderList.projectVertex( v1 );
              renderList.projectVertex( v2 );
              renderList.projectVertex( v3 );

            }

            if ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;

            var visible = renderList.checkBackfaceCulling( v1, v2, v3 );

            if ( side !== THREE.DoubleSide ) {
              if ( side === THREE.FrontSide && visible === false ) continue;
              if ( side === THREE.BackSide && visible === true ) continue;
            }

            _face = getNextFaceInPool();

            _face.id = object.id;
            _face.v1.copy( v1 );
            _face.v2.copy( v2 );
            _face.v3.copy( v3 );

            _face.normalModel.copy( face.normal );

            if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

              _face.normalModel.negate();

            }

            _face.normalModel.applyMatrix3( _normalMatrix ).normalize();

            faceVertexNormals = face.vertexNormals;

            for ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {

              var normalModel = _face.vertexNormalsModel[ n ];
              normalModel.copy( faceVertexNormals[ n ] );

              if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

                normalModel.negate();

              }

              normalModel.applyMatrix3( _normalMatrix ).normalize();

            }

            _face.vertexNormalsLength = faceVertexNormals.length;

            var vertexUvs = faceVertexUvs[ f ];

            if ( vertexUvs !== undefined ) {

              for ( var u = 0; u < 3; u ++ ) {

                _face.uvs[ u ].copy( vertexUvs[ u ] );

              }

            }

            _face.color = face.color;
            _face.material = material;

            _face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;

            _renderData.elements.push( _face );

          }

        }

      } else if ( object instanceof THREE.Line ) {

        if ( geometry instanceof THREE.BufferGeometry ) {

          var attributes = geometry.attributes;

          if ( attributes.position !== undefined ) {

            var positions = attributes.position.array;

            for ( var i = 0, l = positions.length; i < l; i += 3 ) {

              renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );

            }

            if ( attributes.index !== undefined ) {

              var indices = attributes.index.array;

              for ( var i = 0, l = indices.length; i < l; i += 2 ) {

                renderList.pushLine( indices[ i ], indices[ i + 1 ] );

              }

            } else {

              for ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i ++ ) {

                renderList.pushLine( i, i + 1 );

              }

            }

          }

        } else if ( geometry instanceof THREE.Geometry ) {

          _modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );

          vertices = object.geometry.vertices;

          if ( vertices.length === 0 ) continue;

          v1 = getNextVertexInPool();
          v1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );

          // Handle LineStrip and LinePieces
          var step = object.type === THREE.LinePieces ? 2 : 1;

          for ( var v = 1, vl = vertices.length; v < vl; v ++ ) {

            v1 = getNextVertexInPool();
            v1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );

            if ( ( v + 1 ) % step > 0 ) continue;

            v2 = _vertexPool[ _vertexCount - 2 ];

            _clippedVertex1PositionScreen.copy( v1.positionScreen );
            _clippedVertex2PositionScreen.copy( v2.positionScreen );

            if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {

              // Perform the perspective divide
              _clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );
              _clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );

              _line = getNextLineInPool();

              _line.id = object.id;
              _line.v1.positionScreen.copy( _clippedVertex1PositionScreen );
              _line.v2.positionScreen.copy( _clippedVertex2PositionScreen );

              _line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );

              _line.material = object.material;

              if ( object.material.vertexColors === THREE.VertexColors ) {

                _line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );
                _line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );

              }

              _renderData.elements.push( _line );

            }

          }

        }

      } else if ( object instanceof THREE.Sprite ) {

        _vector4.set( _modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1 );
        _vector4.applyMatrix4( _viewProjectionMatrix );

        var invW = 1 / _vector4.w;

        _vector4.z *= invW;

        if ( _vector4.z >= -1 && _vector4.z <= 1 ) {

          _sprite = getNextSpriteInPool();
          _sprite.id = object.id;
          _sprite.x = _vector4.x * invW;
          _sprite.y = _vector4.y * invW;
          _sprite.z = _vector4.z;
          _sprite.object = object;

          _sprite.rotation = object.rotation;

          _sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );
          _sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );

          _sprite.material = object.material;

          _renderData.elements.push( _sprite );

        }

      }

    }

    if ( sortElements === true ) _renderData.elements.sort( painterSort );

    return _renderData;

  };

  // Pools

  function getNextObjectInPool() {

    if ( _objectCount === _objectPoolLength ) {

      var object = new THREE.RenderableObject();
      _objectPool.push( object );
      _objectPoolLength ++;
      _objectCount ++;
      return object;

    }

    return _objectPool[ _objectCount ++ ];

  }

  function getNextVertexInPool() {

    if ( _vertexCount === _vertexPoolLength ) {

      var vertex = new THREE.RenderableVertex();
      _vertexPool.push( vertex );
      _vertexPoolLength ++;
      _vertexCount ++;
      return vertex;

    }

    return _vertexPool[ _vertexCount ++ ];

  }

  function getNextFaceInPool() {

    if ( _faceCount === _facePoolLength ) {

      var face = new THREE.RenderableFace();
      _facePool.push( face );
      _facePoolLength ++;
      _faceCount ++;
      return face;

    }

    return _facePool[ _faceCount ++ ];


  }

  function getNextLineInPool() {

    if ( _lineCount === _linePoolLength ) {

      var line = new THREE.RenderableLine();
      _linePool.push( line );
      _linePoolLength ++;
      _lineCount ++
      return line;

    }

    return _linePool[ _lineCount ++ ];

  }

  function getNextSpriteInPool() {

    if ( _spriteCount === _spritePoolLength ) {

      var sprite = new THREE.RenderableSprite();
      _spritePool.push( sprite );
      _spritePoolLength ++;
      _spriteCount ++
      return sprite;

    }

    return _spritePool[ _spriteCount ++ ];

  }

  //

  function painterSort( a, b ) {

    if ( a.z !== b.z ) {

      return b.z - a.z;

    } else if ( a.id !== b.id ) {

      return a.id - b.id;

    } else {

      return 0;

    }

  }

  function clipLine( s1, s2 ) {

    var alpha1 = 0, alpha2 = 1,

    // Calculate the boundary coordinate of each vertex for the near and far clip planes,
    // Z = -1 and Z = +1, respectively.
    bc1near =  s1.z + s1.w,
    bc2near =  s2.z + s2.w,
    bc1far =  - s1.z + s1.w,
    bc2far =  - s2.z + s2.w;

    if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {

      // Both vertices lie entirely within all clip planes.
      return true;

    } else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {

      // Both vertices lie entirely outside one of the clip planes.
      return false;

    } else {

      // The line segment spans at least one clip plane.

      if ( bc1near < 0 ) {

        // v1 lies outside the near plane, v2 inside
        alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );

      } else if ( bc2near < 0 ) {

        // v2 lies outside the near plane, v1 inside
        alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );

      }

      if ( bc1far < 0 ) {

        // v1 lies outside the far plane, v2 inside
        alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );

      } else if ( bc2far < 0 ) {

        // v2 lies outside the far plane, v2 inside
        alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );

      }

      if ( alpha2 < alpha1 ) {

        // The line segment spans two boundaries, but is outside both of them.
        // (This can't happen when we're only clipping against just near/far but good
        //  to leave the check here for future usage if other clip planes are added.)
        return false;

      } else {

        // Update the s1 and s2 vertices to match the clipped line segment.
        s1.lerp( s2, alpha1 );
        s2.lerp( s1, 1 - alpha2 );

        return true;

      }

    }

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

  this.a = a;
  this.b = b;
  this.c = c;

  this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
  this.vertexNormals = normal instanceof Array ? normal : [ ];

  this.color = color instanceof THREE.Color ? color : new THREE.Color();
  this.vertexColors = color instanceof Array ? color : [];

  this.vertexTangents = [];

  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

};

THREE.Face3.prototype = {

  constructor: THREE.Face3,

  clone: function () {

    var face = new THREE.Face3( this.a, this.b, this.c );

    face.normal.copy( this.normal );
    face.color.copy( this.color );

    face.materialIndex = this.materialIndex;

    var i, il;
    for ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();
    for ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();
    for ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();

    return face;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

  console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.')

  return new THREE.Face3( a, b, c, normal, color, materialIndex );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferAttribute = function () {};

THREE.BufferAttribute.prototype = {

  constructor: THREE.BufferAttribute,

  get length () {

    return this.array.length;

  },

  set: function ( value ) {

    this.array.set( value );

  },

  setX: function ( index, x ) {

    this.array[ index * this.itemSize ] = x;

  },

  setY: function ( index, y ) {

    this.array[ index * this.itemSize + 1 ] = y;

  },

  setZ: function ( index, z ) {

    this.array[ index * this.itemSize + 2 ] = z;

  },

  setXY: function ( index, x, y ) {

    index *= this.itemSize;

    this.array[ index     ] = x;
    this.array[ index + 1 ] = y;

  },

  setXYZ: function ( index, x, y, z ) {

    index *= this.itemSize;

    this.array[ index     ] = x;
    this.array[ index + 1 ] = y;
    this.array[ index + 2 ] = z;

  },

  setXYZW: function ( index, x, y, z, w ) {

    index *= this.itemSize;

    this.array[ index     ] = x;
    this.array[ index + 1 ] = y;
    this.array[ index + 2 ] = z;
    this.array[ index + 3 ] = w;

  }

};

//

THREE.Int8Attribute = function ( size, itemSize ) {

  this.array = new Int8Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Int8Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Uint8Attribute = function ( size, itemSize ) {

  this.array = new Uint8Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Uint8Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Uint8ClampedAttribute = function ( size, itemSize ) {

  this.array = new Uint8ClampedArray( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Uint8ClampedAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Int16Attribute = function ( size, itemSize ) {

  this.array = new Int16Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Int16Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Uint16Attribute = function ( size, itemSize ) {

  this.array = new Uint16Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Uint16Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Int32Attribute = function ( size, itemSize ) {

  this.array = new Int32Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Int32Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Uint32Attribute = function ( size, itemSize ) {

  this.array = new Uint32Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Uint32Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Float32Attribute = function ( size, itemSize ) {

  this.array = new Float32Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Float32Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );

THREE.Float64Attribute = function ( size, itemSize ) {

  this.array = new Float64Array( size * itemSize );
  this.itemSize = itemSize;

};

THREE.Float64Attribute.prototype = Object.create( THREE.BufferAttribute.prototype );
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BufferGeometry = function () {

  this.id = THREE.GeometryIdCount ++;
  this.uuid = THREE.Math.generateUUID();

  this.name = '';

  this.attributes = {};
  this.drawcalls = [];
  this.offsets = this.drawcalls; // backwards compatibility

  this.boundingBox = null;
  this.boundingSphere = null;

};

THREE.BufferGeometry.prototype = {

  constructor: THREE.BufferGeometry,

  addAttribute: function ( name, attribute ) {

    if ( attribute instanceof THREE.BufferAttribute === false ) {

      console.warn( 'DEPRECATED: BufferGeometry\'s addAttribute() now expects ( name, attribute ).' );

      this.attributes[ name ] = { array: arguments[ 1 ], itemSize: arguments[ 2 ] };

      return;

    }

    this.attributes[ name ] = attribute;

  },

  getAttribute: function ( name ) {

    return this.attributes[ name ];

  },

  addDrawCall: function ( start, count, indexOffset ) {

    this.drawcalls.push( {

      start: start,
      count: count,
      index: indexOffset !== undefined ? indexOffset : 0

    } );

  },

  applyMatrix: function ( matrix ) {

    var position = this.attributes.position;

    if ( position !== undefined ) {

      matrix.applyToVector3Array( position.array );
      position.needsUpdate = true;

    }

    var normal = this.attributes.normal;

    if ( normal !== undefined ) {

      var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

      normalMatrix.applyToVector3Array( normal.array );
      normal.needsUpdate = true;

    }

  },

  computeBoundingBox: function () {

    if ( this.boundingBox === null ) {

      this.boundingBox = new THREE.Box3();

    }

    var positions = this.attributes[ "position" ].array;

    if ( positions ) {

      var bb = this.boundingBox;

      if( positions.length >= 3 ) {
        bb.min.x = bb.max.x = positions[ 0 ];
        bb.min.y = bb.max.y = positions[ 1 ];
        bb.min.z = bb.max.z = positions[ 2 ];
      }

      for ( var i = 3, il = positions.length; i < il; i += 3 ) {

        var x = positions[ i ];
        var y = positions[ i + 1 ];
        var z = positions[ i + 2 ];

        // bounding box

        if ( x < bb.min.x ) {

          bb.min.x = x;

        } else if ( x > bb.max.x ) {

          bb.max.x = x;

        }

        if ( y < bb.min.y ) {

          bb.min.y = y;

        } else if ( y > bb.max.y ) {

          bb.max.y = y;

        }

        if ( z < bb.min.z ) {

          bb.min.z = z;

        } else if ( z > bb.max.z ) {

          bb.max.z = z;

        }

      }

    }

    if ( positions === undefined || positions.length === 0 ) {

      this.boundingBox.min.set( 0, 0, 0 );
      this.boundingBox.max.set( 0, 0, 0 );

    }

  },

  computeBoundingSphere: function () {

    var box = new THREE.Box3();
    var vector = new THREE.Vector3();

    return function () {

      if ( this.boundingSphere === null ) {

        this.boundingSphere = new THREE.Sphere();

      }

      var positions = this.attributes[ "position" ].array;

      if ( positions ) {

        box.makeEmpty();

        var center = this.boundingSphere.center;

        for ( var i = 0, il = positions.length; i < il; i += 3 ) {

          vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
          box.addPoint( vector );

        }

        box.center( center );

        // hoping to find a boundingSphere with a radius smaller than the
        // boundingSphere of the boundingBox:  sqrt(3) smaller in the best case

        var maxRadiusSq = 0;

        for ( var i = 0, il = positions.length; i < il; i += 3 ) {

          vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
          maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

        }

        this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

      }

    }

  }(),

  computeFaceNormals: function () {

    // backwards compatibility

  },

  computeVertexNormals: function () {

    if ( this.attributes[ "position" ] ) {

      var i, il;
      var j, jl;

      var nVertexElements = this.attributes[ "position" ].array.length;

      if ( this.attributes[ "normal" ] === undefined ) {

        this.attributes[ "normal" ] = {

          itemSize: 3,
          array: new Float32Array( nVertexElements )

        };

      } else {

        // reset existing normals to zero

        for ( i = 0, il = this.attributes[ "normal" ].array.length; i < il; i ++ ) {

          this.attributes[ "normal" ].array[ i ] = 0;

        }

      }

      var positions = this.attributes[ "position" ].array;
      var normals = this.attributes[ "normal" ].array;

      var vA, vB, vC, x, y, z,

      pA = new THREE.Vector3(),
      pB = new THREE.Vector3(),
      pC = new THREE.Vector3(),

      cb = new THREE.Vector3(),
      ab = new THREE.Vector3();

      // indexed elements

      if ( this.attributes[ "index" ] ) {

        var indices = this.attributes[ "index" ].array;

        var offsets = (this.offsets.length > 0 ? this.offsets : [ { start: 0, count: indices.length, index: 0 } ]);

        for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

          var start = offsets[ j ].start;
          var count = offsets[ j ].count;
          var index = offsets[ j ].index;

          for ( i = start, il = start + count; i < il; i += 3 ) {

            vA = index + indices[ i ];
            vB = index + indices[ i + 1 ];
            vC = index + indices[ i + 2 ];

            x = positions[ vA * 3 ];
            y = positions[ vA * 3 + 1 ];
            z = positions[ vA * 3 + 2 ];
            pA.set( x, y, z );

            x = positions[ vB * 3 ];
            y = positions[ vB * 3 + 1 ];
            z = positions[ vB * 3 + 2 ];
            pB.set( x, y, z );

            x = positions[ vC * 3 ];
            y = positions[ vC * 3 + 1 ];
            z = positions[ vC * 3 + 2 ];
            pC.set( x, y, z );

            cb.subVectors( pC, pB );
            ab.subVectors( pA, pB );
            cb.cross( ab );

            normals[ vA * 3     ] += cb.x;
            normals[ vA * 3 + 1 ] += cb.y;
            normals[ vA * 3 + 2 ] += cb.z;

            normals[ vB * 3     ] += cb.x;
            normals[ vB * 3 + 1 ] += cb.y;
            normals[ vB * 3 + 2 ] += cb.z;

            normals[ vC * 3     ] += cb.x;
            normals[ vC * 3 + 1 ] += cb.y;
            normals[ vC * 3 + 2 ] += cb.z;

          }

        }

      // non-indexed elements (unconnected triangle soup)

      } else {

        for ( i = 0, il = positions.length; i < il; i += 9 ) {

          x = positions[ i ];
          y = positions[ i + 1 ];
          z = positions[ i + 2 ];
          pA.set( x, y, z );

          x = positions[ i + 3 ];
          y = positions[ i + 4 ];
          z = positions[ i + 5 ];
          pB.set( x, y, z );

          x = positions[ i + 6 ];
          y = positions[ i + 7 ];
          z = positions[ i + 8 ];
          pC.set( x, y, z );

          cb.subVectors( pC, pB );
          ab.subVectors( pA, pB );
          cb.cross( ab );

          normals[ i     ] = cb.x;
          normals[ i + 1 ] = cb.y;
          normals[ i + 2 ] = cb.z;

          normals[ i + 3 ] = cb.x;
          normals[ i + 4 ] = cb.y;
          normals[ i + 5 ] = cb.z;

          normals[ i + 6 ] = cb.x;
          normals[ i + 7 ] = cb.y;
          normals[ i + 8 ] = cb.z;

        }

      }

      this.normalizeNormals();

      this.normalsNeedUpdate = true;

    }

  },

  computeTangents: function () {

    // based on http://www.terathon.com/code/tangent.html
    // (per vertex tangents)

    if ( this.attributes[ "index" ] === undefined ||
       this.attributes[ "position" ] === undefined ||
       this.attributes[ "normal" ] === undefined ||
       this.attributes[ "uv" ] === undefined ) {

      console.warn( "Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()" );
      return;

    }

    var indices = this.attributes[ "index" ].array;
    var positions = this.attributes[ "position" ].array;
    var normals = this.attributes[ "normal" ].array;
    var uvs = this.attributes[ "uv" ].array;

    var nVertices = positions.length / 3;

    if ( this.attributes[ "tangent" ] === undefined ) {

      var nTangentElements = 4 * nVertices;

      this.attributes[ "tangent" ] = {

        itemSize: 4,
        array: new Float32Array( nTangentElements )

      };

    }

    var tangents = this.attributes[ "tangent" ].array;

    var tan1 = [], tan2 = [];

    for ( var k = 0; k < nVertices; k ++ ) {

      tan1[ k ] = new THREE.Vector3();
      tan2[ k ] = new THREE.Vector3();

    }

    var xA, yA, zA,
      xB, yB, zB,
      xC, yC, zC,

      uA, vA,
      uB, vB,
      uC, vC,

      x1, x2, y1, y2, z1, z2,
      s1, s2, t1, t2, r;

    var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();

    function handleTriangle( a, b, c ) {

      xA = positions[ a * 3 ];
      yA = positions[ a * 3 + 1 ];
      zA = positions[ a * 3 + 2 ];

      xB = positions[ b * 3 ];
      yB = positions[ b * 3 + 1 ];
      zB = positions[ b * 3 + 2 ];

      xC = positions[ c * 3 ];
      yC = positions[ c * 3 + 1 ];
      zC = positions[ c * 3 + 2 ];

      uA = uvs[ a * 2 ];
      vA = uvs[ a * 2 + 1 ];

      uB = uvs[ b * 2 ];
      vB = uvs[ b * 2 + 1 ];

      uC = uvs[ c * 2 ];
      vC = uvs[ c * 2 + 1 ];

      x1 = xB - xA;
      x2 = xC - xA;

      y1 = yB - yA;
      y2 = yC - yA;

      z1 = zB - zA;
      z2 = zC - zA;

      s1 = uB - uA;
      s2 = uC - uA;

      t1 = vB - vA;
      t2 = vC - vA;

      r = 1.0 / ( s1 * t2 - s2 * t1 );

      sdir.set(
        ( t2 * x1 - t1 * x2 ) * r,
        ( t2 * y1 - t1 * y2 ) * r,
        ( t2 * z1 - t1 * z2 ) * r
      );

      tdir.set(
        ( s1 * x2 - s2 * x1 ) * r,
        ( s1 * y2 - s2 * y1 ) * r,
        ( s1 * z2 - s2 * z1 ) * r
      );

      tan1[ a ].add( sdir );
      tan1[ b ].add( sdir );
      tan1[ c ].add( sdir );

      tan2[ a ].add( tdir );
      tan2[ b ].add( tdir );
      tan2[ c ].add( tdir );

    }

    var i, il;
    var j, jl;
    var iA, iB, iC;

    var offsets = this.offsets;

    for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

      var start = offsets[ j ].start;
      var count = offsets[ j ].count;
      var index = offsets[ j ].index;

      for ( i = start, il = start + count; i < il; i += 3 ) {

        iA = index + indices[ i ];
        iB = index + indices[ i + 1 ];
        iC = index + indices[ i + 2 ];

        handleTriangle( iA, iB, iC );

      }

    }

    var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();
    var n = new THREE.Vector3(), n2 = new THREE.Vector3();
    var w, t, test;

    function handleVertex( v ) {

      n.x = normals[ v * 3 ];
      n.y = normals[ v * 3 + 1 ];
      n.z = normals[ v * 3 + 2 ];

      n2.copy( n );

      t = tan1[ v ];

      // Gram-Schmidt orthogonalize

      tmp.copy( t );
      tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

      // Calculate handedness

      tmp2.crossVectors( n2, t );
      test = tmp2.dot( tan2[ v ] );
      w = ( test < 0.0 ) ? -1.0 : 1.0;

      tangents[ v * 4     ] = tmp.x;
      tangents[ v * 4 + 1 ] = tmp.y;
      tangents[ v * 4 + 2 ] = tmp.z;
      tangents[ v * 4 + 3 ] = w;

    }

    for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

      var start = offsets[ j ].start;
      var count = offsets[ j ].count;
      var index = offsets[ j ].index;

      for ( i = start, il = start + count; i < il; i += 3 ) {

        iA = index + indices[ i ];
        iB = index + indices[ i + 1 ];
        iC = index + indices[ i + 2 ];

        handleVertex( iA );
        handleVertex( iB );
        handleVertex( iC );

      }

    }

  },

  /*
    computeOffsets
    Compute the draw offset for large models by chunking the index buffer into chunks of 65k addressable vertices.
    This method will effectively rewrite the index buffer and remap all attributes to match the new indices.
    WARNING: This method will also expand the vertex count to prevent sprawled triangles across draw offsets.
    indexBufferSize - Defaults to 65535, but allows for larger or smaller chunks.
  */
  computeOffsets: function(indexBufferSize) {

    var size = indexBufferSize;
    if(indexBufferSize === undefined)
      size = 65535; //WebGL limits type of index buffer values to 16-bit.

    var s = Date.now();

    var indices = this.attributes['index'].array;
    var vertices = this.attributes['position'].array;

    var verticesCount = (vertices.length/3);
    var facesCount = (indices.length/3);

    /*
    console.log("Computing buffers in offsets of "+size+" -> indices:"+indices.length+" vertices:"+vertices.length);
    console.log("Faces to process: "+(indices.length/3));
    console.log("Reordering "+verticesCount+" vertices.");
    */

    var sortedIndices = new Uint16Array( indices.length ); //16-bit buffers
    var indexPtr = 0;
    var vertexPtr = 0;

    var offsets = [ { start:0, count:0, index:0 } ];
    var offset = offsets[0];

    var duplicatedVertices = 0;
    var newVerticeMaps = 0;
    var faceVertices = new Int32Array(6);
    var vertexMap = new Int32Array( vertices.length );
    var revVertexMap = new Int32Array( vertices.length );
    for(var j = 0; j < vertices.length; j++) { vertexMap[j] = -1; revVertexMap[j] = -1; }

    /*
      Traverse every face and reorder vertices in the proper offsets of 65k.
      We can have more than 65k entries in the index buffer per offset, but only reference 65k values.
    */
    for(var findex = 0; findex < facesCount; findex++) {
      newVerticeMaps = 0;

      for(var vo = 0; vo < 3; vo++) {
        var vid = indices[ findex*3 + vo ];
        if(vertexMap[vid] == -1) {
          //Unmapped vertice
          faceVertices[vo*2] = vid;
          faceVertices[vo*2+1] = -1;
          newVerticeMaps++;
        } else if(vertexMap[vid] < offset.index) {
          //Reused vertices from previous block (duplicate)
          faceVertices[vo*2] = vid;
          faceVertices[vo*2+1] = -1;
          duplicatedVertices++;
        } else {
          //Reused vertice in the current block
          faceVertices[vo*2] = vid;
          faceVertices[vo*2+1] = vertexMap[vid];
        }
      }

      var faceMax = vertexPtr + newVerticeMaps;
      if(faceMax > (offset.index + size)) {
        var new_offset = { start:indexPtr, count:0, index:vertexPtr };
        offsets.push(new_offset);
        offset = new_offset;

        //Re-evaluate reused vertices in light of new offset.
        for(var v = 0; v < 6; v+=2) {
          var new_vid = faceVertices[v+1];
          if(new_vid > -1 && new_vid < offset.index)
            faceVertices[v+1] = -1;
        }
      }

      //Reindex the face.
      for(var v = 0; v < 6; v+=2) {
        var vid = faceVertices[v];
        var new_vid = faceVertices[v+1];

        if(new_vid === -1)
          new_vid = vertexPtr++;

        vertexMap[vid] = new_vid;
        revVertexMap[new_vid] = vid;
        sortedIndices[indexPtr++] = new_vid - offset.index; //XXX overflows at 16bit
        offset.count++;
      }
    }

    /* Move all attribute values to map to the new computed indices , also expand the vertice stack to match our new vertexPtr. */
    this.reorderBuffers(sortedIndices, revVertexMap, vertexPtr);
    this.offsets = offsets;

    /*
    var orderTime = Date.now();
    console.log("Reorder time: "+(orderTime-s)+"ms");
    console.log("Duplicated "+duplicatedVertices+" vertices.");
    console.log("Compute Buffers time: "+(Date.now()-s)+"ms");
    console.log("Draw offsets: "+offsets.length);
    */

    return offsets;
  },

  merge: function () {

    console.log( 'BufferGeometry.merge(): TODO' );

  },

  normalizeNormals: function () {

    var normals = this.attributes[ "normal" ].array;

    var x, y, z, n;

    for ( var i = 0, il = normals.length; i < il; i += 3 ) {

      x = normals[ i ];
      y = normals[ i + 1 ];
      z = normals[ i + 2 ];

      n = 1.0 / Math.sqrt( x * x + y * y + z * z );

      normals[ i     ] *= n;
      normals[ i + 1 ] *= n;
      normals[ i + 2 ] *= n;

    }

  },

  /*
    reoderBuffers:
    Reorder attributes based on a new indexBuffer and indexMap.
    indexBuffer - Uint16Array of the new ordered indices.
    indexMap - Int32Array where the position is the new vertex ID and the value the old vertex ID for each vertex.
    vertexCount - Amount of total vertices considered in this reordering (in case you want to grow the vertice stack).
  */
  reorderBuffers: function(indexBuffer, indexMap, vertexCount) {

    /* Create a copy of all attributes for reordering. */
    var sortedAttributes = {};
    var types = [ Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
    for( var attr in this.attributes ) {
      if(attr == 'index')
        continue;
      var sourceArray = this.attributes[attr].array;
      for ( var i = 0, il = types.length; i < il; i++ ) {
        var type = types[i];
        if (sourceArray instanceof type) {
          sortedAttributes[attr] = new type( this.attributes[attr].itemSize * vertexCount );
          break;
        }
      }
    }

    /* Move attribute positions based on the new index map */
    for(var new_vid = 0; new_vid < vertexCount; new_vid++) {
      var vid = indexMap[new_vid];
      for ( var attr in this.attributes ) {
        if(attr == 'index')
          continue;
        var attrArray = this.attributes[attr].array;
        var attrSize = this.attributes[attr].itemSize;
        var sortedAttr = sortedAttributes[attr];
        for(var k = 0; k < attrSize; k++)
          sortedAttr[ new_vid * attrSize + k ] = attrArray[ vid * attrSize + k ];
      }
    }

    /* Carry the new sorted buffers locally */
    this.attributes['index'].array = indexBuffer;
    for ( var attr in this.attributes ) {
      if(attr == 'index')
        continue;
      this.attributes[attr].array = sortedAttributes[attr];
      this.attributes[attr].numItems = this.attributes[attr].itemSize * vertexCount;
    }
  },

  clone: function () {

    var geometry = new THREE.BufferGeometry();

    var types = [ Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];

    for ( var attr in this.attributes ) {

      var sourceAttr = this.attributes[ attr ];
      var sourceArray = sourceAttr.array;

      var attribute = {

        itemSize: sourceAttr.itemSize,
        array: null

      };

      for ( var i = 0, il = types.length; i < il; i ++ ) {

        var type = types[ i ];

        if ( sourceArray instanceof type ) {

          attribute.array = new type( sourceArray );
          break;

        }

      }

      geometry.attributes[ attr ] = attribute;

    }

    for ( var i = 0, il = this.offsets.length; i < il; i ++ ) {

      var offset = this.offsets[ i ];

      geometry.offsets.push( {

        start: offset.start,
        index: offset.index,
        count: offset.count

      } );

    }

    return geometry;

  },

  dispose: function () {

    this.dispatchEvent( { type: 'dispose' } );

  }

};

THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://exocortex.com
 */

THREE.Geometry = function () {

  this.id = THREE.GeometryIdCount ++;
  this.uuid = THREE.Math.generateUUID();

  this.name = '';

  this.vertices = [];
  this.colors = [];  // one-to-one vertex colors, used in ParticleSystem and Line

  this.faces = [];

  this.faceVertexUvs = [[]];

  this.morphTargets = [];
  this.morphColors = [];
  this.morphNormals = [];

  this.skinWeights = [];
  this.skinIndices = [];

  this.lineDistances = [];

  this.boundingBox = null;
  this.boundingSphere = null;

  this.hasTangents = false;

  this.dynamic = true; // the intermediate typed arrays will be deleted when set to false

  // update flags

  this.verticesNeedUpdate = false;
  this.elementsNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.tangentsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.lineDistancesNeedUpdate = false;

  this.buffersNeedUpdate = false;

};

THREE.Geometry.prototype = {

  constructor: THREE.Geometry,

  applyMatrix: function ( matrix ) {

    var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

    for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

      var vertex = this.vertices[ i ];
      vertex.applyMatrix4( matrix );

    }

    for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

      var face = this.faces[ i ];
      face.normal.applyMatrix3( normalMatrix ).normalize();

      for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

        face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

      }

    }

    if ( this.boundingBox instanceof THREE.Box3 ) {

      this.computeBoundingBox();

    }

    if ( this.boundingSphere instanceof THREE.Sphere ) {

      this.computeBoundingSphere();

    }

  },

  computeFaceNormals: function () {

    var cb = new THREE.Vector3(), ab = new THREE.Vector3();

    for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

      var face = this.faces[ f ];

      var vA = this.vertices[ face.a ];
      var vB = this.vertices[ face.b ];
      var vC = this.vertices[ face.c ];

      cb.subVectors( vC, vB );
      ab.subVectors( vA, vB );
      cb.cross( ab );

      cb.normalize();

      face.normal.copy( cb );

    }

  },

  computeVertexNormals: function ( areaWeighted ) {

    var v, vl, f, fl, face, vertices;

    vertices = new Array( this.vertices.length );

    for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

      vertices[ v ] = new THREE.Vector3();

    }

    if ( areaWeighted ) {

      // vertex normals weighted by triangle areas
      // http://www.iquilezles.org/www/articles/normals/normals.htm

      var vA, vB, vC, vD;
      var cb = new THREE.Vector3(), ab = new THREE.Vector3(),
        db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();

      for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

        face = this.faces[ f ];

        vA = this.vertices[ face.a ];
        vB = this.vertices[ face.b ];
        vC = this.vertices[ face.c ];

        cb.subVectors( vC, vB );
        ab.subVectors( vA, vB );
        cb.cross( ab );

        vertices[ face.a ].add( cb );
        vertices[ face.b ].add( cb );
        vertices[ face.c ].add( cb );

      }

    } else {

      for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

        face = this.faces[ f ];

        vertices[ face.a ].add( face.normal );
        vertices[ face.b ].add( face.normal );
        vertices[ face.c ].add( face.normal );

      }

    }

    for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

      vertices[ v ].normalize();

    }

    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

      face = this.faces[ f ];

      face.vertexNormals[ 0 ] = vertices[ face.a ].clone();
      face.vertexNormals[ 1 ] = vertices[ face.b ].clone();
      face.vertexNormals[ 2 ] = vertices[ face.c ].clone();

    }

  },

  computeMorphNormals: function () {

    var i, il, f, fl, face;

    // save original normals
    // - create temp variables on first access
    //   otherwise just copy (for faster repeated calls)

    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

      face = this.faces[ f ];

      if ( ! face.__originalFaceNormal ) {

        face.__originalFaceNormal = face.normal.clone();

      } else {

        face.__originalFaceNormal.copy( face.normal );

      }

      if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

      for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

        if ( ! face.__originalVertexNormals[ i ] ) {

          face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

        } else {

          face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

        }

      }

    }

    // use temp geometry to compute face and vertex normals for each morph

    var tmpGeo = new THREE.Geometry();
    tmpGeo.faces = this.faces;

    for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

      // create on first access

      if ( ! this.morphNormals[ i ] ) {

        this.morphNormals[ i ] = {};
        this.morphNormals[ i ].faceNormals = [];
        this.morphNormals[ i ].vertexNormals = [];

        var dstNormalsFace = this.morphNormals[ i ].faceNormals;
        var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

        var faceNormal, vertexNormals;

        for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

          faceNormal = new THREE.Vector3();
          vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

          dstNormalsFace.push( faceNormal );
          dstNormalsVertex.push( vertexNormals );

        }

      }

      var morphNormals = this.morphNormals[ i ];

      // set vertices to morph target

      tmpGeo.vertices = this.morphTargets[ i ].vertices;

      // compute morph normals

      tmpGeo.computeFaceNormals();
      tmpGeo.computeVertexNormals();

      // store morph normals

      var faceNormal, vertexNormals;

      for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

        face = this.faces[ f ];

        faceNormal = morphNormals.faceNormals[ f ];
        vertexNormals = morphNormals.vertexNormals[ f ];

        faceNormal.copy( face.normal );

        vertexNormals.a.copy( face.vertexNormals[ 0 ] );
        vertexNormals.b.copy( face.vertexNormals[ 1 ] );
        vertexNormals.c.copy( face.vertexNormals[ 2 ] );

      }

    }

    // restore original normals

    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

      face = this.faces[ f ];

      face.normal = face.__originalFaceNormal;
      face.vertexNormals = face.__originalVertexNormals;

    }

  },

  computeTangents: function () {

    // based on http://www.terathon.com/code/tangent.html
    // tangents go to vertices

    var f, fl, v, vl, i, il, vertexIndex,
      face, uv, vA, vB, vC, uvA, uvB, uvC,
      x1, x2, y1, y2, z1, z2,
      s1, s2, t1, t2, r, t, test,
      tan1 = [], tan2 = [],
      sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),
      tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),
      n = new THREE.Vector3(), w;

    for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

      tan1[ v ] = new THREE.Vector3();
      tan2[ v ] = new THREE.Vector3();

    }

    function handleTriangle( context, a, b, c, ua, ub, uc ) {

      vA = context.vertices[ a ];
      vB = context.vertices[ b ];
      vC = context.vertices[ c ];

      uvA = uv[ ua ];
      uvB = uv[ ub ];
      uvC = uv[ uc ];

      x1 = vB.x - vA.x;
      x2 = vC.x - vA.x;
      y1 = vB.y - vA.y;
      y2 = vC.y - vA.y;
      z1 = vB.z - vA.z;
      z2 = vC.z - vA.z;

      s1 = uvB.x - uvA.x;
      s2 = uvC.x - uvA.x;
      t1 = uvB.y - uvA.y;
      t2 = uvC.y - uvA.y;

      r = 1.0 / ( s1 * t2 - s2 * t1 );
      sdir.set( ( t2 * x1 - t1 * x2 ) * r,
            ( t2 * y1 - t1 * y2 ) * r,
            ( t2 * z1 - t1 * z2 ) * r );
      tdir.set( ( s1 * x2 - s2 * x1 ) * r,
            ( s1 * y2 - s2 * y1 ) * r,
            ( s1 * z2 - s2 * z1 ) * r );

      tan1[ a ].add( sdir );
      tan1[ b ].add( sdir );
      tan1[ c ].add( sdir );

      tan2[ a ].add( tdir );
      tan2[ b ].add( tdir );
      tan2[ c ].add( tdir );

    }

    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

      face = this.faces[ f ];
      uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents

      handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );

    }

    var faceIndex = [ 'a', 'b', 'c', 'd' ];

    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

      face = this.faces[ f ];

      for ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i++ ) {

        n.copy( face.vertexNormals[ i ] );

        vertexIndex = face[ faceIndex[ i ] ];

        t = tan1[ vertexIndex ];

        // Gram-Schmidt orthogonalize

        tmp.copy( t );
        tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

        // Calculate handedness

        tmp2.crossVectors( face.vertexNormals[ i ], t );
        test = tmp2.dot( tan2[ vertexIndex ] );
        w = (test < 0.0) ? -1.0 : 1.0;

        face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );

      }

    }

    this.hasTangents = true;

  },

  computeLineDistances: function ( ) {

    var d = 0;
    var vertices = this.vertices;

    for ( var i = 0, il = vertices.length; i < il; i ++ ) {

      if ( i > 0 ) {

        d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

      }

      this.lineDistances[ i ] = d;

    }

  },

  computeBoundingBox: function () {

    if ( this.boundingBox === null ) {

      this.boundingBox = new THREE.Box3();

    }

    this.boundingBox.setFromPoints( this.vertices );

  },

  computeBoundingSphere: function () {

    if ( this.boundingSphere === null ) {

      this.boundingSphere = new THREE.Sphere();

    }

    this.boundingSphere.setFromPoints( this.vertices );

  },

  merge: function ( geometry, matrix, materialIndexOffset ) {

    if ( geometry instanceof THREE.Geometry === false ) {

      console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
      return;

    }

    var normalMatrix,
    vertexOffset = this.vertices.length,
    uvPosition = this.faceVertexUvs[ 0 ].length,
    vertices1 = this.vertices,
    vertices2 = geometry.vertices,
    faces1 = this.faces,
    faces2 = geometry.faces,
    uvs1 = this.faceVertexUvs[ 0 ],
    uvs2 = geometry.faceVertexUvs[ 0 ];

    if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

    if ( matrix !== undefined ) {

      normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

    }

    // vertices

    for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

      var vertex = vertices2[ i ];

      var vertexCopy = vertex.clone();

      if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

      vertices1.push( vertexCopy );

    }

    // faces

    for ( i = 0, il = faces2.length; i < il; i ++ ) {

      var face = faces2[ i ], faceCopy, normal, color,
      faceVertexNormals = face.vertexNormals,
      faceVertexColors = face.vertexColors;

      faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
      faceCopy.normal.copy( face.normal );

      if ( normalMatrix !== undefined ) {

        faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

      }

      for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

        normal = faceVertexNormals[ j ].clone();

        if ( normalMatrix !== undefined ) {

          normal.applyMatrix3( normalMatrix ).normalize();

        }

        faceCopy.vertexNormals.push( normal );

      }

      faceCopy.color.copy( face.color );

      for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

        color = faceVertexColors[ j ];
        faceCopy.vertexColors.push( color.clone() );

      }

      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

      faces1.push( faceCopy );

    }

    // uvs

    for ( i = 0, il = uvs2.length; i < il; i ++ ) {

      var uv = uvs2[ i ], uvCopy = [];
      
      if ( uv === undefined ) {
        
        continue;
        
      }

      for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

        uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

      }

      uvs1.push( uvCopy );

    }

  },

  /*
   * Checks for duplicate vertices with hashmap.
   * Duplicated vertices are removed
   * and faces' vertices are updated.
   */

  mergeVertices: function () {

    var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)
    var unique = [], changes = [];

    var v, key;
    var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001
    var precision = Math.pow( 10, precisionPoints );
    var i,il, face;
    var indices, k, j, jl, u;

    for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

      v = this.vertices[ i ];
      key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

      if ( verticesMap[ key ] === undefined ) {

        verticesMap[ key ] = i;
        unique.push( this.vertices[ i ] );
        changes[ i ] = unique.length - 1;

      } else {

        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
        changes[ i ] = changes[ verticesMap[ key ] ];

      }

    };


    // if faces are completely degenerate after merging vertices, we
    // have to remove them from the geometry.
    var faceIndicesToRemove = [];

    for( i = 0, il = this.faces.length; i < il; i ++ ) {

      face = this.faces[ i ];

      face.a = changes[ face.a ];
      face.b = changes[ face.b ];
      face.c = changes[ face.c ];

      indices = [ face.a, face.b, face.c ];

      var dupIndex = -1;

      // if any duplicate vertices are found in a Face3
      // we have to remove the face as nothing can be saved
      for ( var n = 0; n < 3; n ++ ) {
        if ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {

          dupIndex = n;
          faceIndicesToRemove.push( i );
          break;

        }
      }

    }

    for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
      var idx = faceIndicesToRemove[ i ];

      this.faces.splice( idx, 1 );

      for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

        this.faceVertexUvs[ j ].splice( idx, 1 );

      }

    }

    // Use unique set of vertices

    var diff = this.vertices.length - unique.length;
    this.vertices = unique;
    return diff;

  },

  // Geometry splitting

  makeGroups: ( function () {

    var geometryGroupCounter = 0;
    
    return function ( usesFaceMaterial, maxVerticesInGroup ) {

      var f, fl, face, materialIndex,
        groupHash, hash_map = {};

      var numMorphTargets = this.morphTargets.length;
      var numMorphNormals = this.morphNormals.length;

      this.geometryGroups = {};

      for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

        face = this.faces[ f ];
        materialIndex = usesFaceMaterial ? face.materialIndex : 0;

        if ( ! ( materialIndex in hash_map ) ) {

          hash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };

        }

        groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

        if ( ! ( groupHash in this.geometryGroups ) ) {

          this.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

        }

        if ( this.geometryGroups[ groupHash ].vertices + 3 > maxVerticesInGroup ) {

          hash_map[ materialIndex ].counter += 1;
          groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

          if ( ! ( groupHash in this.geometryGroups ) ) {

            this.geometryGroups[ groupHash ] = { 'faces3': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

          }

        }

        this.geometryGroups[ groupHash ].faces3.push( f );
        this.geometryGroups[ groupHash ].vertices += 3;

      }

      this.geometryGroupsList = [];

      for ( var g in this.geometryGroups ) {

        this.geometryGroups[ g ].id = geometryGroupCounter ++;

        this.geometryGroupsList.push( this.geometryGroups[ g ] );

      }

    };
    
  } )(),

  clone: function () {

    var geometry = new THREE.Geometry();

    var vertices = this.vertices;

    for ( var i = 0, il = vertices.length; i < il; i ++ ) {

      geometry.vertices.push( vertices[ i ].clone() );

    }

    var faces = this.faces;

    for ( var i = 0, il = faces.length; i < il; i ++ ) {

      geometry.faces.push( faces[ i ].clone() );

    }

    var uvs = this.faceVertexUvs[ 0 ];

    for ( var i = 0, il = uvs.length; i < il; i ++ ) {

      var uv = uvs[ i ], uvCopy = [];

      for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

        uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

      }

      geometry.faceVertexUvs[ 0 ].push( uvCopy );

    }

    return geometry;

  },

  dispose: function () {

    this.dispatchEvent( { type: 'dispose' } );

  }

};

THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );

THREE.GeometryIdCount = 0;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.Camera = function () {

  THREE.Object3D.call( this );

  this.matrixWorldInverse = new THREE.Matrix4();
  this.projectionMatrix = new THREE.Matrix4();

};

THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );

THREE.Camera.prototype.lookAt = function () {

  // This routine does not support cameras with rotated and/or translated parent(s)

  var m1 = new THREE.Matrix4();

  return function ( vector ) {

    m1.lookAt( this.position, vector, this.up );

    this.quaternion.setFromRotationMatrix( m1 );

  };

}();

THREE.Camera.prototype.clone = function (camera) {

  if ( camera === undefined ) camera = new THREE.Camera();

  THREE.Object3D.prototype.clone.call( this, camera );

  camera.matrixWorldInverse.copy( this.matrixWorldInverse );
  camera.projectionMatrix.copy( this.projectionMatrix );

  return camera;
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

  THREE.Camera.call( this );

  this.left = left;
  this.right = right;
  this.top = top;
  this.bottom = bottom;

  this.near = ( near !== undefined ) ? near : 0.1;
  this.far = ( far !== undefined ) ? far : 2000;

  this.updateProjectionMatrix();

};

THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

  this.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );

};

THREE.OrthographicCamera.prototype.clone = function () {

  var camera = new THREE.OrthographicCamera();

  THREE.Camera.prototype.clone.call( this, camera );

  camera.left = this.left;
  camera.right = this.right;
  camera.top = this.top;
  camera.bottom = this.bottom;
  
  camera.near = this.near;
  camera.far = this.far;

  return camera;
};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

  THREE.Camera.call( this );

  this.fov = fov !== undefined ? fov : 50;
  this.aspect = aspect !== undefined ? aspect : 1;
  this.near = near !== undefined ? near : 0.1;
  this.far = far !== undefined ? far : 2000;

  this.updateProjectionMatrix();

};

THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );


/**
 * Uses Focal Length (in mm) to estimate and set FOV
 * 35mm (fullframe) camera is used if frame size is not specified;
 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
 */

THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

  if ( frameHeight === undefined ) frameHeight = 24;

  this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
  this.updateProjectionMatrix();

}


/**
 * Sets an offset in a larger frustum. This is useful for multi-window or
 * multi-monitor/multi-machine setups.
 *
 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
 * the monitors are in grid like this
 *
 *   +---+---+---+
 *   | A | B | C |
 *   +---+---+---+
 *   | D | E | F |
 *   +---+---+---+
 *
 * then for each monitor you would call it like this
 *
 *   var w = 1920;
 *   var h = 1080;
 *   var fullWidth = w * 3;
 *   var fullHeight = h * 2;
 *
 *   --A--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
 *   --B--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
 *   --C--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
 *   --D--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
 *   --E--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
 *   --F--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
 *
 *   Note there is no reason monitors have to be the same size or in a grid.
 */

THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

  this.fullWidth = fullWidth;
  this.fullHeight = fullHeight;
  this.x = x;
  this.y = y;
  this.width = width;
  this.height = height;

  this.updateProjectionMatrix();

};


THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

  if ( this.fullWidth ) {

    var aspect = this.fullWidth / this.fullHeight;
    var top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;
    var bottom = -top;
    var left = aspect * bottom;
    var right = aspect * top;
    var width = Math.abs( right - left );
    var height = Math.abs( top - bottom );

    this.projectionMatrix.makeFrustum(
      left + this.x * width / this.fullWidth,
      left + ( this.x + this.width ) * width / this.fullWidth,
      top - ( this.y + this.height ) * height / this.fullHeight,
      top - this.y * height / this.fullHeight,
      this.near,
      this.far
    );

  } else {

    this.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );

  }

};

THREE.PerspectiveCamera.prototype.clone = function () {

  var camera = new THREE.PerspectiveCamera();

  THREE.Camera.prototype.clone.call( this, camera );

  camera.fov = this.fov;
  camera.aspect = this.aspect;
  camera.near = this.near;
  camera.far = this.far;

  return camera;
};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */
 
THREE.Light = function ( color ) {

  THREE.Object3D.call( this );

  this.color = new THREE.Color( color );

};

THREE.Light.prototype = Object.create( THREE.Object3D.prototype );

THREE.Light.prototype.clone = function ( light ) {

  if ( light === undefined ) light = new THREE.Light();

  THREE.Object3D.prototype.clone.call( this, light );

  light.color.copy( this.color );

  return light;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AmbientLight = function ( color ) {

  THREE.Light.call( this, color );

};

THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );

THREE.AmbientLight.prototype.clone = function () {

  var light = new THREE.AmbientLight();

  THREE.Light.prototype.clone.call( this, light );

  return light;

};

/**
 * @author MPanknin / http://www.redplant.de/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.AreaLight = function ( color, intensity ) {

  THREE.Light.call( this, color );

  this.normal = new THREE.Vector3( 0, -1, 0 );
  this.right = new THREE.Vector3( 1, 0, 0 );

  this.intensity = ( intensity !== undefined ) ? intensity : 1;

  this.width = 1.0;
  this.height = 1.0;

  this.constantAttenuation = 1.5;
  this.linearAttenuation = 0.5;
  this.quadraticAttenuation = 0.1;

};

THREE.AreaLight.prototype = Object.create( THREE.Light.prototype );


/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DirectionalLight = function ( color, intensity ) {

  THREE.Light.call( this, color );

  this.position.set( 0, 1, 0 );
  this.target = new THREE.Object3D();

  this.intensity = ( intensity !== undefined ) ? intensity : 1;

  this.castShadow = false;
  this.onlyShadow = false;

  //

  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5000;

  this.shadowCameraLeft = -500;
  this.shadowCameraRight = 500;
  this.shadowCameraTop = 500;
  this.shadowCameraBottom = -500;

  this.shadowCameraVisible = false;

  this.shadowBias = 0;
  this.shadowDarkness = 0.5;

  this.shadowMapWidth = 512;
  this.shadowMapHeight = 512;

  //

  this.shadowCascade = false;

  this.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );
  this.shadowCascadeCount = 2;

  this.shadowCascadeBias = [ 0, 0, 0 ];
  this.shadowCascadeWidth = [ 512, 512, 512 ];
  this.shadowCascadeHeight = [ 512, 512, 512 ];

  this.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];
  this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];

  this.shadowCascadeArray = [];

  //

  this.shadowMap = null;
  this.shadowMapSize = null;
  this.shadowCamera = null;
  this.shadowMatrix = null;

};

THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );

THREE.DirectionalLight.prototype.clone = function () {

  var light = new THREE.DirectionalLight();

  THREE.Light.prototype.clone.call( this, light );

  light.target = this.target.clone();

  light.intensity = this.intensity;

  light.castShadow = this.castShadow;
  light.onlyShadow = this.onlyShadow;

  //

  light.shadowCameraNear = this.shadowCameraNear;
  light.shadowCameraFar = this.shadowCameraFar;

  light.shadowCameraLeft = this.shadowCameraLeft;
  light.shadowCameraRight = this.shadowCameraRight;
  light.shadowCameraTop = this.shadowCameraTop;
  light.shadowCameraBottom = this.shadowCameraBottom;

  light.shadowCameraVisible = this.shadowCameraVisible;

  light.shadowBias = this.shadowBias;
  light.shadowDarkness = this.shadowDarkness;

  light.shadowMapWidth = this.shadowMapWidth;
  light.shadowMapHeight = this.shadowMapHeight;

  //

  light.shadowCascade = this.shadowCascade;

  light.shadowCascadeOffset.copy( this.shadowCascadeOffset );
  light.shadowCascadeCount = this.shadowCascadeCount;

  light.shadowCascadeBias = this.shadowCascadeBias.slice( 0 );
  light.shadowCascadeWidth = this.shadowCascadeWidth.slice( 0 );
  light.shadowCascadeHeight = this.shadowCascadeHeight.slice( 0 );

  light.shadowCascadeNearZ = this.shadowCascadeNearZ.slice( 0 );
  light.shadowCascadeFarZ  = this.shadowCascadeFarZ.slice( 0 );

  return light;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

  THREE.Light.call( this, skyColor );

  this.position.set( 0, 100, 0 );

  this.groundColor = new THREE.Color( groundColor );
  this.intensity = ( intensity !== undefined ) ? intensity : 1;

};

THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );

THREE.HemisphereLight.prototype.clone = function () {

  var light = new THREE.HemisphereLight();

  THREE.Light.prototype.clone.call( this, light );

  light.groundColor.copy( this.groundColor );
  light.intensity = this.intensity;

  return light;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLight = function ( color, intensity, distance ) {

  THREE.Light.call( this, color );

  this.intensity = ( intensity !== undefined ) ? intensity : 1;
  this.distance = ( distance !== undefined ) ? distance : 0;

};

THREE.PointLight.prototype = Object.create( THREE.Light.prototype );

THREE.PointLight.prototype.clone = function () {

  var light = new THREE.PointLight();

  THREE.Light.prototype.clone.call( this, light );

  light.intensity = this.intensity;
  light.distance = this.distance;

  return light;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpotLight = function ( color, intensity, distance, angle, exponent ) {

  THREE.Light.call( this, color );

  this.position.set( 0, 1, 0 );
  this.target = new THREE.Object3D();

  this.intensity = ( intensity !== undefined ) ? intensity : 1;
  this.distance = ( distance !== undefined ) ? distance : 0;
  this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
  this.exponent = ( exponent !== undefined ) ? exponent : 10;

  this.castShadow = false;
  this.onlyShadow = false;

  //

  this.shadowCameraNear = 50;
  this.shadowCameraFar = 5000;
  this.shadowCameraFov = 50;

  this.shadowCameraVisible = false;

  this.shadowBias = 0;
  this.shadowDarkness = 0.5;

  this.shadowMapWidth = 512;
  this.shadowMapHeight = 512;

  //

  this.shadowMap = null;
  this.shadowMapSize = null;
  this.shadowCamera = null;
  this.shadowMatrix = null;

};

THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );

THREE.SpotLight.prototype.clone = function () {

  var light = new THREE.SpotLight();

  THREE.Light.prototype.clone.call( this, light );

  light.target = this.target.clone();

  light.intensity = this.intensity;
  light.distance = this.distance;
  light.angle = this.angle;
  light.exponent = this.exponent;

  light.castShadow = this.castShadow;
  light.onlyShadow = this.onlyShadow;

  //

  light.shadowCameraNear = this.shadowCameraNear;
  light.shadowCameraFar = this.shadowCameraFar;
  light.shadowCameraFov = this.shadowCameraFov;

  light.shadowCameraVisible = this.shadowCameraVisible;

  light.shadowBias = this.shadowBias;
  light.shadowDarkness = this.shadowDarkness;

  light.shadowMapWidth = this.shadowMapWidth;
  light.shadowMapHeight = this.shadowMapHeight;

  return light;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Cache = function () {

  this.files = {};

};

THREE.Cache.prototype = {

  constructor: THREE.Cache,

  add: function ( key, file ) {

    // console.log( 'THREE.Cache', 'Adding key:', key );

    this.files[ key ] = file;

  },

  get: function ( key ) {

    // console.log( 'THREE.Cache', 'Checking key:', key );

    return this.files[ key ];

  },

  remove: function ( key ) {

    delete this.files[ key ];

  },

  clear: function () {

    this.files = {}

  }

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Loader = function ( showStatus ) {

  this.showStatus = showStatus;
  this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;

  this.imageLoader = new THREE.ImageLoader();

  this.onLoadStart = function () {};
  this.onLoadProgress = function () {};
  this.onLoadComplete = function () {};

};

THREE.Loader.prototype = {

  constructor: THREE.Loader,

  crossOrigin: undefined,

  addStatusElement: function () {

    var e = document.createElement( "div" );

    e.style.position = "absolute";
    e.style.right = "0px";
    e.style.top = "0px";
    e.style.fontSize = "0.8em";
    e.style.textAlign = "left";
    e.style.background = "rgba(0,0,0,0.25)";
    e.style.color = "#fff";
    e.style.width = "120px";
    e.style.padding = "0.5em 0.5em 0.5em 0.5em";
    e.style.zIndex = 1000;

    e.innerHTML = "Loading ...";

    return e;

  },

  updateProgress: function ( progress ) {

    var message = "Loaded ";

    if ( progress.total ) {

      message += ( 100 * progress.loaded / progress.total ).toFixed(0) + "%";


    } else {

      message += ( progress.loaded / 1024 ).toFixed(2) + " KB";

    }

    this.statusDomElement.innerHTML = message;

  },

  extractUrlBase: function ( url ) {

    var parts = url.split( '/' );

    if ( parts.length === 1 ) return './';

    parts.pop();

    return parts.join( '/' ) + '/';

  },

  initMaterials: function ( materials, texturePath ) {

    var array = [];

    for ( var i = 0; i < materials.length; ++ i ) {

      array[ i ] = this.createMaterial( materials[ i ], texturePath );

    }

    return array;

  },

  needsTangents: function ( materials ) {

    for( var i = 0, il = materials.length; i < il; i ++ ) {

      var m = materials[ i ];

      if ( m instanceof THREE.ShaderMaterial ) return true;

    }

    return false;

  },

  createMaterial: function ( m, texturePath ) {

    var scope = this;

    function nearest_pow2( n ) {

      var l = Math.log( n ) / Math.LN2;
      return Math.pow( 2, Math.round(  l ) );

    }

    function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {

      var isCompressed = /\.dds$/i.test( sourceFile );

      var fullPath = texturePath + sourceFile;

      if ( isCompressed ) {

        var texture = THREE.ImageUtils.loadCompressedTexture( fullPath );

        where[ name ] = texture;

      } else {

        var texture = document.createElement( 'canvas' );

        where[ name ] = new THREE.Texture( texture );

      }

      where[ name ].sourceFile = sourceFile;

      if( repeat ) {

        where[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );

        if ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;
        if ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;

      }

      if ( offset ) {

        where[ name ].offset.set( offset[ 0 ], offset[ 1 ] );

      }

      if ( wrap ) {

        var wrapMap = {
          "repeat": THREE.RepeatWrapping,
          "mirror": THREE.MirroredRepeatWrapping
        }

        if ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];
        if ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];

      }

      if ( anisotropy ) {

        where[ name ].anisotropy = anisotropy;

      }

      if ( ! isCompressed ) {

        var texture = where[ name ];

        scope.imageLoader.crossOrigin = scope.crossOrigin;
        scope.imageLoader.load( fullPath, function ( image ) {

          if ( THREE.Math.isPowerOfTwo( image.width ) === false ||
             THREE.Math.isPowerOfTwo( image.height ) === false ) {

            var width = nearest_pow2( image.width );
            var height = nearest_pow2( image.height );

            texture.image.width = width;
            texture.image.height = height;
            texture.image.getContext( '2d' ).drawImage( image, 0, 0, width, height );

          } else {

            texture.image = image;

          }

          texture.needsUpdate = true;

        } );

      }

    }

    function rgb2hex( rgb ) {

      return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;

    }

    // defaults

    var mtype = "MeshLambertMaterial";
    var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };

    // parameters from model file

    if ( m.shading ) {

      var shading = m.shading.toLowerCase();

      if ( shading === "phong" ) mtype = "MeshPhongMaterial";
      else if ( shading === "basic" ) mtype = "MeshBasicMaterial";

    }

    if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {

      mpars.blending = THREE[ m.blending ];

    }

    if ( m.transparent !== undefined || m.opacity < 1.0 ) {

      mpars.transparent = m.transparent;

    }

    if ( m.depthTest !== undefined ) {

      mpars.depthTest = m.depthTest;

    }

    if ( m.depthWrite !== undefined ) {

      mpars.depthWrite = m.depthWrite;

    }

    if ( m.visible !== undefined ) {

      mpars.visible = m.visible;

    }

    if ( m.flipSided !== undefined ) {

      mpars.side = THREE.BackSide;

    }

    if ( m.doubleSided !== undefined ) {

      mpars.side = THREE.DoubleSide;

    }

    if ( m.wireframe !== undefined ) {

      mpars.wireframe = m.wireframe;

    }

    if ( m.vertexColors !== undefined ) {

      if ( m.vertexColors === "face" ) {

        mpars.vertexColors = THREE.FaceColors;

      } else if ( m.vertexColors ) {

        mpars.vertexColors = THREE.VertexColors;

      }

    }

    // colors

    if ( m.colorDiffuse ) {

      mpars.color = rgb2hex( m.colorDiffuse );

    } else if ( m.DbgColor ) {

      mpars.color = m.DbgColor;

    }

    if ( m.colorSpecular ) {

      mpars.specular = rgb2hex( m.colorSpecular );

    }

    if ( m.colorAmbient ) {

      mpars.ambient = rgb2hex( m.colorAmbient );

    }

    if ( m.colorEmissive ) {

      mpars.emissive = rgb2hex( m.colorEmissive );

    }

    // modifiers

    if ( m.transparency ) {

      mpars.opacity = m.transparency;

    }

    if ( m.specularCoef ) {

      mpars.shininess = m.specularCoef;

    }

    // textures

    if ( m.mapDiffuse && texturePath ) {

      create_texture( mpars, "map", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );

    }

    if ( m.mapLight && texturePath ) {

      create_texture( mpars, "lightMap", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );

    }

    if ( m.mapBump && texturePath ) {

      create_texture( mpars, "bumpMap", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );

    }

    if ( m.mapNormal && texturePath ) {

      create_texture( mpars, "normalMap", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );

    }

    if ( m.mapSpecular && texturePath ) {

      create_texture( mpars, "specularMap", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );

    }

    //

    if ( m.mapBumpScale ) {

      mpars.bumpScale = m.mapBumpScale;

    }

    // special case for normal mapped material

    if ( m.mapNormal ) {

      var shader = THREE.ShaderLib[ "normalmap" ];
      var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

      uniforms[ "tNormal" ].value = mpars.normalMap;

      if ( m.mapNormalFactor ) {

        uniforms[ "uNormalScale" ].value.set( m.mapNormalFactor, m.mapNormalFactor );

      }

      if ( mpars.map ) {

        uniforms[ "tDiffuse" ].value = mpars.map;
        uniforms[ "enableDiffuse" ].value = true;

      }

      if ( mpars.specularMap ) {

        uniforms[ "tSpecular" ].value = mpars.specularMap;
        uniforms[ "enableSpecular" ].value = true;

      }

      if ( mpars.lightMap ) {

        uniforms[ "tAO" ].value = mpars.lightMap;
        uniforms[ "enableAO" ].value = true;

      }

      // for the moment don't handle displacement texture

      uniforms[ "diffuse" ].value.setHex( mpars.color );
      uniforms[ "specular" ].value.setHex( mpars.specular );
      uniforms[ "ambient" ].value.setHex( mpars.ambient );

      uniforms[ "shininess" ].value = mpars.shininess;

      if ( mpars.opacity !== undefined ) {

        uniforms[ "opacity" ].value = mpars.opacity;

      }

      var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };
      var material = new THREE.ShaderMaterial( parameters );

      if ( mpars.transparent ) {

        material.transparent = true;

      }

    } else {

      var material = new THREE[ mtype ]( mpars );

    }

    if ( m.DbgName !== undefined ) material.name = m.DbgName;

    return material;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.XHRLoader = function ( manager ) {

  this.cache = new THREE.Cache();
  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.XHRLoader.prototype = {

  constructor: THREE.XHRLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var cached = scope.cache.get( url );

    if ( cached !== undefined ) {

      onLoad( cached );
      return;

    }

    var request = new XMLHttpRequest();

    if ( onLoad !== undefined ) {

      request.addEventListener( 'load', function ( event ) {

        scope.cache.add( url, event.target.responseText );

        onLoad( event.target.responseText );
        scope.manager.itemEnd( url );

      }, false );

    }

    if ( onProgress !== undefined ) {

      request.addEventListener( 'progress', function ( event ) {

        onProgress( event );

      }, false );

    }

    if ( onError !== undefined ) {

      request.addEventListener( 'error', function ( event ) {

        onError( event );

      }, false );

    }

    if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;

    request.open( 'GET', url, true );
    request.send( null );

    scope.manager.itemStart( url );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageLoader = function ( manager ) {

  this.cache = new THREE.Cache();
  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ImageLoader.prototype = {

  constructor: THREE.ImageLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var cached = scope.cache.get( url );

    if ( cached !== undefined ) {

      onLoad( cached );
      return;

    }

    var image = document.createElement( 'img' );

    if ( onLoad !== undefined ) {

      image.addEventListener( 'load', function ( event ) {

        scope.cache.add( url, this );

        onLoad( this );
        scope.manager.itemEnd( url );

      }, false );

    }

    if ( onProgress !== undefined ) {

      image.addEventListener( 'progress', function ( event ) {

        onProgress( event );

      }, false );

    }

    if ( onError !== undefined ) {

      image.addEventListener( 'error', function ( event ) {

        onError( event );

      }, false );

    }

    if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

    image.src = url;

    scope.manager.itemStart( url );

    return image;

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  }

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.JSONLoader = function ( showStatus ) {

  THREE.Loader.call( this, showStatus );

  this.withCredentials = false;

};

THREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );

THREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {

  var scope = this;

  // todo: unify load API to for easier SceneLoader use

  texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );

  this.onLoadStart();
  this.loadAjaxJSON( this, url, callback, texturePath );

};

THREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {

  var xhr = new XMLHttpRequest();

  var length = 0;

  xhr.onreadystatechange = function () {

    if ( xhr.readyState === xhr.DONE ) {

      if ( xhr.status === 200 || xhr.status === 0 ) {

        if ( xhr.responseText ) {

          var json = JSON.parse( xhr.responseText );

          if ( json.metadata !== undefined && json.metadata.type === 'scene' ) {

            console.error( 'THREE.JSONLoader: "' + url + '" seems to be a Scene. Use THREE.SceneLoader instead.' );
            return;

          }

          var result = context.parse( json, texturePath );
          callback( result.geometry, result.materials );

        } else {

          console.error( 'THREE.JSONLoader: "' + url + '" seems to be unreachable or the file is empty.' );

        }

        // in context of more complex asset initialization
        // do not block on single failed file
        // maybe should go even one more level up

        context.onLoadComplete();

      } else {

        console.error( 'THREE.JSONLoader: Couldn\'t load "' + url + '" (' + xhr.status + ')' );

      }

    } else if ( xhr.readyState === xhr.LOADING ) {

      if ( callbackProgress ) {

        if ( length === 0 ) {

          length = xhr.getResponseHeader( 'Content-Length' );

        }

        callbackProgress( { total: length, loaded: xhr.responseText.length } );

      }

    } else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {

      if ( callbackProgress !== undefined ) {

        length = xhr.getResponseHeader( "Content-Length" );

      }

    }

  };

  xhr.open( "GET", url, true );
  xhr.withCredentials = this.withCredentials;
  xhr.send( null );

};

THREE.JSONLoader.prototype.parse = function ( json, texturePath ) {

  var scope = this,
  geometry = new THREE.Geometry(),
  scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

  parseModel( scale );

  parseSkin();
  parseMorphing( scale );

  geometry.computeFaceNormals();
  geometry.computeBoundingSphere();

  function parseModel( scale ) {

    function isBitSet( value, position ) {

      return value & ( 1 << position );

    }

    var i, j, fi,

    offset, zLength,

    colorIndex, normalIndex, uvIndex, materialIndex,

    type,
    isQuad,
    hasMaterial,
    hasFaceVertexUv,
    hasFaceNormal, hasFaceVertexNormal,
    hasFaceColor, hasFaceVertexColor,

    vertex, face, faceA, faceB, color, hex, normal,

    uvLayer, uv, u, v,

    faces = json.faces,
    vertices = json.vertices,
    normals = json.normals,
    colors = json.colors,

    nUvLayers = 0;

    if ( json.uvs !== undefined ) {

      // disregard empty arrays

      for ( i = 0; i < json.uvs.length; i++ ) {

        if ( json.uvs[ i ].length ) nUvLayers ++;

      }

      for ( i = 0; i < nUvLayers; i++ ) {

        geometry.faceVertexUvs[ i ] = [];

      }

    }

    offset = 0;
    zLength = vertices.length;

    while ( offset < zLength ) {

      vertex = new THREE.Vector3();

      vertex.x = vertices[ offset ++ ] * scale;
      vertex.y = vertices[ offset ++ ] * scale;
      vertex.z = vertices[ offset ++ ] * scale;

      geometry.vertices.push( vertex );

    }

    offset = 0;
    zLength = faces.length;

    while ( offset < zLength ) {

      type = faces[ offset ++ ];


      isQuad              = isBitSet( type, 0 );
      hasMaterial         = isBitSet( type, 1 );
      hasFaceVertexUv     = isBitSet( type, 3 );
      hasFaceNormal       = isBitSet( type, 4 );
      hasFaceVertexNormal = isBitSet( type, 5 );
      hasFaceColor      = isBitSet( type, 6 );
      hasFaceVertexColor  = isBitSet( type, 7 );

      // console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

      if ( isQuad ) {

        faceA = new THREE.Face3();
        faceA.a = faces[ offset ];
        faceA.b = faces[ offset + 1 ];
        faceA.c = faces[ offset + 3 ];

        faceB = new THREE.Face3();
        faceB.a = faces[ offset + 1 ];
        faceB.b = faces[ offset + 2 ];
        faceB.c = faces[ offset + 3 ];

        offset += 4;

        if ( hasMaterial ) {

          materialIndex = faces[ offset ++ ];
          faceA.materialIndex = materialIndex;
          faceB.materialIndex = materialIndex;

        }

        // to get face <=> uv index correspondence

        fi = geometry.faces.length;

        if ( hasFaceVertexUv ) {

          for ( i = 0; i < nUvLayers; i++ ) {

            uvLayer = json.uvs[ i ];

            geometry.faceVertexUvs[ i ][ fi ] = [];
            geometry.faceVertexUvs[ i ][ fi + 1 ] = []

            for ( j = 0; j < 4; j ++ ) {

              uvIndex = faces[ offset ++ ];

              u = uvLayer[ uvIndex * 2 ];
              v = uvLayer[ uvIndex * 2 + 1 ];

              uv = new THREE.Vector2( u, v );

              if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
              if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

            }

          }

        }

        if ( hasFaceNormal ) {

          normalIndex = faces[ offset ++ ] * 3;

          faceA.normal.set(
            normals[ normalIndex ++ ],
            normals[ normalIndex ++ ],
            normals[ normalIndex ]
          );

          faceB.normal.copy( faceA.normal );

        }

        if ( hasFaceVertexNormal ) {

          for ( i = 0; i < 4; i++ ) {

            normalIndex = faces[ offset ++ ] * 3;

            normal = new THREE.Vector3(
              normals[ normalIndex ++ ],
              normals[ normalIndex ++ ],
              normals[ normalIndex ]
            );


            if ( i !== 2 ) faceA.vertexNormals.push( normal );
            if ( i !== 0 ) faceB.vertexNormals.push( normal );

          }

        }


        if ( hasFaceColor ) {

          colorIndex = faces[ offset ++ ];
          hex = colors[ colorIndex ];

          faceA.color.setHex( hex );
          faceB.color.setHex( hex );

        }


        if ( hasFaceVertexColor ) {

          for ( i = 0; i < 4; i++ ) {

            colorIndex = faces[ offset ++ ];
            hex = colors[ colorIndex ];

            if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
            if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

          }

        }

        geometry.faces.push( faceA );
        geometry.faces.push( faceB );

      } else {

        face = new THREE.Face3();
        face.a = faces[ offset ++ ];
        face.b = faces[ offset ++ ];
        face.c = faces[ offset ++ ];

        if ( hasMaterial ) {

          materialIndex = faces[ offset ++ ];
          face.materialIndex = materialIndex;

        }

        // to get face <=> uv index correspondence

        fi = geometry.faces.length;

        if ( hasFaceVertexUv ) {

          for ( i = 0; i < nUvLayers; i++ ) {

            uvLayer = json.uvs[ i ];

            geometry.faceVertexUvs[ i ][ fi ] = [];

            for ( j = 0; j < 3; j ++ ) {

              uvIndex = faces[ offset ++ ];

              u = uvLayer[ uvIndex * 2 ];
              v = uvLayer[ uvIndex * 2 + 1 ];

              uv = new THREE.Vector2( u, v );

              geometry.faceVertexUvs[ i ][ fi ].push( uv );

            }

          }

        }

        if ( hasFaceNormal ) {

          normalIndex = faces[ offset ++ ] * 3;

          face.normal.set(
            normals[ normalIndex ++ ],
            normals[ normalIndex ++ ],
            normals[ normalIndex ]
          );

        }

        if ( hasFaceVertexNormal ) {

          for ( i = 0; i < 3; i++ ) {

            normalIndex = faces[ offset ++ ] * 3;

            normal = new THREE.Vector3(
              normals[ normalIndex ++ ],
              normals[ normalIndex ++ ],
              normals[ normalIndex ]
            );

            face.vertexNormals.push( normal );

          }

        }


        if ( hasFaceColor ) {

          colorIndex = faces[ offset ++ ];
          face.color.setHex( colors[ colorIndex ] );

        }


        if ( hasFaceVertexColor ) {

          for ( i = 0; i < 3; i++ ) {

            colorIndex = faces[ offset ++ ];
            face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

          }

        }

        geometry.faces.push( face );

      }

    }

  };

  function parseSkin() {
    var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

    if ( json.skinWeights ) {

      for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

        var x =                               json.skinWeights[ i     ];
        var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
        var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
        var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

        geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

      }

    }

    if ( json.skinIndices ) {

      for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

        var a =                               json.skinIndices[ i     ];
        var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
        var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
        var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

        geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

      }

    }

    geometry.bones = json.bones;

    if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

        console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
          geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

    }


    // could change this to json.animations[0] or remove completely
    
    geometry.animation = json.animation;
    geometry.animations = json.animations;

  };

  function parseMorphing( scale ) {

    if ( json.morphTargets !== undefined ) {

      var i, l, v, vl, dstVertices, srcVertices;

      for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {

        geometry.morphTargets[ i ] = {};
        geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
        geometry.morphTargets[ i ].vertices = [];

        dstVertices = geometry.morphTargets[ i ].vertices;
        srcVertices = json.morphTargets [ i ].vertices;

        for( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

          var vertex = new THREE.Vector3();
          vertex.x = srcVertices[ v ] * scale;
          vertex.y = srcVertices[ v + 1 ] * scale;
          vertex.z = srcVertices[ v + 2 ] * scale;

          dstVertices.push( vertex );

        }

      }

    }

    if ( json.morphColors !== undefined ) {

      var i, l, c, cl, dstColors, srcColors, color;

      for ( i = 0, l = json.morphColors.length; i < l; i++ ) {

        geometry.morphColors[ i ] = {};
        geometry.morphColors[ i ].name = json.morphColors[ i ].name;
        geometry.morphColors[ i ].colors = [];

        dstColors = geometry.morphColors[ i ].colors;
        srcColors = json.morphColors [ i ].colors;

        for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {

          color = new THREE.Color( 0xffaa00 );
          color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );
          dstColors.push( color );

        }

      }

    }

  };

  if ( json.materials === undefined || json.materials.length === 0 ) {

    return { geometry: geometry };

  } else {

    var materials = this.initMaterials( json.materials, texturePath );

    if ( this.needsTangents( materials ) ) {

      geometry.computeTangents();

    }

    return { geometry: geometry, materials: materials };

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

  var scope = this;

  var loaded = 0, total = 0;

  this.onLoad = onLoad;
  this.onProgress = onProgress;
  this.onError = onError;

  this.itemStart = function ( url ) {

    total ++;

  };

  this.itemEnd = function ( url ) {

    loaded ++;

    if ( scope.onProgress !== undefined ) {

      scope.onProgress( url, loaded, total );

    }

    if ( loaded === total && scope.onLoad !== undefined ) {

      scope.onLoad();

    }

  };

};

THREE.DefaultLoadingManager = new THREE.LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferGeometryLoader = function ( manager ) {

  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.BufferGeometryLoader.prototype = {

  constructor: THREE.BufferGeometryLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var loader = new THREE.XHRLoader();
    loader.setCrossOrigin( this.crossOrigin );
    loader.load( url, function ( text ) {

      onLoad( scope.parse( JSON.parse( text ) ) );

    } );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  },

  parse: function ( json ) {

    var geometry = new THREE.BufferGeometry();

    var attributes = json.attributes;
    var offsets = json.offsets;
    var boundingSphere = json.boundingSphere;

    for ( var key in attributes ) {

      var attribute = attributes[ key ];

      geometry.attributes[ key ] = {
        itemSize: attribute.itemSize,
        array: new self[ attribute.type ]( attribute.array )
      }

    }

    if ( offsets !== undefined ) {

      geometry.offsets = JSON.parse( JSON.stringify( offsets ) );

    }

    if ( boundingSphere !== undefined ) {

      geometry.boundingSphere = new THREE.Sphere(
        new THREE.Vector3().fromArray( boundingSphere.center !== undefined ? boundingSphere.center : [ 0, 0, 0 ] ),
        boundingSphere.radius
      );

    }

    return geometry;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MaterialLoader = function ( manager ) {

  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.MaterialLoader.prototype = {

  constructor: THREE.MaterialLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var loader = new THREE.XHRLoader();
    loader.setCrossOrigin( this.crossOrigin );
    loader.load( url, function ( text ) {

      onLoad( scope.parse( JSON.parse( text ) ) );

    } );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  },

  parse: function ( json ) {

    var material = new THREE[ json.type ];

    if ( json.color !== undefined ) material.color.setHex( json.color );
    if ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );
    if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
    if ( json.specular !== undefined ) material.specular.setHex( json.specular );
    if ( json.shininess !== undefined ) material.shininess = json.shininess;
    if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
    if ( json.blending !== undefined ) material.blending = json.blending;
    if ( json.side !== undefined ) material.side = json.side;
    if ( json.opacity !== undefined ) material.opacity = json.opacity;
    if ( json.transparent !== undefined ) material.transparent = json.transparent;
    if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;

    if ( json.materials !== undefined ) {

      for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

        material.materials.push( this.parse( json.materials[ i ] ) );

      }

    }

    return material;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ObjectLoader = function ( manager ) {

  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ObjectLoader.prototype = {

  constructor: THREE.ObjectLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var loader = new THREE.XHRLoader( scope.manager );
    loader.setCrossOrigin( this.crossOrigin );
    loader.load( url, function ( text ) {

      onLoad( scope.parse( JSON.parse( text ) ) );

    } );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  },

  parse: function ( json ) {

    var geometries = this.parseGeometries( json.geometries );
    var materials = this.parseMaterials( json.materials );
    var object = this.parseObject( json.object, geometries, materials );

    return object;

  },

  parseGeometries: function ( json ) {

    var geometries = {};

    if ( json !== undefined ) {

      var geometryLoader = new THREE.JSONLoader();
      var bufferGeometryLoader = new THREE.BufferGeometryLoader();

      for ( var i = 0, l = json.length; i < l; i ++ ) {

        var geometry;
        var data = json[ i ];

        switch ( data.type ) {

          case 'PlaneGeometry':

            geometry = new THREE.PlaneGeometry(
              data.width,
              data.height,
              data.widthSegments,
              data.heightSegments
            );

            break;

          case 'BoxGeometry':
          case 'CubeGeometry': // DEPRECATED

            geometry = new THREE.BoxGeometry(
              data.width,
              data.height,
              data.depth,
              data.widthSegments,
              data.heightSegments,
              data.depthSegments
            );

            break;

          case 'CircleGeometry':

            geometry = new THREE.CircleGeometry(
              data.radius,
              data.segments
            );

            break;

          case 'CylinderGeometry':

            geometry = new THREE.CylinderGeometry(
              data.radiusTop,
              data.radiusBottom,
              data.height,
              data.radialSegments,
              data.heightSegments,
              data.openEnded
            );

            break;

          case 'SphereGeometry':

            geometry = new THREE.SphereGeometry(
              data.radius,
              data.widthSegments,
              data.heightSegments,
              data.phiStart,
              data.phiLength,
              data.thetaStart,
              data.thetaLength
            );

            break;

          case 'IcosahedronGeometry':

            geometry = new THREE.IcosahedronGeometry(
              data.radius,
              data.detail
            );

            break;

          case 'TorusGeometry':

            geometry = new THREE.TorusGeometry(
              data.radius,
              data.tube,
              data.radialSegments,
              data.tubularSegments,
              data.arc
            );

            break;

          case 'TorusKnotGeometry':

            geometry = new THREE.TorusKnotGeometry(
              data.radius,
              data.tube,
              data.radialSegments,
              data.tubularSegments,
              data.p,
              data.q,
              data.heightScale
            );

            break;

          case 'BufferGeometry':

            geometry = bufferGeometryLoader.parse( data.data );

            break;

          case 'Geometry':

            geometry = geometryLoader.parse( data.data ).geometry;

            break;

        }

        geometry.uuid = data.uuid;

        if ( data.name !== undefined ) geometry.name = data.name;

        geometries[ data.uuid ] = geometry;

      }

    }

    return geometries;

  },

  parseMaterials: function ( json ) {

    var materials = {};

    if ( json !== undefined ) {

      var loader = new THREE.MaterialLoader();

      for ( var i = 0, l = json.length; i < l; i ++ ) {

        var data = json[ i ];
        var material = loader.parse( data );

        material.uuid = data.uuid;

        if ( data.name !== undefined ) material.name = data.name;

        materials[ data.uuid ] = material;

      }

    }

    return materials;

  },

  parseObject: function () {

    var matrix = new THREE.Matrix4();

    return function ( data, geometries, materials ) {

      var object;

      switch ( data.type ) {

        case 'Scene':

          object = new THREE.Scene();

          break;

        case 'PerspectiveCamera':

          object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

          break;

        case 'OrthographicCamera':

          object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

          break;

        case 'AmbientLight':

          object = new THREE.AmbientLight( data.color );

          break;

        case 'DirectionalLight':

          object = new THREE.DirectionalLight( data.color, data.intensity );

          break;

        case 'PointLight':

          object = new THREE.PointLight( data.color, data.intensity, data.distance );

          break;

        case 'SpotLight':

          object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );

          break;

        case 'HemisphereLight':

          object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

          break;

        case 'Mesh':

          var geometry = geometries[ data.geometry ];
          var material = materials[ data.material ];

          if ( geometry === undefined ) {

            console.error( 'THREE.ObjectLoader: Undefined geometry ' + data.geometry );

          }

          if ( material === undefined ) {

            console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

          }

          object = new THREE.Mesh( geometry, material );

          break;

        case 'Sprite':

          var material = materials[ data.material ];

          if ( material === undefined ) {

            console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

          }

          object = new THREE.Sprite( material );

          break;

        default:

          object = new THREE.Object3D();

      }

      object.uuid = data.uuid;

      if ( data.name !== undefined ) object.name = data.name;
      if ( data.matrix !== undefined ) {

        matrix.fromArray( data.matrix );
        matrix.decompose( object.position, object.quaternion, object.scale );

      } else {

        if ( data.position !== undefined ) object.position.fromArray( data.position );
        if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
        if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

      }

      if ( data.visible !== undefined ) object.visible = data.visible;
      if ( data.userData !== undefined ) object.userData = data.userData;

      if ( data.children !== undefined ) {

        for ( var child in data.children ) {

          object.add( this.parseObject( data.children[ child ], geometries, materials ) );

        }

      }

      return object;

    }

  }()

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneLoader = function () {

  this.onLoadStart = function () {};
  this.onLoadProgress = function() {};
  this.onLoadComplete = function () {};

  this.callbackSync = function () {};
  this.callbackProgress = function () {};

  this.geometryHandlers = {};
  this.hierarchyHandlers = {};

  this.addGeometryHandler( "ascii", THREE.JSONLoader );

};

THREE.SceneLoader.prototype = {

  constructor: THREE.SceneLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var loader = new THREE.XHRLoader( scope.manager );
    loader.setCrossOrigin( this.crossOrigin );
    loader.load( url, function ( text ) {

      scope.parse( JSON.parse( text ), onLoad, url );

    } );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  },

  addGeometryHandler: function ( typeID, loaderClass ) {

    this.geometryHandlers[ typeID ] = { "loaderClass": loaderClass };

  },

  addHierarchyHandler: function ( typeID, loaderClass ) {

    this.hierarchyHandlers[ typeID ] = { "loaderClass": loaderClass };

  },

  parse: function ( json, callbackFinished, url ) {

    var scope = this;

    var urlBase = THREE.Loader.prototype.extractUrlBase( url );

    var geometry, material, camera, fog,
      texture, images, color,
      light, hex, intensity,
      counter_models, counter_textures,
      total_models, total_textures,
      result;

    var target_array = [];

    var data = json;

    // async geometry loaders

    for ( var typeID in this.geometryHandlers ) {

      var loaderClass = this.geometryHandlers[ typeID ][ "loaderClass" ];
      this.geometryHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

    }

    // async hierachy loaders

    for ( var typeID in this.hierarchyHandlers ) {

      var loaderClass = this.hierarchyHandlers[ typeID ][ "loaderClass" ];
      this.hierarchyHandlers[ typeID ][ "loaderObject" ] = new loaderClass();

    }

    counter_models = 0;
    counter_textures = 0;

    result = {

      scene: new THREE.Scene(),
      geometries: {},
      face_materials: {},
      materials: {},
      textures: {},
      objects: {},
      cameras: {},
      lights: {},
      fogs: {},
      empties: {},
      groups: {}

    };

    if ( data.transform ) {

      var position = data.transform.position,
        rotation = data.transform.rotation,
        scale = data.transform.scale;

      if ( position ) {

        result.scene.position.fromArray( position );

      }

      if ( rotation ) {

        result.scene.rotation.fromArray( rotation );

      }

      if ( scale ) {

        result.scene.scale.fromArray( scale );

      }

      if ( position || rotation || scale ) {

        result.scene.updateMatrix();
        result.scene.updateMatrixWorld();

      }

    }

    function get_url( source_url, url_type ) {

      if ( url_type == "relativeToHTML" ) {

        return source_url;

      } else {

        return urlBase + source_url;

      }

    };

    // toplevel loader function, delegates to handle_children

    function handle_objects() {

      handle_children( result.scene, data.objects );

    }

    // handle all the children from the loaded json and attach them to given parent

    function handle_children( parent, children ) {

      var mat, dst, pos, rot, scl, quat;

      for ( var objID in children ) {

        // check by id if child has already been handled,
        // if not, create new object

        var object = result.objects[ objID ];
        var objJSON = children[ objID ];

        if ( object === undefined ) {

          // meshes

          if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

            if ( objJSON.loading === undefined ) {

              var reservedTypes = {
                "type": 1, "url": 1, "material": 1,
                "position": 1, "rotation": 1, "scale" : 1,
                "visible": 1, "children": 1, "userData": 1,
                "skin": 1, "morph": 1, "mirroredLoop": 1, "duration": 1
              };

              var loaderParameters = {};

              for ( var parType in objJSON ) {

                if ( ! ( parType in reservedTypes ) ) {

                  loaderParameters[ parType ] = objJSON[ parType ];

                }

              }

              material = result.materials[ objJSON.material ];

              objJSON.loading = true;

              var loader = scope.hierarchyHandlers[ objJSON.type ][ "loaderObject" ];

              // ColladaLoader

              if ( loader.options ) {

                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

              // UTF8Loader
              // OBJLoader

              } else {

                loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );

              }

            }

          } else if ( objJSON.geometry !== undefined ) {

            geometry = result.geometries[ objJSON.geometry ];

            // geometry already loaded

            if ( geometry ) {

              var needsTangents = false;

              material = result.materials[ objJSON.material ];
              needsTangents = material instanceof THREE.ShaderMaterial;

              pos = objJSON.position;
              rot = objJSON.rotation;
              scl = objJSON.scale;
              mat = objJSON.matrix;
              quat = objJSON.quaternion;

              // use materials from the model file
              // if there is no material specified in the object

              if ( ! objJSON.material ) {

                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

              }

              // use materials from the model file
              // if there is just empty face material
              // (must create new material as each model has its own face material)

              if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {

                material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

              }

              if ( material instanceof THREE.MeshFaceMaterial ) {

                for ( var i = 0; i < material.materials.length; i ++ ) {

                  needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );

                }

              }

              if ( needsTangents ) {

                geometry.computeTangents();

              }

              if ( objJSON.skin ) {

                object = new THREE.SkinnedMesh( geometry, material );

              } else if ( objJSON.morph ) {

                object = new THREE.MorphAnimMesh( geometry, material );

                if ( objJSON.duration !== undefined ) {

                  object.duration = objJSON.duration;

                }

                if ( objJSON.time !== undefined ) {

                  object.time = objJSON.time;

                }

                if ( objJSON.mirroredLoop !== undefined ) {

                  object.mirroredLoop = objJSON.mirroredLoop;

                }

                if ( material.morphNormals ) {

                  geometry.computeMorphNormals();

                }

              } else {

                object = new THREE.Mesh( geometry, material );

              }

              object.name = objID;

              if ( mat ) {

                object.matrixAutoUpdate = false;
                object.matrix.set(
                  mat[0],  mat[1],  mat[2],  mat[3],
                  mat[4],  mat[5],  mat[6],  mat[7],
                  mat[8],  mat[9],  mat[10], mat[11],
                  mat[12], mat[13], mat[14], mat[15]
                );

              } else {

                object.position.fromArray( pos );

                if ( quat ) {

                  object.quaternion.fromArray( quat );

                } else {

                  object.rotation.fromArray( rot );

                }

                object.scale.fromArray( scl );

              }

              object.visible = objJSON.visible;
              object.castShadow = objJSON.castShadow;
              object.receiveShadow = objJSON.receiveShadow;

              parent.add( object );

              result.objects[ objID ] = object;

            }

          // lights

          } else if ( objJSON.type === "AmbientLight" || objJSON.type === "PointLight" ||
            objJSON.type === "DirectionalLight" || objJSON.type === "SpotLight" ||
            objJSON.type === "HemisphereLight" || objJSON.type === "AreaLight" ) {

            var color = objJSON.color;
            var intensity = objJSON.intensity;
            var distance = objJSON.distance;
            var position = objJSON.position;
            var rotation = objJSON.rotation;

            switch ( objJSON.type ) {

              case 'AmbientLight':
                light = new THREE.AmbientLight( color );
                break;

              case 'PointLight':
                light = new THREE.PointLight( color, intensity, distance );
                light.position.fromArray( position );
                break;

              case 'DirectionalLight':
                light = new THREE.DirectionalLight( color, intensity );
                light.position.fromArray( objJSON.direction );
                break;

              case 'SpotLight':
                light = new THREE.SpotLight( color, intensity, distance, 1 );
                light.angle = objJSON.angle;
                light.position.fromArray( position );
                light.target.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
                light.target.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
                break;

              case 'HemisphereLight':
                light = new THREE.DirectionalLight( color, intensity, distance );
                light.target.set( position[ 0 ], position[ 1 ] - distance, position[ 2 ] );
                light.target.applyEuler( new THREE.Euler( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ], 'XYZ' ) );
                break;

              case 'AreaLight':
                light = new THREE.AreaLight(color, intensity);
                light.position.fromArray( position );
                light.width = objJSON.size;
                light.height = objJSON.size_y;
                break;

            }

            parent.add( light );

            light.name = objID;
            result.lights[ objID ] = light;
            result.objects[ objID ] = light;

          // cameras

          } else if ( objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera" ) {

            pos = objJSON.position;
            rot = objJSON.rotation;
            quat = objJSON.quaternion;

            if ( objJSON.type === "PerspectiveCamera" ) {

              camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );

            } else if ( objJSON.type === "OrthographicCamera" ) {

              camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );

            }

            camera.name = objID;
            camera.position.fromArray( pos );

            if ( quat !== undefined ) {

              camera.quaternion.fromArray( quat );

            } else if ( rot !== undefined ) {

              camera.rotation.fromArray( rot );

            }

            parent.add( camera );

            result.cameras[ objID ] = camera;
            result.objects[ objID ] = camera;

          // pure Object3D

          } else {

            pos = objJSON.position;
            rot = objJSON.rotation;
            scl = objJSON.scale;
            quat = objJSON.quaternion;

            object = new THREE.Object3D();
            object.name = objID;
            object.position.fromArray( pos );

            if ( quat ) {

              object.quaternion.fromArray( quat );

            } else {

              object.rotation.fromArray( rot );

            }

            object.scale.fromArray( scl );
            object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;

            parent.add( object );

            result.objects[ objID ] = object;
            result.empties[ objID ] = object;

          }

          if ( object ) {

            if ( objJSON.userData !== undefined ) {

              for ( var key in objJSON.userData ) {

                var value = objJSON.userData[ key ];
                object.userData[ key ] = value;

              }

            }

            if ( objJSON.groups !== undefined ) {

              for ( var i = 0; i < objJSON.groups.length; i ++ ) {

                var groupID = objJSON.groups[ i ];

                if ( result.groups[ groupID ] === undefined ) {

                  result.groups[ groupID ] = [];

                }

                result.groups[ groupID ].push( objID );

              }

            }

          }

        }

        if ( object !== undefined && objJSON.children !== undefined ) {

          handle_children( object, objJSON.children );

        }

      }

    };

    function handle_mesh( geo, mat, id ) {

      result.geometries[ id ] = geo;
      result.face_materials[ id ] = mat;
      handle_objects();

    };

    function handle_hierarchy( node, id, parent, material, obj ) {

      var p = obj.position;
      var r = obj.rotation;
      var q = obj.quaternion;
      var s = obj.scale;

      node.position.fromArray( p );

      if ( q ) {

        node.quaternion.fromArray( q );

      } else {

        node.rotation.fromArray( r );

      }

      node.scale.fromArray( s );

      // override children materials
      // if object material was specified in JSON explicitly

      if ( material ) {

        node.traverse( function ( child ) {

          child.material = material;

        } );

      }

      // override children visibility
      // with root node visibility as specified in JSON

      var visible = ( obj.visible !== undefined ) ? obj.visible : true;

      node.traverse( function ( child ) {

        child.visible = visible;

      } );

      parent.add( node );

      node.name = id;

      result.objects[ id ] = node;
      handle_objects();

    };

    function create_callback_geometry( id ) {

      return function ( geo, mat ) {

        geo.name = id;

        handle_mesh( geo, mat, id );

        counter_models -= 1;

        scope.onLoadComplete();

        async_callback_gate();

      }

    };

    function create_callback_hierachy( id, parent, material, obj ) {

      return function ( event ) {

        var result;

        // loaders which use EventDispatcher

        if ( event.content ) {

          result = event.content;

        // ColladaLoader

        } else if ( event.dae ) {

          result = event.scene;


        // UTF8Loader

        } else {

          result = event;

        }

        handle_hierarchy( result, id, parent, material, obj );

        counter_models -= 1;

        scope.onLoadComplete();

        async_callback_gate();

      }

    };

    function create_callback_embed( id ) {

      return function ( geo, mat ) {

        geo.name = id;

        result.geometries[ id ] = geo;
        result.face_materials[ id ] = mat;

      }

    };

    function async_callback_gate() {

      var progress = {

        totalModels : total_models,
        totalTextures : total_textures,
        loadedModels : total_models - counter_models,
        loadedTextures : total_textures - counter_textures

      };

      scope.callbackProgress( progress, result );

      scope.onLoadProgress();

      if ( counter_models === 0 && counter_textures === 0 ) {

        finalize();
        callbackFinished( result );

      }

    };

    function finalize() {

      // take care of targets which could be asynchronously loaded objects

      for ( var i = 0; i < target_array.length; i ++ ) {

        var ta = target_array[ i ];

        var target = result.objects[ ta.targetName ];

        if ( target ) {

          ta.object.target = target;

        } else {

          // if there was error and target of specified name doesn't exist in the scene file
          // create instead dummy target
          // (target must be added to scene explicitly as parent is already added)

          ta.object.target = new THREE.Object3D();
          result.scene.add( ta.object.target );

        }

        ta.object.target.userData.targetInverse = ta.object;

      }

    };

    var callbackTexture = function ( count ) {

      counter_textures -= count;
      async_callback_gate();

      scope.onLoadComplete();

    };

    // must use this instead of just directly calling callbackTexture
    // because of closure in the calling context loop

    var generateTextureCallback = function ( count ) {

      return function () {

        callbackTexture( count );

      };

    };

    function traverse_json_hierarchy( objJSON, callback ) {

      callback( objJSON );

      if ( objJSON.children !== undefined ) {

        for ( var objChildID in objJSON.children ) {

          traverse_json_hierarchy( objJSON.children[ objChildID ], callback );

        }

      }

    };

    // first go synchronous elements

    // fogs

    var fogID, fogJSON;

    for ( fogID in data.fogs ) {

      fogJSON = data.fogs[ fogID ];

      if ( fogJSON.type === "linear" ) {

        fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );

      } else if ( fogJSON.type === "exp2" ) {

        fog = new THREE.FogExp2( 0x000000, fogJSON.density );

      }

      color = fogJSON.color;
      fog.color.setRGB( color[0], color[1], color[2] );

      result.fogs[ fogID ] = fog;

    }

    // now come potentially asynchronous elements

    // geometries

    // count how many geometries will be loaded asynchronously

    var geoID, geoJSON;

    for ( geoID in data.geometries ) {

      geoJSON = data.geometries[ geoID ];

      if ( geoJSON.type in this.geometryHandlers ) {

        counter_models += 1;

        scope.onLoadStart();

      }

    }

    // count how many hierarchies will be loaded asynchronously

    for ( var objID in data.objects ) {

      traverse_json_hierarchy( data.objects[ objID ], function ( objJSON ) {

        if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlers ) ) {

          counter_models += 1;

          scope.onLoadStart();

        }

      });

    }

    total_models = counter_models;

    for ( geoID in data.geometries ) {

      geoJSON = data.geometries[ geoID ];

      if ( geoJSON.type === "cube" ) {

        geometry = new THREE.BoxGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type === "plane" ) {

        geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type === "sphere" ) {

        geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type === "cylinder" ) {

        geometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type === "torus" ) {

        geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type === "icosahedron" ) {

        geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );
        geometry.name = geoID;
        result.geometries[ geoID ] = geometry;

      } else if ( geoJSON.type in this.geometryHandlers ) {

        var loaderParameters = {};

        for ( var parType in geoJSON ) {

          if ( parType !== "type" && parType !== "url" ) {

            loaderParameters[ parType ] = geoJSON[ parType ];

          }

        }

        var loader = this.geometryHandlers[ geoJSON.type ][ "loaderObject" ];
        loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );

      } else if ( geoJSON.type === "embedded" ) {

        var modelJson = data.embeds[ geoJSON.id ],
          texture_path = "";

        // pass metadata along to jsonLoader so it knows the format version

        modelJson.metadata = data.metadata;

        if ( modelJson ) {

          var jsonLoader = this.geometryHandlers[ "ascii" ][ "loaderObject" ];
          var model = jsonLoader.parse( modelJson, texture_path );
          create_callback_embed( geoID )( model.geometry, model.materials );

        }

      }

    }

    // textures

    // count how many textures will be loaded asynchronously

    var textureID, textureJSON;

    for ( textureID in data.textures ) {

      textureJSON = data.textures[ textureID ];

      if ( textureJSON.url instanceof Array ) {

        counter_textures += textureJSON.url.length;

        for( var n = 0; n < textureJSON.url.length; n ++ ) {

          scope.onLoadStart();

        }

      } else {

        counter_textures += 1;

        scope.onLoadStart();

      }

    }

    total_textures = counter_textures;

    for ( textureID in data.textures ) {

      textureJSON = data.textures[ textureID ];

      if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined ) {

        textureJSON.mapping = new THREE[ textureJSON.mapping ]();

      }

      if ( textureJSON.url instanceof Array ) {

        var count = textureJSON.url.length;
        var url_array = [];

        for( var i = 0; i < count; i ++ ) {

          url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );

        }

        var isCompressed = /\.dds$/i.test( url_array[ 0 ] );

        if ( isCompressed ) {

          texture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

        } else {

          texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

        }

      } else {

        var isCompressed = /\.dds$/i.test( textureJSON.url );
        var fullUrl = get_url( textureJSON.url, data.urlBaseType );
        var textureCallback = generateTextureCallback( 1 );

        if ( isCompressed ) {

          texture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );

        } else {

          texture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );

        }

        if ( THREE[ textureJSON.minFilter ] !== undefined )
          texture.minFilter = THREE[ textureJSON.minFilter ];

        if ( THREE[ textureJSON.magFilter ] !== undefined )
          texture.magFilter = THREE[ textureJSON.magFilter ];

        if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;

        if ( textureJSON.repeat ) {

          texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );

          if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
          if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

        }

        if ( textureJSON.offset ) {

          texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );

        }

        // handle wrap after repeat so that default repeat can be overriden

        if ( textureJSON.wrap ) {

          var wrapMap = {
            "repeat": THREE.RepeatWrapping,
            "mirror": THREE.MirroredRepeatWrapping
          }

          if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];
          if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];

        }

      }

      result.textures[ textureID ] = texture;

    }

    // materials

    var matID, matJSON;
    var parID;

    for ( matID in data.materials ) {

      matJSON = data.materials[ matID ];

      for ( parID in matJSON.parameters ) {

        if ( parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap" ) {

          matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];

        } else if ( parID === "shading" ) {

          matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === "flat" ) ? THREE.FlatShading : THREE.SmoothShading;

        } else if ( parID === "side" ) {

          if ( matJSON.parameters[ parID ] == "double" ) {

            matJSON.parameters[ parID ] = THREE.DoubleSide;

          } else if ( matJSON.parameters[ parID ] == "back" ) {

            matJSON.parameters[ parID ] = THREE.BackSide;

          } else {

            matJSON.parameters[ parID ] = THREE.FrontSide;

          }

        } else if ( parID === "blending" ) {

          matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;

        } else if ( parID === "combine" ) {

          matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;

        } else if ( parID === "vertexColors" ) {

          if ( matJSON.parameters[ parID ] == "face" ) {

            matJSON.parameters[ parID ] = THREE.FaceColors;

          // default to vertex colors if "vertexColors" is anything else face colors or 0 / null / false

          } else if ( matJSON.parameters[ parID ] ) {

            matJSON.parameters[ parID ] = THREE.VertexColors;

          }

        } else if ( parID === "wrapRGB" ) {

          var v3 = matJSON.parameters[ parID ];
          matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );

        }

      }

      if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {

        matJSON.parameters.transparent = true;

      }

      if ( matJSON.parameters.normalMap ) {

        var shader = THREE.ShaderLib[ "normalmap" ];
        var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

        var diffuse = matJSON.parameters.color;
        var specular = matJSON.parameters.specular;
        var ambient = matJSON.parameters.ambient;
        var shininess = matJSON.parameters.shininess;

        uniforms[ "tNormal" ].value = result.textures[ matJSON.parameters.normalMap ];

        if ( matJSON.parameters.normalScale ) {

          uniforms[ "uNormalScale" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );

        }

        if ( matJSON.parameters.map ) {

          uniforms[ "tDiffuse" ].value = matJSON.parameters.map;
          uniforms[ "enableDiffuse" ].value = true;

        }

        if ( matJSON.parameters.envMap ) {

          uniforms[ "tCube" ].value = matJSON.parameters.envMap;
          uniforms[ "enableReflection" ].value = true;
          uniforms[ "reflectivity" ].value = matJSON.parameters.reflectivity;

        }

        if ( matJSON.parameters.lightMap ) {

          uniforms[ "tAO" ].value = matJSON.parameters.lightMap;
          uniforms[ "enableAO" ].value = true;

        }

        if ( matJSON.parameters.specularMap ) {

          uniforms[ "tSpecular" ].value = result.textures[ matJSON.parameters.specularMap ];
          uniforms[ "enableSpecular" ].value = true;

        }

        if ( matJSON.parameters.displacementMap ) {

          uniforms[ "tDisplacement" ].value = result.textures[ matJSON.parameters.displacementMap ];
          uniforms[ "enableDisplacement" ].value = true;

          uniforms[ "uDisplacementBias" ].value = matJSON.parameters.displacementBias;
          uniforms[ "uDisplacementScale" ].value = matJSON.parameters.displacementScale;

        }

        uniforms[ "diffuse" ].value.setHex( diffuse );
        uniforms[ "specular" ].value.setHex( specular );
        uniforms[ "ambient" ].value.setHex( ambient );

        uniforms[ "shininess" ].value = shininess;

        if ( matJSON.parameters.opacity ) {

          uniforms[ "opacity" ].value = matJSON.parameters.opacity;

        }

        var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };

        material = new THREE.ShaderMaterial( parameters );

      } else {

        material = new THREE[ matJSON.type ]( matJSON.parameters );

      }

      material.name = matID;

      result.materials[ matID ] = material;

    }

    // second pass through all materials to initialize MeshFaceMaterials
    // that could be referring to other materials out of order

    for ( matID in data.materials ) {

      matJSON = data.materials[ matID ];

      if ( matJSON.parameters.materials ) {

        var materialArray = [];

        for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {

          var label = matJSON.parameters.materials[ i ];
          materialArray.push( result.materials[ label ] );

        }

        result.materials[ matID ].materials = materialArray;

      }

    }

    // objects ( synchronous init of procedural primitives )

    handle_objects();

    // defaults

    if ( result.cameras && data.defaults.camera ) {

      result.currentCamera = result.cameras[ data.defaults.camera ];

    }

    if ( result.fogs && data.defaults.fog ) {

      result.scene.fog = result.fogs[ data.defaults.fog ];

    }

    // synchronous callback

    scope.callbackSync( result );

    // just in case there are no async elements

    async_callback_gate();

  }

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.TextureLoader = function ( manager ) {

  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.TextureLoader.prototype = {

  constructor: THREE.TextureLoader,

  load: function ( url, onLoad, onProgress, onError ) {

    var scope = this;

    var loader = new THREE.ImageLoader( scope.manager );
    loader.setCrossOrigin( this.crossOrigin );
    loader.load( url, function ( image ) {

      var texture = new THREE.Texture( image );
      texture.needsUpdate = true;

      if ( onLoad !== undefined ) {

        onLoad( texture );

      }

    } );

  },

  setCrossOrigin: function ( value ) {

    this.crossOrigin = value;

  }

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Material = function () {

  this.id = THREE.MaterialIdCount ++;
  this.uuid = THREE.Math.generateUUID();

  this.name = '';

  this.side = THREE.FrontSide;

  this.opacity = 1;
  this.transparent = false;

  this.blending = THREE.NormalBlending;

  this.blendSrc = THREE.SrcAlphaFactor;
  this.blendDst = THREE.OneMinusSrcAlphaFactor;
  this.blendEquation = THREE.AddEquation;

  this.depthTest = true;
  this.depthWrite = true;

  this.polygonOffset = false;
  this.polygonOffsetFactor = 0;
  this.polygonOffsetUnits = 0;

  this.alphaTest = 0;

  this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

  this.visible = true;

  this.needsUpdate = true;

};

THREE.Material.prototype = {

  constructor: THREE.Material,

  setValues: function ( values ) {
    if ( values === undefined ) return;

    for ( var key in values ) {

      var newValue = values[ key ];

      if ( newValue === undefined ) {

        console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
        continue;

      }

      if ( key in this ) {

        var currentValue = this[ key ];

        if ( currentValue instanceof THREE.Color ) {

          currentValue.set( newValue );

        } else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

          currentValue.copy( newValue );

        } else if ( key == 'overdraw') {

          // ensure overdraw is backwards-compatable with legacy boolean type
          this[ key ] = Number(newValue);

        } else {

          this[ key ] = newValue;

        }

      }

    }

  },

  clone: function ( material ) {

    if ( material === undefined ) material = new THREE.Material();

    material.name = this.name;

    material.side = this.side;

    material.opacity = this.opacity;
    material.transparent = this.transparent;

    material.blending = this.blending;

    material.blendSrc = this.blendSrc;
    material.blendDst = this.blendDst;
    material.blendEquation = this.blendEquation;

    material.depthTest = this.depthTest;
    material.depthWrite = this.depthWrite;

    material.polygonOffset = this.polygonOffset;
    material.polygonOffsetFactor = this.polygonOffsetFactor;
    material.polygonOffsetUnits = this.polygonOffsetUnits;

    material.alphaTest = this.alphaTest;

    material.overdraw = this.overdraw;

    material.visible = this.visible;

    return material;

  },

  dispose: function () {

    this.dispatchEvent( { type: 'dispose' } );

  }

};

THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );

THREE.MaterialIdCount = 0;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round",
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineBasicMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff );

  this.linewidth = 1;
  this.linecap = 'round';
  this.linejoin = 'round';

  this.vertexColors = false;

  this.fog = true;

  this.setValues( parameters );

};

THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineBasicMaterial.prototype.clone = function () {

  var material = new THREE.LineBasicMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );

  material.linewidth = this.linewidth;
  material.linecap = this.linecap;
  material.linejoin = this.linejoin;

  material.vertexColors = this.vertexColors;

  material.fog = this.fog;

  return material;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>,
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineDashedMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff );

  this.linewidth = 1;

  this.scale = 1;
  this.dashSize = 3;
  this.gapSize = 1;

  this.vertexColors = false;

  this.fog = true;

  this.setValues( parameters );

};

THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineDashedMaterial.prototype.clone = function () {

  var material = new THREE.LineDashedMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );

  material.linewidth = this.linewidth;

  material.scale = this.scale;
  material.dashSize = this.dashSize;
  material.gapSize = this.gapSize;

  material.vertexColors = this.vertexColors;

  material.fog = this.fog;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshBasicMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff ); // emissive

  this.map = null;

  this.lightMap = null;

  this.specularMap = null;

  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;

  this.fog = true;

  this.shading = THREE.SmoothShading;

  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';

  this.vertexColors = THREE.NoColors;

  this.skinning = false;
  this.morphTargets = false;

  this.setValues( parameters );

};

THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshBasicMaterial.prototype.clone = function () {

  var material = new THREE.MeshBasicMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );

  material.map = this.map;

  material.lightMap = this.lightMap;

  material.specularMap = this.specularMap;

  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;

  material.fog = this.fog;

  material.shading = this.shading;

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;

  material.vertexColors = this.vertexColors;

  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshLambertMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff ); // diffuse
  this.ambient = new THREE.Color( 0xffffff );
  this.emissive = new THREE.Color( 0x000000 );

  this.wrapAround = false;
  this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

  this.map = null;

  this.lightMap = null;

  this.specularMap = null;

  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;

  this.fog = true;

  this.shading = THREE.SmoothShading;

  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';

  this.vertexColors = THREE.NoColors;

  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;

  this.setValues( parameters );

};

THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshLambertMaterial.prototype.clone = function () {

  var material = new THREE.MeshLambertMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );
  material.ambient.copy( this.ambient );
  material.emissive.copy( this.emissive );

  material.wrapAround = this.wrapAround;
  material.wrapRGB.copy( this.wrapRGB );

  material.map = this.map;

  material.lightMap = this.lightMap;

  material.specularMap = this.specularMap;

  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;

  material.fog = this.fog;

  material.shading = this.shading;

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;

  material.vertexColors = this.vertexColors;

  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshPhongMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff ); // diffuse
  this.ambient = new THREE.Color( 0xffffff );
  this.emissive = new THREE.Color( 0x000000 );
  this.specular = new THREE.Color( 0x111111 );
  this.shininess = 30;

  this.metal = false;

  this.wrapAround = false;
  this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

  this.map = null;

  this.lightMap = null;

  this.bumpMap = null;
  this.bumpScale = 1;

  this.normalMap = null;
  this.normalScale = new THREE.Vector2( 1, 1 );

  this.specularMap = null;

  this.envMap = null;
  this.combine = THREE.MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;

  this.fog = true;

  this.shading = THREE.SmoothShading;

  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';

  this.vertexColors = THREE.NoColors;

  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;

  this.setValues( parameters );

};

THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshPhongMaterial.prototype.clone = function () {

  var material = new THREE.MeshPhongMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );
  material.ambient.copy( this.ambient );
  material.emissive.copy( this.emissive );
  material.specular.copy( this.specular );
  material.shininess = this.shininess;

  material.metal = this.metal;

  material.wrapAround = this.wrapAround;
  material.wrapRGB.copy( this.wrapRGB );

  material.map = this.map;

  material.lightMap = this.lightMap;

  material.bumpMap = this.bumpMap;
  material.bumpScale = this.bumpScale;

  material.normalMap = this.normalMap;
  material.normalScale.copy( this.normalScale );

  material.specularMap = this.specularMap;

  material.envMap = this.envMap;
  material.combine = this.combine;
  material.reflectivity = this.reflectivity;
  material.refractionRatio = this.refractionRatio;

  material.fog = this.fog;

  material.shading = this.shading;

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;
  material.wireframeLinecap = this.wireframeLinecap;
  material.wireframeLinejoin = this.wireframeLinejoin;

  material.vertexColors = this.vertexColors;

  material.skinning = this.skinning;
  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshDepthMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.morphTargets = false;
  this.wireframe = false;
  this.wireframeLinewidth = 1;

  this.setValues( parameters );

};

THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshDepthMaterial.prototype.clone = function () {

  var material = new THREE.MeshDepthMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  shading: THREE.FlatShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshNormalMaterial = function ( parameters ) {

  THREE.Material.call( this, parameters );

  this.shading = THREE.FlatShading;

  this.wireframe = false;
  this.wireframeLinewidth = 1;

  this.morphTargets = false;

  this.setValues( parameters );

};

THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshNormalMaterial.prototype.clone = function () {

  var material = new THREE.MeshNormalMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.shading = this.shading;

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MeshFaceMaterial = function ( materials ) {

  this.materials = materials instanceof Array ? materials : [];

};

THREE.MeshFaceMaterial.prototype.clone = function () {

  var material = new THREE.MeshFaceMaterial();

  for ( var i = 0; i < this.materials.length; i ++ ) {

    material.materials.push( this.materials[ i ].clone() );

  }

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  vertexColors: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.ParticleSystemMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff );

  this.map = null;

  this.size = 1;
  this.sizeAttenuation = true;

  this.vertexColors = false;

  this.fog = true;

  this.setValues( parameters );

};

THREE.ParticleSystemMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ParticleSystemMaterial.prototype.clone = function () {

  var material = new THREE.ParticleSystemMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );

  material.map = this.map;

  material.size = this.size;
  material.sizeAttenuation = this.sizeAttenuation;

  material.vertexColors = this.vertexColors;

  material.fog = this.fog;

  return material;

};

// backwards compatibility

THREE.ParticleBasicMaterial = THREE.ParticleSystemMaterial;

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
 *
 *  defines: { "label" : "value" },
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.ShaderMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.fragmentShader = "void main() {}";
  this.vertexShader = "void main() {}";
  this.uniforms = {};
  this.defines = {};
  this.attributes = null;

  this.shading = THREE.SmoothShading;

  this.linewidth = 1;

  this.wireframe = false;
  this.wireframeLinewidth = 1;

  this.fog = false; // set to use scene fog

  this.lights = false; // set to use scene lights

  this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

  this.skinning = false; // set to use skinning attribute streams

  this.morphTargets = false; // set to use morph targets
  this.morphNormals = false; // set to use morph normals

  // When rendered geometry doesn't include these attributes but the material does,
  // use these default values in WebGL. This avoids errors when buffer data is missing.
  this.defaultAttributeValues = {
    "color" : [ 1, 1, 1 ],
    "uv" : [ 0, 0 ],
    "uv2" : [ 0, 0 ]
  };

  this.index0AttributeName = undefined;

  this.setValues( parameters );

};

THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ShaderMaterial.prototype.clone = function () {

  var material = new THREE.ShaderMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.fragmentShader = this.fragmentShader;
  material.vertexShader = this.vertexShader;

  material.uniforms = THREE.UniformsUtils.clone( this.uniforms );

  material.attributes = this.attributes;
  material.defines = this.defines;

  material.shading = this.shading;

  material.wireframe = this.wireframe;
  material.wireframeLinewidth = this.wireframeLinewidth;

  material.fog = this.fog;

  material.lights = this.lights;

  material.vertexColors = this.vertexColors;

  material.skinning = this.skinning;

  material.morphTargets = this.morphTargets;
  material.morphNormals = this.morphNormals;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RawShaderMaterial = function ( parameters ) {

  THREE.ShaderMaterial.call( this, parameters );

};

THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );

THREE.RawShaderMaterial.prototype.clone = function () {

  var material = new THREE.RawShaderMaterial();

  THREE.ShaderMaterial.prototype.clone.call( this, material );

  return material;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  uvOffset: new THREE.Vector2(),
 *  uvScale: new THREE.Vector2(),
 *
 *  fog: <bool>
 * }
 */

THREE.SpriteMaterial = function ( parameters ) {

  THREE.Material.call( this );

  // defaults

  this.color = new THREE.Color( 0xffffff );
  this.map = null;

  this.rotation = 0;

  this.fog = false;

  // set parameters

  this.setValues( parameters );

};

THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteMaterial.prototype.clone = function () {

  var material = new THREE.SpriteMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );
  material.map = this.map;

  material.rotation = this.rotation;

  material.fog = this.fog;

  return material;

};

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <hex>,
 *  program: <function>,
 *  opacity: <float>,
 *  blending: THREE.NormalBlending
 * }
 */

THREE.SpriteCanvasMaterial = function ( parameters ) {

  THREE.Material.call( this );

  this.color = new THREE.Color( 0xffffff );
  this.program = function ( context, color ) {};

  this.setValues( parameters );

};

THREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteCanvasMaterial.prototype.clone = function () {

  var material = new THREE.SpriteCanvasMaterial();

  THREE.Material.prototype.clone.call( this, material );

  material.color.copy( this.color );
  material.program = this.program;

  return material;

};

// backwards compatibility

THREE.ParticleCanvasMaterial = THREE.SpriteCanvasMaterial;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

  this.id = THREE.TextureIdCount ++;
  this.uuid = THREE.Math.generateUUID();

  this.name = '';

  this.image = image;
  this.mipmaps = [];

  this.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();

  this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
  this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

  this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
  this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

  this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

  this.format = format !== undefined ? format : THREE.RGBAFormat;
  this.type = type !== undefined ? type : THREE.UnsignedByteType;

  this.offset = new THREE.Vector2( 0, 0 );
  this.repeat = new THREE.Vector2( 1, 1 );

  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

  this._needsUpdate = false;
  this.onUpdate = null;

};

THREE.Texture.prototype = {

  constructor: THREE.Texture,

  get needsUpdate () {

    return this._needsUpdate;

  },

  set needsUpdate ( value ) {

    if ( value === true ) this.update();

    this._needsUpdate = value;

  },

  clone: function ( texture ) {

    if ( texture === undefined ) texture = new THREE.Texture();

    texture.image = this.image;
    texture.mipmaps = this.mipmaps.slice(0);

    texture.mapping = this.mapping;

    texture.wrapS = this.wrapS;
    texture.wrapT = this.wrapT;

    texture.magFilter = this.magFilter;
    texture.minFilter = this.minFilter;

    texture.anisotropy = this.anisotropy;

    texture.format = this.format;
    texture.type = this.type;

    texture.offset.copy( this.offset );
    texture.repeat.copy( this.repeat );

    texture.generateMipmaps = this.generateMipmaps;
    texture.premultiplyAlpha = this.premultiplyAlpha;
    texture.flipY = this.flipY;
    texture.unpackAlignment = this.unpackAlignment;

    return texture;

  },

  update: function () {

    this.dispatchEvent( { type: 'update' } );

  },

  dispose: function () {

    this.dispatchEvent( { type: 'dispose' } );

  }

};

THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );

THREE.TextureIdCount = 0;

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  this.image = { width: width, height: height };
  this.mipmaps = mipmaps;

  this.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file

};

THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.CompressedTexture.prototype.clone = function () {

  var texture = new THREE.CompressedTexture();

  THREE.Texture.prototype.clone.call( this, texture );

  return texture;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

  this.image = { data: data, width: width, height: height };

};

THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.DataTexture.prototype.clone = function () {

  var texture = new THREE.DataTexture();

  THREE.Texture.prototype.clone.call( this, texture );

  return texture;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ParticleSystem = function ( geometry, material ) {

  THREE.Object3D.call( this );

  this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
  this.material = material !== undefined ? material : new THREE.ParticleSystemMaterial( { color: Math.random() * 0xffffff } );

  this.sortParticles = false;
  this.frustumCulled = false;

};

THREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );

THREE.ParticleSystem.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );

  object.sortParticles = this.sortParticles;

  THREE.Object3D.prototype.clone.call( this, object );

  return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Line = function ( geometry, material, type ) {

  THREE.Object3D.call( this );

  this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
  this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

  this.type = ( type !== undefined ) ? type : THREE.LineStrip;

};

THREE.LineStrip = 0;
THREE.LinePieces = 1;

THREE.Line.prototype = Object.create( THREE.Object3D.prototype );

THREE.Line.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );

  THREE.Object3D.prototype.clone.call( this, object );

  return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

THREE.Mesh = function ( geometry, material ) {

  THREE.Object3D.call( this );

  this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
  this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

  this.updateMorphTargets();

};

THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );

THREE.Mesh.prototype.updateMorphTargets = function () {

  if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

    this.morphTargetBase = -1;
    this.morphTargetForcedOrder = [];
    this.morphTargetInfluences = [];
    this.morphTargetDictionary = {};

    for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

      this.morphTargetInfluences.push( 0 );
      this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

    }

  }

};

THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

  if ( this.morphTargetDictionary[ name ] !== undefined ) {

    return this.morphTargetDictionary[ name ];

  }

  console.log( "THREE.Mesh.getMorphTargetIndexByName: morph target " + name + " does not exist. Returning 0." );

  return 0;

};

THREE.Mesh.prototype.clone = function ( object, recursive ) {

  if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );

  THREE.Object3D.prototype.clone.call( this, object, recursive );

  return object;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Bone = function( belongsToSkin ) {

  THREE.Object3D.call( this );

  this.skin = belongsToSkin;
  this.skinMatrix = new THREE.Matrix4();

  this.accumulatedRotWeight = 0;
  this.accumulatedPosWeight = 0;
  this.accumulatedSclWeight = 0;

};

THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );

THREE.Bone.prototype.update = function ( parentSkinMatrix, forceUpdate ) {

  // update local

  if ( this.matrixAutoUpdate ) {

    forceUpdate |= this.updateMatrix();

  }

  // update skin matrix

  if ( forceUpdate || this.matrixWorldNeedsUpdate ) {

    if ( parentSkinMatrix ) {

      this.skinMatrix.multiplyMatrices( parentSkinMatrix, this.matrix );

    } else {

      this.skinMatrix.copy( this.matrix );

    }

    this.matrixWorldNeedsUpdate = false;
    forceUpdate = true;

    // Reset weights to be re-accumulated in the next frame

    this.accumulatedRotWeight = 0;
    this.accumulatedPosWeight = 0;
    this.accumulatedSclWeight = 0;

  }

  // update children

  for ( var i = 0, l = this.children.length; i < l; i ++ ) {

    this.children[ i ].update( this.skinMatrix, forceUpdate );

  }

};


/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 */

THREE.Skeleton = function ( boneList, useVertexTexture ) {

  this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

  // init bones

  this.bones = [];
  this.boneMatrices = [];

  var bone, gbone, p, q, s;

  if ( boneList !== undefined ) {

    for ( var b = 0; b < boneList.length; ++b ) {

      gbone = boneList[ b ];

      p = gbone.pos;
      q = gbone.rotq;
      s = gbone.scl;

      bone = this.addBone();

      bone.name = gbone.name;
      bone.position.set( p[0], p[1], p[2] );
      bone.quaternion.set( q[0], q[1], q[2], q[3] );

      if ( s !== undefined ) {

        bone.scale.set( s[0], s[1], s[2] );

      } else {

        bone.scale.set( 1, 1, 1 );

      }

    }

    for ( var b = 0; b < boneList.length; ++b ) {

      gbone = boneList[ b ];

      if ( gbone.parent !== -1 ) {

        this.bones[ gbone.parent ].add( this.bones[ b ] );

      }

    }

    //

    var nBones = this.bones.length;

    if ( this.useVertexTexture ) {

      // layout (1 matrix = 4 pixels)
      //  RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
      //  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)
      //     16x16 pixel texture max   64 bones (16 * 16 / 4)
      //     32x32 pixel texture max  256 bones (32 * 32 / 4)
      //     64x64 pixel texture max 1024 bones (64 * 64 / 4)

      var size;

      if ( nBones > 256 )
        size = 64;
      else if ( nBones > 64 )
        size = 32;
      else if ( nBones > 16 )
        size = 16;
      else
        size = 8;

      this.boneTextureWidth = size;
      this.boneTextureHeight = size;

      this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
      this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
      this.boneTexture.minFilter = THREE.NearestFilter;
      this.boneTexture.magFilter = THREE.NearestFilter;
      this.boneTexture.generateMipmaps = false;
      this.boneTexture.flipY = false;

    } else {

      this.boneMatrices = new Float32Array( 16 * nBones );

    }

  }

};


THREE.Skeleton.prototype = Object.create( THREE.Mesh.prototype );


THREE.Skeleton.prototype.addBone = function( bone ) {

  if ( bone === undefined ) {

    bone = new THREE.Bone( this );

  }

  this.bones.push( bone );

  return bone;

};


THREE.Skeleton.prototype.calculateInverses = function( bone ) {

  this.boneInverses = [];

  for ( var b = 0, bl = this.bones.length; b < bl; ++b ) {

    var inverse = new THREE.Matrix4();

    inverse.getInverse( this.bones[ b ].skinMatrix );

    this.boneInverses.push( inverse );

  }

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

  THREE.Mesh.call( this, geometry, material );

  this.skeleton = new THREE.Skeleton( this.geometry && this.geometry.bones, useVertexTexture );

  // Add root level bones as children of the mesh

  for ( var b = 0; b < this.skeleton.bones.length; ++b ) {

    var bone = this.skeleton.bones[ b ];

    if ( bone.parent === undefined ) {

      this.add( bone );

    }

  }

  this.identityMatrix = new THREE.Matrix4();

  this.pose();

};


THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.SkinnedMesh.prototype.updateMatrixWorld = function () {

  var offsetMatrix = new THREE.Matrix4();

  return function ( force ) {

    this.matrixAutoUpdate && this.updateMatrix();

    // update matrixWorld

    if ( this.matrixWorldNeedsUpdate || force ) {

      if ( this.parent ) {

        this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

      } else {

        this.matrixWorld.copy( this.matrix );

      }

      this.matrixWorldNeedsUpdate = false;

      force = true;

    }

    // update children

    for ( var i = 0, l = this.children.length; i < l; i ++ ) {

      var child = this.children[ i ];

      if ( child instanceof THREE.Bone ) {

        child.update( this.identityMatrix, false );

      } else {

        child.updateMatrixWorld( true );

      }

    }

    // make a snapshot of the bones' rest position

    if ( this.skeleton.boneInverses === undefined ) {

      this.skeleton.calculateInverses();

    }

    // flatten bone matrices to array

    for ( var b = 0, bl = this.skeleton.bones.length; b < bl; b ++ ) {

      // compute the offset between the current and the original transform;

      // TODO: we could get rid of this multiplication step if the skinMatrix
      // was already representing the offset; however, this requires some
      // major changes to the animation system

      offsetMatrix.multiplyMatrices( this.skeleton.bones[ b ].skinMatrix, this.skeleton.boneInverses[ b ] );
      offsetMatrix.flattenToArrayOffset( this.skeleton.boneMatrices, b * 16 );

    }

    if ( this.skeleton.useVertexTexture ) {

      this.skeleton.boneTexture.needsUpdate = true;

    }

  };

}();

THREE.SkinnedMesh.prototype.pose = function () {

  this.updateMatrixWorld( true );

  this.normalizeSkinWeights();

};

THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {

  if ( this.geometry instanceof THREE.Geometry ) {

    for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {

      var sw = this.geometry.skinWeights[ i ];

      var scale = 1.0 / sw.lengthManhattan();

      if ( scale !== Infinity ) {

        sw.multiplyScalar( scale );

      } else {

        sw.set( 1 ); // this will be normalized by the shader anyway

      }

    }

  } else {

    // skinning weights assumed to be normalized for THREE.BufferGeometry

  }

};

THREE.SkinnedMesh.prototype.clone = function ( object ) {

  if ( object === undefined ) {

    object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );

  }

  THREE.Mesh.prototype.clone.call( this, object );

  return object;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphAnimMesh = function ( geometry, material ) {

  THREE.Mesh.call( this, geometry, material );

  // API

  this.duration = 1000; // milliseconds
  this.mirroredLoop = false;
  this.time = 0;

  // internals

  this.lastKeyframe = 0;
  this.currentKeyframe = 0;

  this.direction = 1;
  this.directionBackwards = false;

  this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );

};

THREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {

  this.startKeyframe = start;
  this.endKeyframe = end;

  this.length = this.endKeyframe - this.startKeyframe + 1;

};

THREE.MorphAnimMesh.prototype.setDirectionForward = function () {

  this.direction = 1;
  this.directionBackwards = false;

};

THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {

  this.direction = -1;
  this.directionBackwards = true;

};

THREE.MorphAnimMesh.prototype.parseAnimations = function () {

  var geometry = this.geometry;

  if ( ! geometry.animations ) geometry.animations = {};

  var firstAnimation, animations = geometry.animations;

  var pattern = /([a-z]+)(\d+)/;

  for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

    var morph = geometry.morphTargets[ i ];
    var parts = morph.name.match( pattern );

    if ( parts && parts.length > 1 ) {

      var label = parts[ 1 ];
      var num = parts[ 2 ];

      if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };

      var animation = animations[ label ];

      if ( i < animation.start ) animation.start = i;
      if ( i > animation.end ) animation.end = i;

      if ( ! firstAnimation ) firstAnimation = label;

    }

  }

  geometry.firstAnimation = firstAnimation;

};

THREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {

  if ( ! this.geometry.animations ) this.geometry.animations = {};

  this.geometry.animations[ label ] = { start: start, end: end };

};

THREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {

  var animation = this.geometry.animations[ label ];

  if ( animation ) {

    this.setFrameRange( animation.start, animation.end );
    this.duration = 1000 * ( ( animation.end - animation.start ) / fps );
    this.time = 0;

  } else {

    console.warn( "animation[" + label + "] undefined" );

  }

};

THREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {

  var frameTime = this.duration / this.length;

  this.time += this.direction * delta;

  if ( this.mirroredLoop ) {

    if ( this.time > this.duration || this.time < 0 ) {

      this.direction *= -1;

      if ( this.time > this.duration ) {

        this.time = this.duration;
        this.directionBackwards = true;

      }

      if ( this.time < 0 ) {

        this.time = 0;
        this.directionBackwards = false;

      }

    }

  } else {

    this.time = this.time % this.duration;

    if ( this.time < 0 ) this.time += this.duration;

  }

  var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );

  if ( keyframe !== this.currentKeyframe ) {

    this.morphTargetInfluences[ this.lastKeyframe ] = 0;
    this.morphTargetInfluences[ this.currentKeyframe ] = 1;

    this.morphTargetInfluences[ keyframe ] = 0;

    this.lastKeyframe = this.currentKeyframe;
    this.currentKeyframe = keyframe;

  }

  var mix = ( this.time % frameTime ) / frameTime;

  if ( this.directionBackwards ) {

    mix = 1 - mix;

  }

  this.morphTargetInfluences[ this.currentKeyframe ] = mix;
  this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;

};

THREE.MorphAnimMesh.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );

  object.duration = this.duration;
  object.mirroredLoop = this.mirroredLoop;
  object.time = this.time;

  object.lastKeyframe = this.lastKeyframe;
  object.currentKeyframe = this.currentKeyframe;

  object.direction = this.direction;
  object.directionBackwards = this.directionBackwards;

  THREE.Mesh.prototype.clone.call( this, object );

  return object;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LOD = function () {

  THREE.Object3D.call( this );

  this.objects = [];

};


THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );

THREE.LOD.prototype.addLevel = function ( object, distance ) {

  if ( distance === undefined ) distance = 0;

  distance = Math.abs( distance );

  for ( var l = 0; l < this.objects.length; l ++ ) {

    if ( distance < this.objects[ l ].distance ) {

      break;

    }

  }

  this.objects.splice( l, 0, { distance: distance, object: object } );
  this.add( object );

};

THREE.LOD.prototype.getObjectForDistance = function ( distance ) {

  for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

    if ( distance < this.objects[ i ].distance ) {

      break;

    }

  }

  return this.objects[ i - 1 ].object;

};

THREE.LOD.prototype.update = function () {

  var v1 = new THREE.Vector3();
  var v2 = new THREE.Vector3();

  return function ( camera ) {

    if ( this.objects.length > 1 ) {

      v1.setFromMatrixPosition( camera.matrixWorld );
      v2.setFromMatrixPosition( this.matrixWorld );

      var distance = v1.distanceTo( v2 );

      this.objects[ 0 ].object.visible = true;

      for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

        if ( distance >= this.objects[ i ].distance ) {

          this.objects[ i - 1 ].object.visible = false;
          this.objects[ i     ].object.visible = true;

        } else {

          break;

        }

      }

      for( ; i < l; i ++ ) {

        this.objects[ i ].object.visible = false;

      }

    }

  };

}();

THREE.LOD.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.LOD();

  THREE.Object3D.prototype.clone.call( this, object );

  for ( var i = 0, l = this.objects.length; i < l; i ++ ) {
    var x = this.objects[i].object.clone();
    x.visible = i === 0;
    object.addLevel( x, this.objects[i].distance );
  }

  return object;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Sprite = ( function () {

  var vertices = new THREE.Float32Attribute( 3, 3 );
  vertices.set( [ - 0.5, - 0.5, 0, 0.5, - 0.5, 0, 0.5, 0.5, 0 ] );

  var geometry = new THREE.BufferGeometry();
  geometry.addAttribute( 'position', vertices );

  return function ( material ) {

    THREE.Object3D.call( this );

    this.geometry = geometry;
    this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

  };

} )();

THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );

/*
 * Custom update matrix
 */

THREE.Sprite.prototype.updateMatrix = function () {

  this.matrix.compose( this.position, this.quaternion, this.scale );

  this.matrixWorldNeedsUpdate = true;

};

THREE.Sprite.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.Sprite( this.material );

  THREE.Object3D.prototype.clone.call( this, object );

  return object;

};

// Backwards compatibility

THREE.Particle = THREE.Sprite;
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Scene = function () {

  THREE.Object3D.call( this );

  this.fog = null;
  this.overrideMaterial = null;

  this.autoUpdate = true; // checked by the renderer
  this.matrixAutoUpdate = false;

  this.__lights = [];

  this.__objectsAdded = [];
  this.__objectsRemoved = [];

};

THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );

THREE.Scene.prototype.__addObject = function ( object ) {

  if ( object instanceof THREE.Light ) {

    if ( this.__lights.indexOf( object ) === - 1 ) {

      this.__lights.push( object );

    }

    if ( object.target && object.target.parent === undefined ) {

      this.add( object.target );

    }

  } else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {

    this.__objectsAdded.push( object );

    // check if previously removed

    var i = this.__objectsRemoved.indexOf( object );

    if ( i !== -1 ) {

      this.__objectsRemoved.splice( i, 1 );

    }

  }

  this.dispatchEvent( { type: 'objectAdded', object: object } );
  object.dispatchEvent( { type: 'addedToScene', scene: this } );

  for ( var c = 0; c < object.children.length; c ++ ) {

    this.__addObject( object.children[ c ] );

  }

};

THREE.Scene.prototype.__removeObject = function ( object ) {

  if ( object instanceof THREE.Light ) {

    var i = this.__lights.indexOf( object );

    if ( i !== -1 ) {

      this.__lights.splice( i, 1 );

    }

    if ( object.shadowCascadeArray ) {

      for ( var x = 0; x < object.shadowCascadeArray.length; x ++ ) {

        this.__removeObject( object.shadowCascadeArray[ x ] );

      }

    }

  } else if ( !( object instanceof THREE.Camera ) ) {

    this.__objectsRemoved.push( object );

    // check if previously added

    var i = this.__objectsAdded.indexOf( object );

    if ( i !== -1 ) {

      this.__objectsAdded.splice( i, 1 );

    }

  }

  this.dispatchEvent( { type: 'objectRemoved', object: object } );
  object.dispatchEvent( { type: 'removedFromScene', scene: this } );

  for ( var c = 0; c < object.children.length; c ++ ) {

    this.__removeObject( object.children[ c ] );

  }

};

THREE.Scene.prototype.clone = function ( object ) {

  if ( object === undefined ) object = new THREE.Scene();

  THREE.Object3D.prototype.clone.call(this, object);

  if ( this.fog !== null ) object.fog = this.fog.clone();
  if ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();

  object.autoUpdate = this.autoUpdate;
  object.matrixAutoUpdate = this.matrixAutoUpdate;

  return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Fog = function ( color, near, far ) {

  this.name = '';

  this.color = new THREE.Color( color );

  this.near = ( near !== undefined ) ? near : 1;
  this.far = ( far !== undefined ) ? far : 1000;

};

THREE.Fog.prototype.clone = function () {

  return new THREE.Fog( this.color.getHex(), this.near, this.far );

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.FogExp2 = function ( color, density ) {

  this.name = '';

  this.color = new THREE.Color( color );
  this.density = ( density !== undefined ) ? density : 0.00025;

};

THREE.FogExp2.prototype.clone = function () {

  return new THREE.FogExp2( this.color.getHex(), this.density );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CanvasRenderer = function ( parameters ) {

  console.log( 'THREE.CanvasRenderer', THREE.REVISION );

  var smoothstep = THREE.Math.smoothstep;

  parameters = parameters || {};

  var _this = this,
  _renderData, _elements, _lights,
  _projector = new THREE.Projector(),

  _canvas = parameters.canvas !== undefined
      ? parameters.canvas
      : document.createElement( 'canvas' ),

  _canvasWidth = _canvas.width,
  _canvasHeight = _canvas.height,
  _canvasWidthHalf = Math.floor( _canvasWidth / 2 ),
  _canvasHeightHalf = Math.floor( _canvasHeight / 2 ),
  
  _context = _canvas.getContext( '2d', {
    alpha: parameters.alpha === true
  } ),

  _clearColor = new THREE.Color( 0x000000 ),
  _clearAlpha = 0,

  _contextGlobalAlpha = 1,
  _contextGlobalCompositeOperation = 0,
  _contextStrokeStyle = null,
  _contextFillStyle = null,
  _contextLineWidth = null,
  _contextLineCap = null,
  _contextLineJoin = null,
  _contextDashSize = null,
  _contextGapSize = 0,

  _camera,

  _v1, _v2, _v3, _v4,
  _v5 = new THREE.RenderableVertex(),
  _v6 = new THREE.RenderableVertex(),

  _v1x, _v1y, _v2x, _v2y, _v3x, _v3y,
  _v4x, _v4y, _v5x, _v5y, _v6x, _v6y,

  _color = new THREE.Color(),
  _color1 = new THREE.Color(),
  _color2 = new THREE.Color(),
  _color3 = new THREE.Color(),
  _color4 = new THREE.Color(),

  _diffuseColor = new THREE.Color(),
  _emissiveColor = new THREE.Color(),

  _lightColor = new THREE.Color(),

  _patterns = {},

  _image, _uvs,
  _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,

  _clipBox = new THREE.Box2(),
  _clearBox = new THREE.Box2(),
  _elemBox = new THREE.Box2(),

  _ambientLight = new THREE.Color(),
  _directionalLights = new THREE.Color(),
  _pointLights = new THREE.Color(),

  _vector3 = new THREE.Vector3(), // Needed for PointLight
  _centroid = new THREE.Vector3(),
  _normal = new THREE.Vector3(),
  _normalViewMatrix = new THREE.Matrix3();

  // dash+gap fallbacks for Firefox and everything else

  if ( _context.setLineDash === undefined ) {

    _context.setLineDash = function () {}

  }

  this.domElement = _canvas;

  this.devicePixelRatio = parameters.devicePixelRatio !== undefined
        ? parameters.devicePixelRatio
        : self.devicePixelRatio !== undefined
          ? self.devicePixelRatio
          : 1;

  this.autoClear = true;
  this.sortObjects = true;
  this.sortElements = true;

  this.info = {

    render: {

      vertices: 0,
      faces: 0

    }

  }

  // WebGLRenderer compatibility

  this.supportsVertexTextures = function () {};
  this.setFaceCulling = function () {};

  this.setSize = function ( width, height, updateStyle ) {

    _canvasWidth = width * this.devicePixelRatio;
    _canvasHeight = height * this.devicePixelRatio;

    _canvas.width = _canvasWidth;
    _canvas.height = _canvasHeight;

    _canvasWidthHalf = Math.floor( _canvasWidth / 2 );
    _canvasHeightHalf = Math.floor( _canvasHeight / 2 );

    if ( updateStyle !== false ) {

      _canvas.style.width = width + 'px';
      _canvas.style.height = height + 'px';

    }

    _clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf ),
    _clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

    _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
    _clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

    _contextGlobalAlpha = 1;
    _contextGlobalCompositeOperation = 0;
    _contextStrokeStyle = null;
    _contextFillStyle = null;
    _contextLineWidth = null;
    _contextLineCap = null;
    _contextLineJoin = null;

    this.setViewport( 0, 0, width, height );

  };

  this.setViewport = function ( x, y, width, height ) {

    var viewportX = x * this.devicePixelRatio;
    var viewportY = y * this.devicePixelRatio;

    var viewportWidth = width * this.devicePixelRatio;
    var viewportHeight = height * this.devicePixelRatio;

    _context.setTransform( viewportWidth / _canvasWidth, 0, 0, - viewportHeight / _canvasHeight, viewportX, _canvasHeight - viewportY );
    _context.translate( _canvasWidthHalf, _canvasHeightHalf );

  };

  this.setScissor = function () {};
  this.enableScissorTest = function () {};

  this.setClearColor = function ( color, alpha ) {

    _clearColor.set( color );
    _clearAlpha = alpha !== undefined ? alpha : 1;

    _clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
    _clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

  };

  this.setClearColorHex = function ( hex, alpha ) {

    console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
    this.setClearColor( hex, alpha );

  };

  this.getMaxAnisotropy = function () {

    return 0;

  };

  this.clear = function () {

    if ( _clearBox.empty() === false ) {

      _clearBox.intersect( _clipBox );
      _clearBox.expandByScalar( 2 );

      if ( _clearAlpha < 1 ) {

        _context.clearRect(
          _clearBox.min.x | 0,
          _clearBox.min.y | 0,
          ( _clearBox.max.x - _clearBox.min.x ) | 0,
          ( _clearBox.max.y - _clearBox.min.y ) | 0
        );

      }

      if ( _clearAlpha > 0 ) {

        setBlending( THREE.NormalBlending );
        setOpacity( 1 );

        setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );

        _context.fillRect(
          _clearBox.min.x | 0,
          _clearBox.min.y | 0,
          ( _clearBox.max.x - _clearBox.min.x ) | 0,
          ( _clearBox.max.y - _clearBox.min.y ) | 0
        );

      }

      _clearBox.makeEmpty();

    }

  };

  // compatibility

  this.clearColor = function () {};
  this.clearDepth = function () {};
  this.clearStencil = function () {};

  this.render = function ( scene, camera ) {

    if ( camera instanceof THREE.Camera === false ) {

      console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );
      return;

    }

    if ( this.autoClear === true ) this.clear();

    _this.info.render.vertices = 0;
    _this.info.render.faces = 0;

    _renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );
    _elements = _renderData.elements;
    _lights = _renderData.lights;
    _camera = camera;

    _normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );

    /* DEBUG
    setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );
    _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );
    */

    calculateLights();

    for ( var e = 0, el = _elements.length; e < el; e ++ ) {

      var element = _elements[ e ];

      var material = element.material;

      if ( material === undefined || material.opacity === 0 ) continue;

      _elemBox.makeEmpty();

      if ( element instanceof THREE.RenderableSprite ) {

        _v1 = element;
        _v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;

        renderSprite( _v1, element, material );

      } else if ( element instanceof THREE.RenderableLine ) {

        _v1 = element.v1; _v2 = element.v2;

        _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
        _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;

        _elemBox.setFromPoints( [
          _v1.positionScreen,
          _v2.positionScreen
        ] );

        if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

          renderLine( _v1, _v2, element, material );

        }

      } else if ( element instanceof THREE.RenderableFace ) {

        _v1 = element.v1; _v2 = element.v2; _v3 = element.v3;

        if ( _v1.positionScreen.z < -1 || _v1.positionScreen.z > 1 ) continue;
        if ( _v2.positionScreen.z < -1 || _v2.positionScreen.z > 1 ) continue;
        if ( _v3.positionScreen.z < -1 || _v3.positionScreen.z > 1 ) continue;

        _v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
        _v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;
        _v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;

        if ( material.overdraw > 0 ) {

          expand( _v1.positionScreen, _v2.positionScreen, material.overdraw );
          expand( _v2.positionScreen, _v3.positionScreen, material.overdraw );
          expand( _v3.positionScreen, _v1.positionScreen, material.overdraw );

        }

        _elemBox.setFromPoints( [
          _v1.positionScreen,
          _v2.positionScreen,
          _v3.positionScreen
        ] );

        if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

          renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );

        }

      }

      /* DEBUG
      setLineWidth( 1 );
      setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );
      _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );
      */

      _clearBox.union( _elemBox );

    }

    /* DEBUG
    setLineWidth( 1 );
    setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );
    _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );
    */

    // _context.setTransform( 1, 0, 0, 1, 0, 0 );

  };

  //

  function calculateLights() {

    _ambientLight.setRGB( 0, 0, 0 );
    _directionalLights.setRGB( 0, 0, 0 );
    _pointLights.setRGB( 0, 0, 0 );

    for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

      var light = _lights[ l ];
      var lightColor = light.color;

      if ( light instanceof THREE.AmbientLight ) {

        _ambientLight.add( lightColor );

      } else if ( light instanceof THREE.DirectionalLight ) {

        // for sprites

        _directionalLights.add( lightColor );

      } else if ( light instanceof THREE.PointLight ) {

        // for sprites

        _pointLights.add( lightColor );

      }

    }

  }

  function calculateLight( position, normal, color ) {

    for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

      var light = _lights[ l ];

      _lightColor.copy( light.color );

      if ( light instanceof THREE.DirectionalLight ) {

        var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();

        var amount = normal.dot( lightPosition );

        if ( amount <= 0 ) continue;

        amount *= light.intensity;

        color.add( _lightColor.multiplyScalar( amount ) );

      } else if ( light instanceof THREE.PointLight ) {

        var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );

        var amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );

        if ( amount <= 0 ) continue;

        amount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );

        if ( amount == 0 ) continue;

        amount *= light.intensity;

        color.add( _lightColor.multiplyScalar( amount ) );

      }

    }

  }

  function renderSprite( v1, element, material ) {

    setOpacity( material.opacity );
    setBlending( material.blending );

    var scaleX = element.scale.x * _canvasWidthHalf;
    var scaleY = element.scale.y * _canvasHeightHalf;

    var dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite
    _elemBox.min.set( v1.x - dist, v1.y - dist );
    _elemBox.max.set( v1.x + dist, v1.y + dist );

    if ( material instanceof THREE.SpriteMaterial ||
       material instanceof THREE.ParticleSystemMaterial ) { // Backwards compatibility

      var texture = material.map;

      if ( texture !== null ) {

        if ( texture.hasEventListener( 'update', onTextureUpdate ) === false ) {

          if ( texture.image !== undefined && texture.image.width > 0 ) {

            textureToPattern( texture );

          }

          texture.addEventListener( 'update', onTextureUpdate );

        }

        var pattern = _patterns[ texture.id ];

        if ( pattern !== undefined ) {

          setFillStyle( pattern );

        } else {

          setFillStyle( 'rgba( 0, 0, 0, 1 )' );

        }

        //

        var bitmap = texture.image;

        var ox = bitmap.width * texture.offset.x;
        var oy = bitmap.height * texture.offset.y;

        var sx = bitmap.width * texture.repeat.x;
        var sy = bitmap.height * texture.repeat.y;

        var cx = scaleX / sx;
        var cy = scaleY / sy;

        _context.save();
        _context.translate( v1.x, v1.y );
        if ( material.rotation !== 0 ) _context.rotate( material.rotation );
        _context.translate( - scaleX / 2, - scaleY / 2 );
        _context.scale( cx, cy );
        _context.translate( - ox, - oy );
        _context.fillRect( ox, oy, sx, sy );
        _context.restore();

      } else { // no texture

        setFillStyle( material.color.getStyle() );

        _context.save();
        _context.translate( v1.x, v1.y );
        if ( material.rotation !== 0 ) _context.rotate( material.rotation );
        _context.scale( scaleX, - scaleY );
        _context.fillRect( - 0.5, - 0.5, 1, 1 );
        _context.restore();

      }

    } else if ( material instanceof THREE.SpriteCanvasMaterial ) {

      setStrokeStyle( material.color.getStyle() );
      setFillStyle( material.color.getStyle() );

      _context.save();
      _context.translate( v1.x, v1.y );
      if ( material.rotation !== 0 ) _context.rotate( material.rotation );
      _context.scale( scaleX, scaleY );

      material.program( _context );

      _context.restore();

    }

    /* DEBUG
    setStrokeStyle( 'rgb(255,255,0)' );
    _context.beginPath();
    _context.moveTo( v1.x - 10, v1.y );
    _context.lineTo( v1.x + 10, v1.y );
    _context.moveTo( v1.x, v1.y - 10 );
    _context.lineTo( v1.x, v1.y + 10 );
    _context.stroke();
    */

  }

  function renderLine( v1, v2, element, material ) {

    setOpacity( material.opacity );
    setBlending( material.blending );

    _context.beginPath();
    _context.moveTo( v1.positionScreen.x, v1.positionScreen.y );
    _context.lineTo( v2.positionScreen.x, v2.positionScreen.y );

    if ( material instanceof THREE.LineBasicMaterial ) {

      setLineWidth( material.linewidth );
      setLineCap( material.linecap );
      setLineJoin( material.linejoin );

      if ( material.vertexColors !== THREE.VertexColors ) {

        setStrokeStyle( material.color.getStyle() );

      } else {

        var colorStyle1 = element.vertexColors[0].getStyle();
        var colorStyle2 = element.vertexColors[1].getStyle();

        if ( colorStyle1 === colorStyle2 ) {

          setStrokeStyle( colorStyle1 );

        } else {

          try {

            var grad = _context.createLinearGradient(
              v1.positionScreen.x,
              v1.positionScreen.y,
              v2.positionScreen.x,
              v2.positionScreen.y
            );
            grad.addColorStop( 0, colorStyle1 );
            grad.addColorStop( 1, colorStyle2 );

          } catch ( exception ) {

            grad = colorStyle1;

          }

          setStrokeStyle( grad );

        }

      }

      _context.stroke();
      _elemBox.expandByScalar( material.linewidth * 2 );

    } else if ( material instanceof THREE.LineDashedMaterial ) {

      setLineWidth( material.linewidth );
      setLineCap( material.linecap );
      setLineJoin( material.linejoin );
      setStrokeStyle( material.color.getStyle() );
      setDashAndGap( material.dashSize, material.gapSize );

      _context.stroke();

      _elemBox.expandByScalar( material.linewidth * 2 );

      setDashAndGap( null, null );

    }

  }

  function renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {

    _this.info.render.vertices += 3;
    _this.info.render.faces ++;

    setOpacity( material.opacity );
    setBlending( material.blending );

    _v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;
    _v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;
    _v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;

    drawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );

    if ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {

      _diffuseColor.copy( material.color );
      _emissiveColor.copy( material.emissive );

      if ( material.vertexColors === THREE.FaceColors ) {

        _diffuseColor.multiply( element.color );

      }

      _color.copy( _ambientLight );

      _centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );

      calculateLight( _centroid, element.normalModel, _color );

      _color.multiply( _diffuseColor ).add( _emissiveColor );

      material.wireframe === true
        ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
        : fillPath( _color );

    } else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {

      if ( material.map !== null ) {

        if ( material.map.mapping instanceof THREE.UVMapping ) {

          _uvs = element.uvs;
          patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );

        }

      } else if ( material.envMap !== null ) {

        if ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {

          _normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );
          _uv1x = 0.5 * _normal.x + 0.5;
          _uv1y = 0.5 * _normal.y + 0.5;

          _normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );
          _uv2x = 0.5 * _normal.x + 0.5;
          _uv2y = 0.5 * _normal.y + 0.5;

          _normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );
          _uv3x = 0.5 * _normal.x + 0.5;
          _uv3y = 0.5 * _normal.y + 0.5;

          patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );

        } else if ( material.envMap.mapping instanceof THREE.SphericalRefractionMapping ) {

          _normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );
          _uv1x = - 0.5 * _normal.x + 0.5;
          _uv1y = - 0.5 * _normal.y + 0.5;

          _normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );
          _uv2x = - 0.5 * _normal.x + 0.5;
          _uv2y = - 0.5 * _normal.y + 0.5;

          _normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );
          _uv3x = - 0.5 * _normal.x + 0.5;
          _uv3y = - 0.5 * _normal.y + 0.5;

          patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );

        }


      } else {

        _color.copy( material.color );

        if ( material.vertexColors === THREE.FaceColors ) {

          _color.multiply( element.color );

        }

        material.wireframe === true
          ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
          : fillPath( _color );

      }

    } else if ( material instanceof THREE.MeshDepthMaterial ) {

      _color.r = _color.g = _color.b = 1 - smoothstep( v1.positionScreen.z * v1.positionScreen.w, _camera.near, _camera.far );

      material.wireframe === true
          ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
          : fillPath( _color );

    } else if ( material instanceof THREE.MeshNormalMaterial ) {

      _normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );

      _color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

      material.wireframe === true
        ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
        : fillPath( _color );

    } else {

      _color.setRGB( 1, 1, 1 );

      material.wireframe === true
        ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
        : fillPath( _color );

    }

  }

  //

  function drawTriangle( x0, y0, x1, y1, x2, y2 ) {

    _context.beginPath();
    _context.moveTo( x0, y0 );
    _context.lineTo( x1, y1 );
    _context.lineTo( x2, y2 );
    _context.closePath();

  }

  function strokePath( color, linewidth, linecap, linejoin ) {

    setLineWidth( linewidth );
    setLineCap( linecap );
    setLineJoin( linejoin );
    setStrokeStyle( color.getStyle() );

    _context.stroke();

    _elemBox.expandByScalar( linewidth * 2 );

  }

  function fillPath( color ) {

    setFillStyle( color.getStyle() );
    _context.fill();

  }

  function onTextureUpdate ( event ) {

    textureToPattern( event.target );

  }

  function textureToPattern( texture ) {

    var repeatX = texture.wrapS === THREE.RepeatWrapping;
    var repeatY = texture.wrapT === THREE.RepeatWrapping;

    var image = texture.image;

    var canvas = document.createElement( 'canvas' );
    canvas.width = image.width;
    canvas.height = image.height;

    var context = canvas.getContext( '2d' );
    context.setTransform( 1, 0, 0, - 1, 0, image.height );
    context.drawImage( image, 0, 0 );

    _patterns[ texture.id ] = _context.createPattern(
      canvas, repeatX === true && repeatY === true
        ? 'repeat'
        : repeatX === true && repeatY === false
          ? 'repeat-x'
          : repeatX === false && repeatY === true
            ? 'repeat-y'
            : 'no-repeat'
    );

  }

  function patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {

    if ( texture instanceof THREE.DataTexture ) return;

    if ( texture.hasEventListener( 'update', onTextureUpdate ) === false ) {

      if ( texture.image !== undefined && texture.image.width > 0 ) {

        textureToPattern( texture );

      }

      texture.addEventListener( 'update', onTextureUpdate );

    }

    var pattern = _patterns[ texture.id ];

    if ( pattern !== undefined ) {

      setFillStyle( pattern );

    } else {

      setFillStyle( 'rgba(0,0,0,1)' );
      _context.fill();

      return;

    } 

    // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

    var a, b, c, d, e, f, det, idet,
    offsetX = texture.offset.x / texture.repeat.x,
    offsetY = texture.offset.y / texture.repeat.y,
    width = texture.image.width * texture.repeat.x,
    height = texture.image.height * texture.repeat.y;

    u0 = ( u0 + offsetX ) * width;
    v0 = ( v0 + offsetY ) * height;

    u1 = ( u1 + offsetX ) * width;
    v1 = ( v1 + offsetY ) * height;

    u2 = ( u2 + offsetX ) * width;
    v2 = ( v2 + offsetY ) * height;

    x1 -= x0; y1 -= y0;
    x2 -= x0; y2 -= y0;

    u1 -= u0; v1 -= v0;
    u2 -= u0; v2 -= v0;

    det = u1 * v2 - u2 * v1;

    if ( det === 0 ) return;

    idet = 1 / det;

    a = ( v2 * x1 - v1 * x2 ) * idet;
    b = ( v2 * y1 - v1 * y2 ) * idet;
    c = ( u1 * x2 - u2 * x1 ) * idet;
    d = ( u1 * y2 - u2 * y1 ) * idet;

    e = x0 - a * u0 - c * v0;
    f = y0 - b * u0 - d * v0;

    _context.save();
    _context.transform( a, b, c, d, e, f );
    _context.fill();
    _context.restore();

  }

  function clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {

    // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

    var a, b, c, d, e, f, det, idet,
    width = image.width - 1,
    height = image.height - 1;

    u0 *= width; v0 *= height;
    u1 *= width; v1 *= height;
    u2 *= width; v2 *= height;

    x1 -= x0; y1 -= y0;
    x2 -= x0; y2 -= y0;

    u1 -= u0; v1 -= v0;
    u2 -= u0; v2 -= v0;

    det = u1 * v2 - u2 * v1;

    idet = 1 / det;

    a = ( v2 * x1 - v1 * x2 ) * idet;
    b = ( v2 * y1 - v1 * y2 ) * idet;
    c = ( u1 * x2 - u2 * x1 ) * idet;
    d = ( u1 * y2 - u2 * y1 ) * idet;

    e = x0 - a * u0 - c * v0;
    f = y0 - b * u0 - d * v0;

    _context.save();
    _context.transform( a, b, c, d, e, f );
    _context.clip();
    _context.drawImage( image, 0, 0 );
    _context.restore();

  }

  // Hide anti-alias gaps

  function expand( v1, v2, pixels ) {

    var x = v2.x - v1.x, y = v2.y - v1.y,
    det = x * x + y * y, idet;

    if ( det === 0 ) return;

    idet = pixels / Math.sqrt( det );

    x *= idet; y *= idet;

    v2.x += x; v2.y += y;
    v1.x -= x; v1.y -= y;

  }

  // Context cached methods.

  function setOpacity( value ) {

    if ( _contextGlobalAlpha !== value ) {

      _context.globalAlpha = value;
      _contextGlobalAlpha = value;

    }

  }

  function setBlending( value ) {

    if ( _contextGlobalCompositeOperation !== value ) {

      if ( value === THREE.NormalBlending ) {

        _context.globalCompositeOperation = 'source-over';

      } else if ( value === THREE.AdditiveBlending ) {

        _context.globalCompositeOperation = 'lighter';

      } else if ( value === THREE.SubtractiveBlending ) {

        _context.globalCompositeOperation = 'darker';

      }

      _contextGlobalCompositeOperation = value;

    }

  }

  function setLineWidth( value ) {

    if ( _contextLineWidth !== value ) {

      _context.lineWidth = value;
      _contextLineWidth = value;

    }

  }

  function setLineCap( value ) {

    // "butt", "round", "square"

    if ( _contextLineCap !== value ) {

      _context.lineCap = value;
      _contextLineCap = value;

    }

  }

  function setLineJoin( value ) {

    // "round", "bevel", "miter"

    if ( _contextLineJoin !== value ) {

      _context.lineJoin = value;
      _contextLineJoin = value;

    }

  }

  function setStrokeStyle( value ) {

    if ( _contextStrokeStyle !== value ) {

      _context.strokeStyle = value;
      _contextStrokeStyle = value;

    }

  }

  function setFillStyle( value ) {

    if ( _contextFillStyle !== value ) {

      _context.fillStyle = value;
      _contextFillStyle = value;

    }

  }

  function setDashAndGap( dashSizeValue, gapSizeValue ) {

    if ( _contextDashSize !== dashSizeValue || _contextGapSize !== gapSizeValue ) {

      _context.setLineDash( [ dashSizeValue, gapSizeValue ] );
      _contextDashSize = dashSizeValue;
      _contextGapSize = gapSizeValue;

    }

  }

};

/**
 * Shader chunks for WebLG Shader library
 * 
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

THREE.ShaderChunk = {

  // FOG

  fog_pars_fragment: [

    "#ifdef USE_FOG",

    " uniform vec3 fogColor;",

    " #ifdef FOG_EXP2",

    "   uniform float fogDensity;",

    " #else",

    "   uniform float fogNear;",
    "   uniform float fogFar;",

    " #endif",

    "#endif"

  ].join("\n"),

  fog_fragment: [

    "#ifdef USE_FOG",

    " #ifdef USE_LOGDEPTHBUF_EXT",

    "   float depth = gl_FragDepthEXT / gl_FragCoord.w;",

    " #else",

    "   float depth = gl_FragCoord.z / gl_FragCoord.w;",

    " #endif",

    " #ifdef FOG_EXP2",

    "   const float LOG2 = 1.442695;",
    "   float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
    "   fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",

    " #else",

    "   float fogFactor = smoothstep( fogNear, fogFar, depth );",

    " #endif",

    " gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",

    "#endif"

  ].join("\n"),

  // ENVIRONMENT MAP

  envmap_pars_fragment: [

    "#ifdef USE_ENVMAP",

    " uniform float reflectivity;",
    " uniform samplerCube envMap;",
    " uniform float flipEnvMap;",
    " uniform int combine;",

    " #if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

    "   uniform bool useRefract;",
    "   uniform float refractionRatio;",

    " #else",

    "   varying vec3 vReflect;",

    " #endif",

    "#endif"

  ].join("\n"),

  envmap_fragment: [

    "#ifdef USE_ENVMAP",

    " vec3 reflectVec;",

    " #if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

    "   vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

        // http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations
        // "Transforming Normal Vectors with the Inverse Transformation"

    "   vec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );",

    "   if ( useRefract ) {",

    "     reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );",

    "   } else { ",

    "     reflectVec = reflect( cameraToVertex, worldNormal );",

    "   }",

    " #else",

    "   reflectVec = vReflect;",

    " #endif",

    " #ifdef DOUBLE_SIDED",

    "   float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );",
    "   vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

    " #else",

    "   vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

    " #endif",

    " #ifdef GAMMA_INPUT",

    "   cubeColor.xyz *= cubeColor.xyz;",

    " #endif",

    " if ( combine == 1 ) {",

    "   gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );",

    " } else if ( combine == 2 ) {",

    "   gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;",

    " } else {",

    "   gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );",

    " }",

    "#endif"

  ].join("\n"),

  envmap_pars_vertex: [

    "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

    " varying vec3 vReflect;",

    " uniform float refractionRatio;",
    " uniform bool useRefract;",

    "#endif"

  ].join("\n"),

  worldpos_vertex : [

    "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )",

    " #ifdef USE_SKINNING",

    "   vec4 worldPosition = modelMatrix * skinned;",

    " #endif",

    " #if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

    "   vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );",

    " #endif",

    " #if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

    "   vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

    " #endif",

    "#endif"

  ].join("\n"),

  envmap_vertex : [

    "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

    " vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;",
    " worldNormal = normalize( worldNormal );",

    " vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );",

    " if ( useRefract ) {",

    "   vReflect = refract( cameraToVertex, worldNormal, refractionRatio );",

    " } else {",

    "   vReflect = reflect( cameraToVertex, worldNormal );",

    " }",

    "#endif"

  ].join("\n"),

  // COLOR MAP (particles)

  map_particle_pars_fragment: [

    "#ifdef USE_MAP",

    " uniform sampler2D map;",

    "#endif"

  ].join("\n"),


  map_particle_fragment: [

    "#ifdef USE_MAP",

    " gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );",

    "#endif"

  ].join("\n"),

  // COLOR MAP (triangles)

  map_pars_vertex: [

    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

    " varying vec2 vUv;",
    " uniform vec4 offsetRepeat;",

    "#endif"

  ].join("\n"),

  map_pars_fragment: [

    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

    " varying vec2 vUv;",

    "#endif",

    "#ifdef USE_MAP",

    " uniform sampler2D map;",

    "#endif"

  ].join("\n"),

  map_vertex: [

    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

    " vUv = uv * offsetRepeat.zw + offsetRepeat.xy;",

    "#endif"

  ].join("\n"),

  map_fragment: [

    "#ifdef USE_MAP",

    " vec4 texelColor = texture2D( map, vUv );",

    " #ifdef GAMMA_INPUT",

    "   texelColor.xyz *= texelColor.xyz;",

    " #endif",

    " gl_FragColor = gl_FragColor * texelColor;",

    "#endif"

  ].join("\n"),

  // LIGHT MAP

  lightmap_pars_fragment: [

    "#ifdef USE_LIGHTMAP",

    " varying vec2 vUv2;",
    " uniform sampler2D lightMap;",

    "#endif"

  ].join("\n"),

  lightmap_pars_vertex: [

    "#ifdef USE_LIGHTMAP",

    " varying vec2 vUv2;",

    "#endif"

  ].join("\n"),

  lightmap_fragment: [

    "#ifdef USE_LIGHTMAP",

    " gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );",

    "#endif"

  ].join("\n"),

  lightmap_vertex: [

    "#ifdef USE_LIGHTMAP",

    " vUv2 = uv2;",

    "#endif"

  ].join("\n"),

  // BUMP MAP

  bumpmap_pars_fragment: [

    "#ifdef USE_BUMPMAP",

    " uniform sampler2D bumpMap;",
    " uniform float bumpScale;",

      // Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen
      //  http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html

      // Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

    " vec2 dHdxy_fwd() {",

    "   vec2 dSTdx = dFdx( vUv );",
    "   vec2 dSTdy = dFdy( vUv );",

    "   float Hll = bumpScale * texture2D( bumpMap, vUv ).x;",
    "   float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;",
    "   float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;",

    "   return vec2( dBx, dBy );",

    " }",

    " vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {",

    "   vec3 vSigmaX = dFdx( surf_pos );",
    "   vec3 vSigmaY = dFdy( surf_pos );",
    "   vec3 vN = surf_norm;",    // normalized

    "   vec3 R1 = cross( vSigmaY, vN );",
    "   vec3 R2 = cross( vN, vSigmaX );",

    "   float fDet = dot( vSigmaX, R1 );",

    "   vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );",
    "   return normalize( abs( fDet ) * surf_norm - vGrad );",

    " }",

    "#endif"

  ].join("\n"),

  // NORMAL MAP

  normalmap_pars_fragment: [

    "#ifdef USE_NORMALMAP",

    " uniform sampler2D normalMap;",
    " uniform vec2 normalScale;",

      // Per-Pixel Tangent Space Normal Mapping
      // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html

    " vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {",

    "   vec3 q0 = dFdx( eye_pos.xyz );",
    "   vec3 q1 = dFdy( eye_pos.xyz );",
    "   vec2 st0 = dFdx( vUv.st );",
    "   vec2 st1 = dFdy( vUv.st );",

    "   vec3 S = normalize(  q0 * st1.t - q1 * st0.t );",
    "   vec3 T = normalize( -q0 * st1.s + q1 * st0.s );",
    "   vec3 N = normalize( surf_norm );",

    "   vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
    "   mapN.xy = normalScale * mapN.xy;",
    "   mat3 tsn = mat3( S, T, N );",
    "   return normalize( tsn * mapN );",

    " }",

    "#endif"

  ].join("\n"),

  // SPECULAR MAP

  specularmap_pars_fragment: [

    "#ifdef USE_SPECULARMAP",

    " uniform sampler2D specularMap;",

    "#endif"

  ].join("\n"),

  specularmap_fragment: [

    "float specularStrength;",

    "#ifdef USE_SPECULARMAP",

    " vec4 texelSpecular = texture2D( specularMap, vUv );",
    " specularStrength = texelSpecular.r;",

    "#else",

    " specularStrength = 1.0;",

    "#endif"

  ].join("\n"),

  // LIGHTS LAMBERT

  lights_lambert_pars_vertex: [

    "uniform vec3 ambient;",
    "uniform vec3 diffuse;",
    "uniform vec3 emissive;",

    "uniform vec3 ambientLightColor;",

    "#if MAX_DIR_LIGHTS > 0",

    " uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
    " uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

    "#endif",

    "#if MAX_HEMI_LIGHTS > 0",

    " uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
    " uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
    " uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

    "#endif",

    "#if MAX_POINT_LIGHTS > 0",

    " uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
    " uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
    " uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0",

    " uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
    " uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
    " uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
    " uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",
    " uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
    " uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

    "#endif",

    "#ifdef WRAP_AROUND",

    " uniform vec3 wrapRGB;",

    "#endif"

  ].join("\n"),

  lights_lambert_vertex: [

    "vLightFront = vec3( 0.0 );",

    "#ifdef DOUBLE_SIDED",

    " vLightBack = vec3( 0.0 );",

    "#endif",

    "transformedNormal = normalize( transformedNormal );",

    "#if MAX_DIR_LIGHTS > 0",

    "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

    " vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
    " vec3 dirVector = normalize( lDirection.xyz );",

    " float dotProduct = dot( transformedNormal, dirVector );",
    " vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

    " #ifdef DOUBLE_SIDED",

    "   vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

    "   #ifdef WRAP_AROUND",

    "     vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

    "   #endif",

    " #endif",

    " #ifdef WRAP_AROUND",

    "   vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
    "   directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );",

    "   #ifdef DOUBLE_SIDED",

    "     directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );",

    "   #endif",

    " #endif",

    " vLightFront += directionalLightColor[ i ] * directionalLightWeighting;",

    " #ifdef DOUBLE_SIDED",

    "   vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;",

    " #endif",

    "}",

    "#endif",

    "#if MAX_POINT_LIGHTS > 0",

    " for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

    "   vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
    "   vec3 lVector = lPosition.xyz - mvPosition.xyz;",

    "   float lDistance = 1.0;",
    "   if ( pointLightDistance[ i ] > 0.0 )",
    "     lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

    "   lVector = normalize( lVector );",
    "   float dotProduct = dot( transformedNormal, lVector );",

    "   vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

    "   #ifdef DOUBLE_SIDED",

    "     vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

    "     #ifdef WRAP_AROUND",

    "       vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

    "     #endif",

    "   #endif",

    "   #ifdef WRAP_AROUND",

    "     vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
    "     pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );",

    "     #ifdef DOUBLE_SIDED",

    "       pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );",

    "     #endif",

    "   #endif",

    "   vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;",

    "   #ifdef DOUBLE_SIDED",

    "     vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;",

    "   #endif",

    " }",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0",

    " for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

    "   vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
    "   vec3 lVector = lPosition.xyz - mvPosition.xyz;",

    "   float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );",

    "   if ( spotEffect > spotLightAngleCos[ i ] ) {",

    "     spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

    "     float lDistance = 1.0;",
    "     if ( spotLightDistance[ i ] > 0.0 )",
    "       lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

    "     lVector = normalize( lVector );",

    "     float dotProduct = dot( transformedNormal, lVector );",
    "     vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

    "     #ifdef DOUBLE_SIDED",

    "       vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

    "       #ifdef WRAP_AROUND",

    "         vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

    "       #endif",

    "     #endif",

    "     #ifdef WRAP_AROUND",

    "       vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
    "       spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );",

    "       #ifdef DOUBLE_SIDED",

    "         spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );",

    "       #endif",

    "     #endif",

    "     vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",

    "     #ifdef DOUBLE_SIDED",

    "       vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;",

    "     #endif",

    "   }",

    " }",

    "#endif",

    "#if MAX_HEMI_LIGHTS > 0",

    " for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

    "   vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
    "   vec3 lVector = normalize( lDirection.xyz );",

    "   float dotProduct = dot( transformedNormal, lVector );",

    "   float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
    "   float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;",

    "   vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

    "   #ifdef DOUBLE_SIDED",

    "     vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );",

    "   #endif",

    " }",

    "#endif",

    "vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;",

    "#ifdef DOUBLE_SIDED",

    " vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;",

    "#endif"

  ].join("\n"),

  // LIGHTS PHONG

  lights_phong_pars_vertex: [

    "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )",

    " varying vec3 vWorldPosition;",

    "#endif"

  ].join("\n"),


  lights_phong_vertex: [

    "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )",

    " vWorldPosition = worldPosition.xyz;",

    "#endif"

  ].join("\n"),

  lights_phong_pars_fragment: [

    "uniform vec3 ambientLightColor;",

    "#if MAX_DIR_LIGHTS > 0",

    " uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
    " uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

    "#endif",

    "#if MAX_HEMI_LIGHTS > 0",

    " uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
    " uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
    " uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

    "#endif",

    "#if MAX_POINT_LIGHTS > 0",

    " uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",

    " uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
    " uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0",

    " uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
    " uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
    " uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
    " uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
    " uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

    " uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )",

    " varying vec3 vWorldPosition;",

    "#endif",

    "#ifdef WRAP_AROUND",

    " uniform vec3 wrapRGB;",

    "#endif",

    "varying vec3 vViewPosition;",
    "varying vec3 vNormal;"

  ].join("\n"),

  lights_phong_fragment: [

    "vec3 normal = normalize( vNormal );",
    "vec3 viewPosition = normalize( vViewPosition );",

    "#ifdef DOUBLE_SIDED",

    " normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );",

    "#endif",

    "#ifdef USE_NORMALMAP",

    " normal = perturbNormal2Arb( -vViewPosition, normal );",

    "#elif defined( USE_BUMPMAP )",

    " normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );",

    "#endif",

    "#if MAX_POINT_LIGHTS > 0",

    " vec3 pointDiffuse  = vec3( 0.0 );",
    " vec3 pointSpecular = vec3( 0.0 );",

    " for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

    "   vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
    "   vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

    "   float lDistance = 1.0;",
    "   if ( pointLightDistance[ i ] > 0.0 )",
    "     lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

    "   lVector = normalize( lVector );",

        // diffuse

    "   float dotProduct = dot( normal, lVector );",

    "   #ifdef WRAP_AROUND",

    "     float pointDiffuseWeightFull = max( dotProduct, 0.0 );",
    "     float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

    "     vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

    "   #else",

    "     float pointDiffuseWeight = max( dotProduct, 0.0 );",

    "   #endif",

    "   pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;",

        // specular

    "   vec3 pointHalfVector = normalize( lVector + viewPosition );",
    "   float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
    "   float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

        // 2.0 => 2.0001 is hack to work around ANGLE bug

    "   float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

    "   vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );",
    "   pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;",

    " }",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0",

    " vec3 spotDiffuse  = vec3( 0.0 );",
    " vec3 spotSpecular = vec3( 0.0 );",

    " for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

    "   vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
    "   vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

    "   float lDistance = 1.0;",
    "   if ( spotLightDistance[ i ] > 0.0 )",
    "     lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

    "   lVector = normalize( lVector );",

    "   float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

    "   if ( spotEffect > spotLightAngleCos[ i ] ) {",

    "     spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

          // diffuse

    "     float dotProduct = dot( normal, lVector );",

    "     #ifdef WRAP_AROUND",

    "       float spotDiffuseWeightFull = max( dotProduct, 0.0 );",
    "       float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

    "       vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

    "     #else",

    "       float spotDiffuseWeight = max( dotProduct, 0.0 );",

    "     #endif",

    "     spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;",

          // specular

    "     vec3 spotHalfVector = normalize( lVector + viewPosition );",
    "     float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
    "     float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

          // 2.0 => 2.0001 is hack to work around ANGLE bug

    "     float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

    "     vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );",
    "     spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;",

    "   }",

    " }",

    "#endif",

    "#if MAX_DIR_LIGHTS > 0",

    " vec3 dirDiffuse  = vec3( 0.0 );",
    " vec3 dirSpecular = vec3( 0.0 );" ,

    " for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

    "   vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
    "   vec3 dirVector = normalize( lDirection.xyz );",

        // diffuse

    "   float dotProduct = dot( normal, dirVector );",

    "   #ifdef WRAP_AROUND",

    "     float dirDiffuseWeightFull = max( dotProduct, 0.0 );",
    "     float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

    "     vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );",

    "   #else",

    "     float dirDiffuseWeight = max( dotProduct, 0.0 );",

    "   #endif",

    "   dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;",

        // specular

    "   vec3 dirHalfVector = normalize( dirVector + viewPosition );",
    "   float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
    "   float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

          /*
        // fresnel term from skin shader
    "   const float F0 = 0.128;",

    "   float base = 1.0 - dot( viewPosition, dirHalfVector );",
    "   float exponential = pow( base, 5.0 );",

    "   float fresnel = exponential + F0 * ( 1.0 - exponential );",
        */

        /*
        // fresnel term from fresnel shader
    "   const float mFresnelBias = 0.08;",
    "   const float mFresnelScale = 0.3;",
    "   const float mFresnelPower = 5.0;",

    "   float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );",
        */

        // 2.0 => 2.0001 is hack to work around ANGLE bug

    "   float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

        //"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;",

    "   vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );",
    "   dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",


    " }",

    "#endif",

    "#if MAX_HEMI_LIGHTS > 0",

    " vec3 hemiDiffuse  = vec3( 0.0 );",
    " vec3 hemiSpecular = vec3( 0.0 );" ,

    " for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

    "   vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
    "   vec3 lVector = normalize( lDirection.xyz );",

        // diffuse

    "   float dotProduct = dot( normal, lVector );",
    "   float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

    "   vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

    "   hemiDiffuse += diffuse * hemiColor;",

        // specular (sky light)

    "   vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
    "   float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
    "   float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );",

        // specular (ground light)

    "   vec3 lVectorGround = -lVector;",

    "   vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
    "   float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
    "   float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );",

    "   float dotProductGround = dot( normal, lVectorGround );",

        // 2.0 => 2.0001 is hack to work around ANGLE bug

    "   float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

    "   vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );",
    "   vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );",
    "   hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

    " }",

    "#endif",

    "vec3 totalDiffuse = vec3( 0.0 );",
    "vec3 totalSpecular = vec3( 0.0 );",

    "#if MAX_DIR_LIGHTS > 0",

    " totalDiffuse += dirDiffuse;",
    " totalSpecular += dirSpecular;",

    "#endif",

    "#if MAX_HEMI_LIGHTS > 0",

    " totalDiffuse += hemiDiffuse;",
    " totalSpecular += hemiSpecular;",

    "#endif",

    "#if MAX_POINT_LIGHTS > 0",

    " totalDiffuse += pointDiffuse;",
    " totalSpecular += pointSpecular;",

    "#endif",

    "#if MAX_SPOT_LIGHTS > 0",

    " totalDiffuse += spotDiffuse;",
    " totalSpecular += spotSpecular;",

    "#endif",

    "#ifdef METAL",

    " gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );",

    "#else",

    " gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

    "#endif"

  ].join("\n"),

  // VERTEX COLORS

  color_pars_fragment: [

    "#ifdef USE_COLOR",

    " varying vec3 vColor;",

    "#endif"

  ].join("\n"),


  color_fragment: [

    "#ifdef USE_COLOR",

    " gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );",

    "#endif"

  ].join("\n"),

  color_pars_vertex: [

    "#ifdef USE_COLOR",

    " varying vec3 vColor;",

    "#endif"

  ].join("\n"),


  color_vertex: [

    "#ifdef USE_COLOR",

    " #ifdef GAMMA_INPUT",

    "   vColor = color * color;",

    " #else",

    "   vColor = color;",

    " #endif",

    "#endif"

  ].join("\n"),

  // SKINNING

  skinning_pars_vertex: [

    "#ifdef USE_SKINNING",

    " #ifdef BONE_TEXTURE",

    "   uniform sampler2D boneTexture;",
    "   uniform int boneTextureWidth;",
    "   uniform int boneTextureHeight;",

    "   mat4 getBoneMatrix( const in float i ) {",

    "     float j = i * 4.0;",
    "     float x = mod( j, float( boneTextureWidth ) );",
    "     float y = floor( j / float( boneTextureWidth ) );",

    "     float dx = 1.0 / float( boneTextureWidth );",
    "     float dy = 1.0 / float( boneTextureHeight );",

    "     y = dy * ( y + 0.5 );",

    "     vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );",
    "     vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );",
    "     vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );",
    "     vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );",

    "     mat4 bone = mat4( v1, v2, v3, v4 );",

    "     return bone;",

    "   }",

    " #else",

    "   uniform mat4 boneGlobalMatrices[ MAX_BONES ];",

    "   mat4 getBoneMatrix( const in float i ) {",

    "     mat4 bone = boneGlobalMatrices[ int(i) ];",
    "     return bone;",

    "   }",

    " #endif",

    "#endif"

  ].join("\n"),

  skinbase_vertex: [

    "#ifdef USE_SKINNING",

    " mat4 boneMatX = getBoneMatrix( skinIndex.x );",
    " mat4 boneMatY = getBoneMatrix( skinIndex.y );",
    " mat4 boneMatZ = getBoneMatrix( skinIndex.z );",
    " mat4 boneMatW = getBoneMatrix( skinIndex.w );",

    "#endif"

  ].join("\n"),

  skinning_vertex: [

    "#ifdef USE_SKINNING",

    " #ifdef USE_MORPHTARGETS",

    " vec4 skinVertex = vec4( morphed, 1.0 );",

    " #else",

    " vec4 skinVertex = vec4( position, 1.0 );",

    " #endif",

    " vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
    " skinned      += boneMatY * skinVertex * skinWeight.y;",
    " skinned      += boneMatZ * skinVertex * skinWeight.z;",
    " skinned      += boneMatW * skinVertex * skinWeight.w;",

    "#endif"

  ].join("\n"),

  // MORPHING

  morphtarget_pars_vertex: [

    "#ifdef USE_MORPHTARGETS",

    " #ifndef USE_MORPHNORMALS",

    " uniform float morphTargetInfluences[ 8 ];",

    " #else",

    " uniform float morphTargetInfluences[ 4 ];",

    " #endif",

    "#endif"

  ].join("\n"),

  morphtarget_vertex: [

    "#ifdef USE_MORPHTARGETS",

    " vec3 morphed = vec3( 0.0 );",
    " morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];",
    " morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];",
    " morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];",
    " morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];",

    " #ifndef USE_MORPHNORMALS",

    " morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];",
    " morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];",
    " morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];",
    " morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];",

    " #endif",

    " morphed += position;",

    "#endif"

  ].join("\n"),

  default_vertex : [

    "vec4 mvPosition;",

    "#ifdef USE_SKINNING",

    " mvPosition = modelViewMatrix * skinned;",

    "#endif",

    "#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )",

    " mvPosition = modelViewMatrix * vec4( morphed, 1.0 );",

    "#endif",

    "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )",

    " mvPosition = modelViewMatrix * vec4( position, 1.0 );",

    "#endif",

    "gl_Position = projectionMatrix * mvPosition;"

  ].join("\n"),

  morphnormal_vertex: [

    "#ifdef USE_MORPHNORMALS",

    " vec3 morphedNormal = vec3( 0.0 );",

    " morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];",
    " morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];",
    " morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];",
    " morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];",

    " morphedNormal += normal;",

    "#endif"

  ].join("\n"),

  skinnormal_vertex: [

    "#ifdef USE_SKINNING",

    " mat4 skinMatrix = skinWeight.x * boneMatX;",
    " skinMatrix  += skinWeight.y * boneMatY;",
    " skinMatrix  += skinWeight.z * boneMatZ;",
    " skinMatrix  += skinWeight.w * boneMatW;",

    " #ifdef USE_MORPHNORMALS",

    " vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );",

    " #else",

    " vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );",

    " #endif",

    "#endif"

  ].join("\n"),

  defaultnormal_vertex: [

    "vec3 objectNormal;",

    "#ifdef USE_SKINNING",

    " objectNormal = skinnedNormal.xyz;",

    "#endif",

    "#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )",

    " objectNormal = morphedNormal;",

    "#endif",

    "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )",

    " objectNormal = normal;",

    "#endif",

    "#ifdef FLIP_SIDED",

    " objectNormal = -objectNormal;",

    "#endif",

    "vec3 transformedNormal = normalMatrix * objectNormal;"

  ].join("\n"),

  // SHADOW MAP

  // based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples
  //  http://spidergl.org/example.php?id=6
  //  http://fabiensanglard.net/shadowmapping

  shadowmap_pars_fragment: [

    "#ifdef USE_SHADOWMAP",

    " uniform sampler2D shadowMap[ MAX_SHADOWS ];",
    " uniform vec2 shadowMapSize[ MAX_SHADOWS ];",

    " uniform float shadowDarkness[ MAX_SHADOWS ];",
    " uniform float shadowBias[ MAX_SHADOWS ];",

    " varying vec4 vShadowCoord[ MAX_SHADOWS ];",

    " float unpackDepth( const in vec4 rgba_depth ) {",

    "   const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
    "   float depth = dot( rgba_depth, bit_shift );",
    "   return depth;",

    " }",

    "#endif"

  ].join("\n"),

  shadowmap_fragment: [

    "#ifdef USE_SHADOWMAP",

    " #ifdef SHADOWMAP_DEBUG",

    "   vec3 frustumColors[3];",
    "   frustumColors[0] = vec3( 1.0, 0.5, 0.0 );",
    "   frustumColors[1] = vec3( 0.0, 1.0, 0.8 );",
    "   frustumColors[2] = vec3( 0.0, 0.5, 1.0 );",

    " #endif",

    " #ifdef SHADOWMAP_CASCADE",

    "   int inFrustumCount = 0;",

    " #endif",

    " float fDepth;",
    " vec3 shadowColor = vec3( 1.0 );",

    " for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

    "   vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;",

        // "if ( something && something )"     breaks ATI OpenGL shader compiler
        // "if ( all( something, something ) )"  using this instead

    "   bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );",
    "   bool inFrustum = all( inFrustumVec );",

        // don't shadow pixels outside of light frustum
        // use just first frustum (for cascades)
        // don't shadow pixels behind far plane of light frustum

    "   #ifdef SHADOWMAP_CASCADE",

    "     inFrustumCount += int( inFrustum );",
    "     bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );",

    "   #else",

    "     bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );",

    "   #endif",

    "   bool frustumTest = all( frustumTestVec );",

    "   if ( frustumTest ) {",

    "     shadowCoord.z += shadowBias[ i ];",

    "     #if defined( SHADOWMAP_TYPE_PCF )",

            // Percentage-close filtering
            // (9 pixel kernel)
            // http://fabiensanglard.net/shadowmappingPCF/

    "       float shadow = 0.0;",

            /*
            // nested loops breaks shader compiler / validator on some ATI cards when using OpenGL
            // must enroll loop manually

    "       for ( float y = -1.25; y <= 1.25; y += 1.25 )",
    "         for ( float x = -1.25; x <= 1.25; x += 1.25 ) {",

    "           vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );",

                // doesn't seem to produce any noticeable visual difference compared to simple "texture2D" lookup
                //"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );",

    "           float fDepth = unpackDepth( rgbaDepth );",

    "           if ( fDepth < shadowCoord.z )",
    "             shadow += 1.0;",

    "       }",

    "       shadow /= 9.0;",

            */

    "       const float shadowDelta = 1.0 / 9.0;",

    "       float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
    "       float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

    "       float dx0 = -1.25 * xPixelOffset;",
    "       float dy0 = -1.25 * yPixelOffset;",
    "       float dx1 = 1.25 * xPixelOffset;",
    "       float dy1 = 1.25 * yPixelOffset;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",
    "       if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

    "       shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

    "     #elif defined( SHADOWMAP_TYPE_PCF_SOFT )",

            // Percentage-close filtering
            // (9 pixel kernel)
            // http://fabiensanglard.net/shadowmappingPCF/

    "       float shadow = 0.0;",

    "       float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
    "       float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

    "       float dx0 = -1.0 * xPixelOffset;",
    "       float dy0 = -1.0 * yPixelOffset;",
    "       float dx1 = 1.0 * xPixelOffset;",
    "       float dy1 = 1.0 * yPixelOffset;",

    "       mat3 shadowKernel;",
    "       mat3 depthKernel;",

    "       depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
    "       depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
    "       depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
    "       depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
    "       depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
    "       depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
    "       depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
    "       depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
    "       depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",

    "       vec3 shadowZ = vec3( shadowCoord.z );",
    "       shadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));",
    "       shadowKernel[0] *= vec3(0.25);",
                          
    "       shadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));",
    "       shadowKernel[1] *= vec3(0.25);",

    "       shadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));",
    "       shadowKernel[2] *= vec3(0.25);",

    "       vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );",

    "       shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );",
    "       shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );",

    "       vec4 shadowValues;",
    "       shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );",
    "       shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );",
    "       shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );",
    "       shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );",

    "       shadow = dot( shadowValues, vec4( 1.0 ) );",

    "       shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

    "     #else",

    "       vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );",
    "       float fDepth = unpackDepth( rgbaDepth );",

    "       if ( fDepth < shadowCoord.z )",

              // spot with multiple shadows is darker

    "         shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );",

              // spot with multiple shadows has the same color as single shadow spot

              //"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );",

    "     #endif",

    "   }",


    "   #ifdef SHADOWMAP_DEBUG",

    "     #ifdef SHADOWMAP_CASCADE",

    "       if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];",

    "     #else",

    "       if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];",

    "     #endif",

    "   #endif",

    " }",

    " #ifdef GAMMA_OUTPUT",

    "   shadowColor *= shadowColor;",

    " #endif",

    " gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;",

    "#endif"

  ].join("\n"),

  shadowmap_pars_vertex: [

    "#ifdef USE_SHADOWMAP",

    " varying vec4 vShadowCoord[ MAX_SHADOWS ];",
    " uniform mat4 shadowMatrix[ MAX_SHADOWS ];",

    "#endif"

  ].join("\n"),

  shadowmap_vertex: [

    "#ifdef USE_SHADOWMAP",

    " for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

    "   vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

    " }",

    "#endif"

  ].join("\n"),

  // ALPHATEST

  alphatest_fragment: [

    "#ifdef ALPHATEST",

    " if ( gl_FragColor.a < ALPHATEST ) discard;",

    "#endif"

  ].join("\n"),

  // LINEAR SPACE

  linear_to_gamma_fragment: [

    "#ifdef GAMMA_OUTPUT",

    " gl_FragColor.xyz = sqrt( gl_FragColor.xyz );",

    "#endif"

  ].join("\n"),

  // LOGARITHMIC DEPTH BUFFER
  // http://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html

  // WebGL doesn't support gl_FragDepth out of the box, unless the EXT_frag_depth extension is available.  On platforms
  // without EXT_frag_depth, we have to fall back on linear z-buffer in the fragment shader, which means that some long 
  // faces close to the camera may have issues. This can be worked around by tesselating the model more finely when
  // the camera is near the surface.

  logdepthbuf_pars_vertex: [

    "#ifdef USE_LOGDEPTHBUF",

    " #ifdef USE_LOGDEPTHBUF_EXT",

    "   varying float vFragDepth;",

    " #endif",

    " uniform float logDepthBufFC;",

    "#endif",

  ].join('\n'),

  logdepthbuf_vertex: [

    "#ifdef USE_LOGDEPTHBUF",

    " gl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;",

    " #ifdef USE_LOGDEPTHBUF_EXT",

    "   vFragDepth = 1.0 + gl_Position.w;",

    "#else",

    "   gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;",

    " #endif",

    "#endif"

  ].join("\n"),

  logdepthbuf_pars_fragment: [

    "#ifdef USE_LOGDEPTHBUF",

    " uniform float logDepthBufFC;",

    " #ifdef USE_LOGDEPTHBUF_EXT",

    "   #extension GL_EXT_frag_depth : enable",
    "   varying float vFragDepth;",

    " #endif",

    "#endif"

  ].join('\n'),

  logdepthbuf_fragment: [
    "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)",

    " gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;",

    "#endif"

  ].join("\n")

};

/**
 * Uniform Utilities
 */

THREE.UniformsUtils = {

  merge: function ( uniforms ) {

    var u, p, tmp, merged = {};

    for ( u = 0; u < uniforms.length; u ++ ) {

      tmp = this.clone( uniforms[ u ] );

      for ( p in tmp ) {

        merged[ p ] = tmp[ p ];

      }

    }

    return merged;

  },

  clone: function ( uniforms_src ) {

    var u, p, parameter, parameter_src, uniforms_dst = {};

    for ( u in uniforms_src ) {

      uniforms_dst[ u ] = {};

      for ( p in uniforms_src[ u ] ) {

        parameter_src = uniforms_src[ u ][ p ];

        if ( parameter_src instanceof THREE.Color ||
           parameter_src instanceof THREE.Vector2 ||
           parameter_src instanceof THREE.Vector3 ||
           parameter_src instanceof THREE.Vector4 ||
           parameter_src instanceof THREE.Matrix4 ||
           parameter_src instanceof THREE.Texture ) {

          uniforms_dst[ u ][ p ] = parameter_src.clone();

        } else if ( parameter_src instanceof Array ) {

          uniforms_dst[ u ][ p ] = parameter_src.slice();

        } else {

          uniforms_dst[ u ][ p ] = parameter_src;

        }

      }

    }

    return uniforms_dst;

  }

};
/**
 * Uniforms library for shared webgl shaders
 */

THREE.UniformsLib = {

  common: {

    "diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
    "opacity" : { type: "f", value: 1.0 },

    "map" : { type: "t", value: null },
    "offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

    "lightMap" : { type: "t", value: null },
    "specularMap" : { type: "t", value: null },

    "envMap" : { type: "t", value: null },
    "flipEnvMap" : { type: "f", value: -1 },
    "useRefract" : { type: "i", value: 0 },
    "reflectivity" : { type: "f", value: 1.0 },
    "refractionRatio" : { type: "f", value: 0.98 },
    "combine" : { type: "i", value: 0 },

    "morphTargetInfluences" : { type: "f", value: 0 }

  },

  bump: {

    "bumpMap" : { type: "t", value: null },
    "bumpScale" : { type: "f", value: 1 }

  },

  normalmap: {

    "normalMap" : { type: "t", value: null },
    "normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
  },

  fog : {

    "fogDensity" : { type: "f", value: 0.00025 },
    "fogNear" : { type: "f", value: 1 },
    "fogFar" : { type: "f", value: 2000 },
    "fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

  },

  lights: {

    "ambientLightColor" : { type: "fv", value: [] },

    "directionalLightDirection" : { type: "fv", value: [] },
    "directionalLightColor" : { type: "fv", value: [] },

    "hemisphereLightDirection" : { type: "fv", value: [] },
    "hemisphereLightSkyColor" : { type: "fv", value: [] },
    "hemisphereLightGroundColor" : { type: "fv", value: [] },

    "pointLightColor" : { type: "fv", value: [] },
    "pointLightPosition" : { type: "fv", value: [] },
    "pointLightDistance" : { type: "fv1", value: [] },

    "spotLightColor" : { type: "fv", value: [] },
    "spotLightPosition" : { type: "fv", value: [] },
    "spotLightDirection" : { type: "fv", value: [] },
    "spotLightDistance" : { type: "fv1", value: [] },
    "spotLightAngleCos" : { type: "fv1", value: [] },
    "spotLightExponent" : { type: "fv1", value: [] }

  },

  particle: {

    "psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
    "opacity" : { type: "f", value: 1.0 },
    "size" : { type: "f", value: 1.0 },
    "scale" : { type: "f", value: 1.0 },
    "map" : { type: "t", value: null },

    "fogDensity" : { type: "f", value: 0.00025 },
    "fogNear" : { type: "f", value: 1 },
    "fogFar" : { type: "f", value: 2000 },
    "fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

  },

  shadowmap: {

    "shadowMap": { type: "tv", value: [] },
    "shadowMapSize": { type: "v2v", value: [] },

    "shadowBias" : { type: "fv1", value: [] },
    "shadowDarkness": { type: "fv1", value: [] },

    "shadowMatrix" : { type: "m4v", value: [] }

  }

};
/**
 * Webgl Shader Library for three.js
 *
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */


THREE.ShaderLib = {

  'basic': {

    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "common" ],
      THREE.UniformsLib[ "fog" ],
      THREE.UniformsLib[ "shadowmap" ]

    ] ),

    vertexShader: [

      THREE.ShaderChunk[ "map_pars_vertex" ],
      THREE.ShaderChunk[ "lightmap_pars_vertex" ],
      THREE.ShaderChunk[ "envmap_pars_vertex" ],
      THREE.ShaderChunk[ "color_pars_vertex" ],
      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "skinning_pars_vertex" ],
      THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "map_vertex" ],
        THREE.ShaderChunk[ "lightmap_vertex" ],
        THREE.ShaderChunk[ "color_vertex" ],
        THREE.ShaderChunk[ "skinbase_vertex" ],

      " #ifdef USE_ENVMAP",

        THREE.ShaderChunk[ "morphnormal_vertex" ],
        THREE.ShaderChunk[ "skinnormal_vertex" ],
        THREE.ShaderChunk[ "defaultnormal_vertex" ],

      " #endif",

        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "skinning_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

        THREE.ShaderChunk[ "worldpos_vertex" ],
        THREE.ShaderChunk[ "envmap_vertex" ],
        THREE.ShaderChunk[ "shadowmap_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform vec3 diffuse;",
      "uniform float opacity;",

      THREE.ShaderChunk[ "color_pars_fragment" ],
      THREE.ShaderChunk[ "map_pars_fragment" ],
      THREE.ShaderChunk[ "lightmap_pars_fragment" ],
      THREE.ShaderChunk[ "envmap_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
      THREE.ShaderChunk[ "specularmap_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = vec4( diffuse, opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],
        THREE.ShaderChunk[ "map_fragment" ],
        THREE.ShaderChunk[ "alphatest_fragment" ],
        THREE.ShaderChunk[ "specularmap_fragment" ],
        THREE.ShaderChunk[ "lightmap_fragment" ],
        THREE.ShaderChunk[ "color_fragment" ],
        THREE.ShaderChunk[ "envmap_fragment" ],
        THREE.ShaderChunk[ "shadowmap_fragment" ],

        THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n")

  },

  'lambert': {

    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "common" ],
      THREE.UniformsLib[ "fog" ],
      THREE.UniformsLib[ "lights" ],
      THREE.UniformsLib[ "shadowmap" ],

      {
        "ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
        "emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
        "wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
      }

    ] ),

    vertexShader: [

      "#define LAMBERT",

      "varying vec3 vLightFront;",

      "#ifdef DOUBLE_SIDED",

      " varying vec3 vLightBack;",

      "#endif",

      THREE.ShaderChunk[ "map_pars_vertex" ],
      THREE.ShaderChunk[ "lightmap_pars_vertex" ],
      THREE.ShaderChunk[ "envmap_pars_vertex" ],
      THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
      THREE.ShaderChunk[ "color_pars_vertex" ],
      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "skinning_pars_vertex" ],
      THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "map_vertex" ],
        THREE.ShaderChunk[ "lightmap_vertex" ],
        THREE.ShaderChunk[ "color_vertex" ],

        THREE.ShaderChunk[ "morphnormal_vertex" ],
        THREE.ShaderChunk[ "skinbase_vertex" ],
        THREE.ShaderChunk[ "skinnormal_vertex" ],
        THREE.ShaderChunk[ "defaultnormal_vertex" ],

        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "skinning_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

        THREE.ShaderChunk[ "worldpos_vertex" ],
        THREE.ShaderChunk[ "envmap_vertex" ],
        THREE.ShaderChunk[ "lights_lambert_vertex" ],
        THREE.ShaderChunk[ "shadowmap_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform float opacity;",

      "varying vec3 vLightFront;",

      "#ifdef DOUBLE_SIDED",

      " varying vec3 vLightBack;",

      "#endif",

      THREE.ShaderChunk[ "color_pars_fragment" ],
      THREE.ShaderChunk[ "map_pars_fragment" ],
      THREE.ShaderChunk[ "lightmap_pars_fragment" ],
      THREE.ShaderChunk[ "envmap_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
      THREE.ShaderChunk[ "specularmap_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = vec4( vec3( 1.0 ), opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],
        THREE.ShaderChunk[ "map_fragment" ],
        THREE.ShaderChunk[ "alphatest_fragment" ],
        THREE.ShaderChunk[ "specularmap_fragment" ],

      " #ifdef DOUBLE_SIDED",

          //"float isFront = float( gl_FrontFacing );",
          //"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;",

      "   if ( gl_FrontFacing )",
      "     gl_FragColor.xyz *= vLightFront;",
      "   else",
      "     gl_FragColor.xyz *= vLightBack;",

      " #else",

      "   gl_FragColor.xyz *= vLightFront;",

      " #endif",

        THREE.ShaderChunk[ "lightmap_fragment" ],
        THREE.ShaderChunk[ "color_fragment" ],
        THREE.ShaderChunk[ "envmap_fragment" ],
        THREE.ShaderChunk[ "shadowmap_fragment" ],

        THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n")

  },

  'phong': {

    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "common" ],
      THREE.UniformsLib[ "bump" ],
      THREE.UniformsLib[ "normalmap" ],
      THREE.UniformsLib[ "fog" ],
      THREE.UniformsLib[ "lights" ],
      THREE.UniformsLib[ "shadowmap" ],

      {
        "ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
        "emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
        "specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
        "shininess": { type: "f", value: 30 },
        "wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
      }

    ] ),

    vertexShader: [

      "#define PHONG",

      "varying vec3 vViewPosition;",
      "varying vec3 vNormal;",

      THREE.ShaderChunk[ "map_pars_vertex" ],
      THREE.ShaderChunk[ "lightmap_pars_vertex" ],
      THREE.ShaderChunk[ "envmap_pars_vertex" ],
      THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
      THREE.ShaderChunk[ "color_pars_vertex" ],
      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "skinning_pars_vertex" ],
      THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "map_vertex" ],
        THREE.ShaderChunk[ "lightmap_vertex" ],
        THREE.ShaderChunk[ "color_vertex" ],

        THREE.ShaderChunk[ "morphnormal_vertex" ],
        THREE.ShaderChunk[ "skinbase_vertex" ],
        THREE.ShaderChunk[ "skinnormal_vertex" ],
        THREE.ShaderChunk[ "defaultnormal_vertex" ],

      " vNormal = normalize( transformedNormal );",

        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "skinning_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      " vViewPosition = -mvPosition.xyz;",

        THREE.ShaderChunk[ "worldpos_vertex" ],
        THREE.ShaderChunk[ "envmap_vertex" ],
        THREE.ShaderChunk[ "lights_phong_vertex" ],
        THREE.ShaderChunk[ "shadowmap_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform vec3 diffuse;",
      "uniform float opacity;",

      "uniform vec3 ambient;",
      "uniform vec3 emissive;",
      "uniform vec3 specular;",
      "uniform float shininess;",

      THREE.ShaderChunk[ "color_pars_fragment" ],
      THREE.ShaderChunk[ "map_pars_fragment" ],
      THREE.ShaderChunk[ "lightmap_pars_fragment" ],
      THREE.ShaderChunk[ "envmap_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
      THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
      THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
      THREE.ShaderChunk[ "normalmap_pars_fragment" ],
      THREE.ShaderChunk[ "specularmap_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = vec4( vec3( 1.0 ), opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],
        THREE.ShaderChunk[ "map_fragment" ],
        THREE.ShaderChunk[ "alphatest_fragment" ],
        THREE.ShaderChunk[ "specularmap_fragment" ],

        THREE.ShaderChunk[ "lights_phong_fragment" ],

        THREE.ShaderChunk[ "lightmap_fragment" ],
        THREE.ShaderChunk[ "color_fragment" ],
        THREE.ShaderChunk[ "envmap_fragment" ],
        THREE.ShaderChunk[ "shadowmap_fragment" ],

        THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n")

  },

  'particle_basic': {

    uniforms:  THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "particle" ],
      THREE.UniformsLib[ "shadowmap" ]

    ] ),

    vertexShader: [

      "uniform float size;",
      "uniform float scale;",

      THREE.ShaderChunk[ "color_pars_vertex" ],
      THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "color_vertex" ],

      " vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",

      " #ifdef USE_SIZEATTENUATION",
      "   gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
      " #else",
      "   gl_PointSize = size;",
      " #endif",

      " gl_Position = projectionMatrix * mvPosition;",

        THREE.ShaderChunk[ "logdepthbuf_vertex" ],
        THREE.ShaderChunk[ "worldpos_vertex" ],
        THREE.ShaderChunk[ "shadowmap_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform vec3 psColor;",
      "uniform float opacity;",

      THREE.ShaderChunk[ "color_pars_fragment" ],
      THREE.ShaderChunk[ "map_particle_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = vec4( psColor, opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],
        THREE.ShaderChunk[ "map_particle_fragment" ],
        THREE.ShaderChunk[ "alphatest_fragment" ],
        THREE.ShaderChunk[ "color_fragment" ],
        THREE.ShaderChunk[ "shadowmap_fragment" ],
        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n")

  },

  'dashed': {

    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "common" ],
      THREE.UniformsLib[ "fog" ],

      {
        "scale":     { type: "f", value: 1 },
        "dashSize":  { type: "f", value: 1 },
        "totalSize": { type: "f", value: 2 }
      }

    ] ),

    vertexShader: [

      "uniform float scale;",
      "attribute float lineDistance;",

      "varying float vLineDistance;",

      THREE.ShaderChunk[ "color_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "color_vertex" ],

      " vLineDistance = scale * lineDistance;",

      " vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
      " gl_Position = projectionMatrix * mvPosition;",

        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform vec3 diffuse;",
      "uniform float opacity;",

      "uniform float dashSize;",
      "uniform float totalSize;",

      "varying float vLineDistance;",

      THREE.ShaderChunk[ "color_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " if ( mod( vLineDistance, totalSize ) > dashSize ) {",

      "   discard;",

      " }",

      " gl_FragColor = vec4( diffuse, opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],
        THREE.ShaderChunk[ "color_fragment" ],
        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n")

  },

  'depth': {

    uniforms: {

      "mNear": { type: "f", value: 1.0 },
      "mFar" : { type: "f", value: 2000.0 },
      "opacity" : { type: "f", value: 1.0 }

    },

    vertexShader: [

      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform float mNear;",
      "uniform float mFar;",
      "uniform float opacity;",
      
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],

      " #ifdef USE_LOGDEPTHBUF_EXT",

      "   float depth = gl_FragDepthEXT / gl_FragCoord.w;",

      " #else",

      "   float depth = gl_FragCoord.z / gl_FragCoord.w;",

      " #endif",

      " float color = 1.0 - smoothstep( mNear, mFar, depth );",
      " gl_FragColor = vec4( vec3( color ), opacity );",

      "}"

    ].join("\n")

  },

  'normal': {

    uniforms: {

      "opacity" : { type: "f", value: 1.0 }

    },

    vertexShader: [

      "varying vec3 vNormal;",

      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

      " vNormal = normalize( normalMatrix * normal );",

        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform float opacity;",
      "varying vec3 vNormal;",

      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],

      "}"

    ].join("\n")

  },

  /* -------------------------------------------------------------------------
  //  Normal map shader
  //    - Blinn-Phong
  //    - normal + diffuse + specular + AO + displacement + reflection + shadow maps
  //    - point and directional lights (use with "lights: true" material option)
   ------------------------------------------------------------------------- */

  'normalmap' : {

    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "fog" ],
      THREE.UniformsLib[ "lights" ],
      THREE.UniformsLib[ "shadowmap" ],

      {

      "enableAO"      : { type: "i", value: 0 },
      "enableDiffuse"   : { type: "i", value: 0 },
      "enableSpecular"  : { type: "i", value: 0 },
      "enableReflection": { type: "i", value: 0 },
      "enableDisplacement": { type: "i", value: 0 },

      "tDisplacement": { type: "t", value: null }, // must go first as this is vertex texture
      "tDiffuse"     : { type: "t", value: null },
      "tCube"      : { type: "t", value: null },
      "tNormal"    : { type: "t", value: null },
      "tSpecular"    : { type: "t", value: null },
      "tAO"      : { type: "t", value: null },

      "uNormalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) },

      "uDisplacementBias": { type: "f", value: 0.0 },
      "uDisplacementScale": { type: "f", value: 1.0 },

      "diffuse": { type: "c", value: new THREE.Color( 0xffffff ) },
      "specular": { type: "c", value: new THREE.Color( 0x111111 ) },
      "ambient": { type: "c", value: new THREE.Color( 0xffffff ) },
      "shininess": { type: "f", value: 30 },
      "opacity": { type: "f", value: 1 },

      "useRefract": { type: "i", value: 0 },
      "refractionRatio": { type: "f", value: 0.98 },
      "reflectivity": { type: "f", value: 0.5 },

      "uOffset" : { type: "v2", value: new THREE.Vector2( 0, 0 ) },
      "uRepeat" : { type: "v2", value: new THREE.Vector2( 1, 1 ) },

      "wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }

      }

    ] ),

    fragmentShader: [

      "uniform vec3 ambient;",
      "uniform vec3 diffuse;",
      "uniform vec3 specular;",
      "uniform float shininess;",
      "uniform float opacity;",

      "uniform bool enableDiffuse;",
      "uniform bool enableSpecular;",
      "uniform bool enableAO;",
      "uniform bool enableReflection;",

      "uniform sampler2D tDiffuse;",
      "uniform sampler2D tNormal;",
      "uniform sampler2D tSpecular;",
      "uniform sampler2D tAO;",

      "uniform samplerCube tCube;",

      "uniform vec2 uNormalScale;",

      "uniform bool useRefract;",
      "uniform float refractionRatio;",
      "uniform float reflectivity;",

      "varying vec3 vTangent;",
      "varying vec3 vBinormal;",
      "varying vec3 vNormal;",
      "varying vec2 vUv;",

      "uniform vec3 ambientLightColor;",

      "#if MAX_DIR_LIGHTS > 0",

      " uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
      " uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

      "#endif",

      "#if MAX_HEMI_LIGHTS > 0",

      " uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
      " uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
      " uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

      "#endif",

      "#if MAX_POINT_LIGHTS > 0",

      " uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
      " uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
      " uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

      "#endif",

      "#if MAX_SPOT_LIGHTS > 0",

      " uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
      " uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
      " uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
      " uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
      " uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",
      " uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

      "#endif",

      "#ifdef WRAP_AROUND",

      " uniform vec3 wrapRGB;",

      "#endif",

      "varying vec3 vWorldPosition;",
      "varying vec3 vViewPosition;",

      THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
      THREE.ShaderChunk[ "fog_pars_fragment" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",
        THREE.ShaderChunk[ "logdepthbuf_fragment" ],

      " gl_FragColor = vec4( vec3( 1.0 ), opacity );",

      " vec3 specularTex = vec3( 1.0 );",

      " vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;",
      " normalTex.xy *= uNormalScale;",
      " normalTex = normalize( normalTex );",

      " if( enableDiffuse ) {",

      "   #ifdef GAMMA_INPUT",

      "     vec4 texelColor = texture2D( tDiffuse, vUv );",
      "     texelColor.xyz *= texelColor.xyz;",

      "     gl_FragColor = gl_FragColor * texelColor;",

      "   #else",

      "     gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );",

      "   #endif",

      " }",

      " if( enableAO ) {",

      "   #ifdef GAMMA_INPUT",

      "     vec4 aoColor = texture2D( tAO, vUv );",
      "     aoColor.xyz *= aoColor.xyz;",

      "     gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;",

      "   #else",

      "     gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;",

      "   #endif",

      " }",

      " if( enableSpecular )",
      "   specularTex = texture2D( tSpecular, vUv ).xyz;",

      " mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );",
      " vec3 finalNormal = tsb * normalTex;",

      " #ifdef FLIP_SIDED",

      "   finalNormal = -finalNormal;",

      " #endif",

      " vec3 normal = normalize( finalNormal );",
      " vec3 viewPosition = normalize( vViewPosition );",

        // point lights

      " #if MAX_POINT_LIGHTS > 0",

      "   vec3 pointDiffuse = vec3( 0.0 );",
      "   vec3 pointSpecular = vec3( 0.0 );",

      "   for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

      "     vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
      "     vec3 pointVector = lPosition.xyz + vViewPosition.xyz;",

      "     float pointDistance = 1.0;",
      "     if ( pointLightDistance[ i ] > 0.0 )",
      "       pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );",

      "     pointVector = normalize( pointVector );",

            // diffuse

      "     #ifdef WRAP_AROUND",

      "       float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );",
      "       float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );",

      "       vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

      "     #else",

      "       float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );",

      "     #endif",

      "     pointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;",

            // specular

      "     vec3 pointHalfVector = normalize( pointVector + viewPosition );",
      "     float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
      "     float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

            // 2.0 => 2.0001 is hack to work around ANGLE bug

      "     float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

      "     vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );",
      "     pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;",

      "   }",

      " #endif",

        // spot lights

      " #if MAX_SPOT_LIGHTS > 0",

      "   vec3 spotDiffuse = vec3( 0.0 );",
      "   vec3 spotSpecular = vec3( 0.0 );",

      "   for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

      "     vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
      "     vec3 spotVector = lPosition.xyz + vViewPosition.xyz;",

      "     float spotDistance = 1.0;",
      "     if ( spotLightDistance[ i ] > 0.0 )",
      "       spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );",

      "     spotVector = normalize( spotVector );",

      "     float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

      "     if ( spotEffect > spotLightAngleCos[ i ] ) {",

      "       spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

              // diffuse

      "       #ifdef WRAP_AROUND",

      "         float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );",
      "         float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );",

      "         vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

      "       #else",

      "         float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );",

      "       #endif",

      "       spotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;",

              // specular

      "       vec3 spotHalfVector = normalize( spotVector + viewPosition );",
      "       float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
      "       float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

              // 2.0 => 2.0001 is hack to work around ANGLE bug

      "       float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

      "       vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );",
      "       spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;",

      "     }",

      "   }",

      " #endif",

        // directional lights

      " #if MAX_DIR_LIGHTS > 0",

      "   vec3 dirDiffuse = vec3( 0.0 );",
      "   vec3 dirSpecular = vec3( 0.0 );",

      "   for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {",

      "     vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
      "     vec3 dirVector = normalize( lDirection.xyz );",

            // diffuse

      "     #ifdef WRAP_AROUND",

      "       float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );",
      "       float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );",

      "       vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );",

      "     #else",

      "       float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );",

      "     #endif",

      "     dirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;",

            // specular

      "     vec3 dirHalfVector = normalize( dirVector + viewPosition );",
      "     float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
      "     float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

            // 2.0 => 2.0001 is hack to work around ANGLE bug

      "     float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

      "     vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
      "     dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",

      "   }",

      " #endif",

        // hemisphere lights

      " #if MAX_HEMI_LIGHTS > 0",

      "   vec3 hemiDiffuse  = vec3( 0.0 );",
      "   vec3 hemiSpecular = vec3( 0.0 );" ,

      "   for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

      "     vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
      "     vec3 lVector = normalize( lDirection.xyz );",

            // diffuse

      "     float dotProduct = dot( normal, lVector );",
      "     float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

      "     vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

      "     hemiDiffuse += diffuse * hemiColor;",

            // specular (sky light)


      "     vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
      "     float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
      "     float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );",

            // specular (ground light)

      "     vec3 lVectorGround = -lVector;",

      "     vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
      "     float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
      "     float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );",

      "     float dotProductGround = dot( normal, lVectorGround );",

            // 2.0 => 2.0001 is hack to work around ANGLE bug

      "     float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

      "     vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );",
      "     vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );",
      "     hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

      "   }",

      " #endif",

        // all lights contribution summation

      " vec3 totalDiffuse = vec3( 0.0 );",
      " vec3 totalSpecular = vec3( 0.0 );",

      " #if MAX_DIR_LIGHTS > 0",

      "   totalDiffuse += dirDiffuse;",
      "   totalSpecular += dirSpecular;",

      " #endif",

      " #if MAX_HEMI_LIGHTS > 0",

      "   totalDiffuse += hemiDiffuse;",
      "   totalSpecular += hemiSpecular;",

      " #endif",

      " #if MAX_POINT_LIGHTS > 0",

      "   totalDiffuse += pointDiffuse;",
      "   totalSpecular += pointSpecular;",

      " #endif",

      " #if MAX_SPOT_LIGHTS > 0",

      "   totalDiffuse += spotDiffuse;",
      "   totalSpecular += spotSpecular;",

      " #endif",

      " #ifdef METAL",

      "   gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );",

      " #else",

      "   gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

      " #endif",

      " if ( enableReflection ) {",

      "   vec3 vReflect;",
      "   vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

      "   if ( useRefract ) {",

      "     vReflect = refract( cameraToVertex, normal, refractionRatio );",

      "   } else {",

      "     vReflect = reflect( cameraToVertex, normal );",

      "   }",

      "   vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",

      "   #ifdef GAMMA_INPUT",

      "     cubeColor.xyz *= cubeColor.xyz;",

      "   #endif",

      "   gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );",

      " }",

        THREE.ShaderChunk[ "shadowmap_fragment" ],
        THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
        THREE.ShaderChunk[ "fog_fragment" ],

      "}"

    ].join("\n"),

    vertexShader: [

      "attribute vec4 tangent;",

      "uniform vec2 uOffset;",
      "uniform vec2 uRepeat;",

      "uniform bool enableDisplacement;",

      "#ifdef VERTEX_TEXTURES",

      " uniform sampler2D tDisplacement;",
      " uniform float uDisplacementScale;",
      " uniform float uDisplacementBias;",

      "#endif",

      "varying vec3 vTangent;",
      "varying vec3 vBinormal;",
      "varying vec3 vNormal;",
      "varying vec2 vUv;",

      "varying vec3 vWorldPosition;",
      "varying vec3 vViewPosition;",

      THREE.ShaderChunk[ "skinning_pars_vertex" ],
      THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "skinbase_vertex" ],
        THREE.ShaderChunk[ "skinnormal_vertex" ],

        // normal, tangent and binormal vectors

      " #ifdef USE_SKINNING",

      "   vNormal = normalize( normalMatrix * skinnedNormal.xyz );",

      "   vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );",
      "   vTangent = normalize( normalMatrix * skinnedTangent.xyz );",

      " #else",

      "   vNormal = normalize( normalMatrix * normal );",
      "   vTangent = normalize( normalMatrix * tangent.xyz );",

      " #endif",

      " vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

      " vUv = uv * uRepeat + uOffset;",

        // displacement mapping

      " vec3 displacedPosition;",

      " #ifdef VERTEX_TEXTURES",

      "   if ( enableDisplacement ) {",

      "     vec3 dv = texture2D( tDisplacement, uv ).xyz;",
      "     float df = uDisplacementScale * dv.x + uDisplacementBias;",
      "     displacedPosition = position + normalize( normal ) * df;",

      "   } else {",

      "     #ifdef USE_SKINNING",

      "       vec4 skinVertex = vec4( position, 1.0 );",

      "       vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
      "       skinned     += boneMatY * skinVertex * skinWeight.y;",
      "       skinned     += boneMatZ * skinVertex * skinWeight.z;",
      "       skinned     += boneMatW * skinVertex * skinWeight.w;",

      "       displacedPosition  = skinned.xyz;",

      "     #else",

      "       displacedPosition = position;",

      "     #endif",

      "   }",

      " #else",

      "   #ifdef USE_SKINNING",

      "     vec4 skinVertex = vec4( position, 1.0 );",

      "     vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
      "     skinned     += boneMatY * skinVertex * skinWeight.y;",
      "     skinned     += boneMatZ * skinVertex * skinWeight.z;",
      "     skinned     += boneMatW * skinVertex * skinWeight.w;",

      "     displacedPosition  = skinned.xyz;",

      "   #else",

      "     displacedPosition = position;",

      "   #endif",

      " #endif",

        //

      " vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );",
      " vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );",

      " gl_Position = projectionMatrix * mvPosition;",

        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

        //

      " vWorldPosition = worldPosition.xyz;",
      " vViewPosition = -mvPosition.xyz;",

        // shadows

      " #ifdef USE_SHADOWMAP",

      "   for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

      "     vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

      "   }",

      " #endif",

      "}"

    ].join("\n")

  },

  /* -------------------------------------------------------------------------
  //  Cube map shader
   ------------------------------------------------------------------------- */

  'cube': {

    uniforms: { "tCube": { type: "t", value: null },
          "tFlip": { type: "f", value: -1 } },

    vertexShader: [

      "varying vec3 vWorldPosition;",

      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

      " vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
      " vWorldPosition = worldPosition.xyz;",

      " gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      "uniform samplerCube tCube;",
      "uniform float tFlip;",

      "varying vec3 vWorldPosition;",

      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "void main() {",

      " gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],

      "}"

    ].join("\n")

  },

  // Depth encoding into RGBA texture
  //  based on SpiderGL shadow map example
  //    http://spidergl.org/example.php?id=6
  //  originally from
  //    http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
  //  see also here:
  //    http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/

  'depthRGBA': {

    uniforms: {},

    vertexShader: [

      THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
      THREE.ShaderChunk[ "skinning_pars_vertex" ],
      THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

      "void main() {",

        THREE.ShaderChunk[ "skinbase_vertex" ],
        THREE.ShaderChunk[ "morphtarget_vertex" ],
        THREE.ShaderChunk[ "skinning_vertex" ],
        THREE.ShaderChunk[ "default_vertex" ],
        THREE.ShaderChunk[ "logdepthbuf_vertex" ],

      "}"

    ].join("\n"),

    fragmentShader: [

      THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

      "vec4 pack_depth( const in float depth ) {",

      " const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
      " const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
      " vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );", // "  vec4 res = fract( depth * bit_shift );",
      " res -= res.xxyz * bit_mask;",
      " return res;",

      "}",

      "void main() {",

        THREE.ShaderChunk[ "logdepthbuf_fragment" ],

      " #ifdef USE_LOGDEPTHBUF_EXT",

      "   gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",

      " #else",

      "   gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

      " #endif",

        //"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
        //"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
        //"gl_FragData[ 0 ] = pack_depth( z );",
        //"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

      "}"

    ].join("\n")

  }

};

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.WebGLRenderer = function ( parameters ) {

  console.log( 'THREE.WebGLRenderer', THREE.REVISION );

  parameters = parameters || {};

  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
  _context = parameters.context !== undefined ? parameters.context : null,

  _precision = parameters.precision !== undefined ? parameters.precision : 'highp',

  _buffers = {},

  _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
  _depth = parameters.depth !== undefined ? parameters.depth : true,
  _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
  _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
  _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
  _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
  _logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false,

  _clearColor = new THREE.Color( 0x000000 ),
  _clearAlpha = 0;

  // public properties

  this.domElement = _canvas;
  this.context = null;
  this.devicePixelRatio = parameters.devicePixelRatio !== undefined
        ? parameters.devicePixelRatio
        : self.devicePixelRatio !== undefined
          ? self.devicePixelRatio
          : 1;

  // clearing

  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true;

  // scene graph

  this.sortObjects = true;
  this.autoUpdateObjects = true;

  // physically based shading

  this.gammaInput = false;
  this.gammaOutput = false;

  // shadow map

  this.shadowMapEnabled = false;
  this.shadowMapAutoUpdate = true;
  this.shadowMapType = THREE.PCFShadowMap;
  this.shadowMapCullFace = THREE.CullFaceFront;
  this.shadowMapDebug = false;
  this.shadowMapCascade = false;

  // morphs

  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;

  // flags

  this.autoScaleCubemaps = true;

  // custom render plugins

  this.renderPluginsPre = [];
  this.renderPluginsPost = [];

  // info

  this.info = {

    memory: {

      programs: 0,
      geometries: 0,
      textures: 0

    },

    render: {

      calls: 0,
      vertices: 0,
      faces: 0,
      points: 0

    }

  };

  // internal properties

  var _this = this,

  _programs = [],

  // internal state cache

  _currentProgram = null,
  _currentFramebuffer = null,
  _currentMaterialId = -1,
  _currentGeometryGroupHash = null,
  _currentCamera = null,

  _usedTextureUnits = 0,

  // GL state cache

  _oldDoubleSided = -1,
  _oldFlipSided = -1,

  _oldBlending = -1,

  _oldBlendEquation = -1,
  _oldBlendSrc = -1,
  _oldBlendDst = -1,

  _oldDepthTest = -1,
  _oldDepthWrite = -1,

  _oldPolygonOffset = null,
  _oldPolygonOffsetFactor = null,
  _oldPolygonOffsetUnits = null,

  _oldLineWidth = null,

  _viewportX = 0,
  _viewportY = 0,
  _viewportWidth = _canvas.width,
  _viewportHeight = _canvas.height,
  _currentWidth = 0,
  _currentHeight = 0,

  _newAttributes = new Uint8Array( 16 ),
  _enabledAttributes = new Uint8Array( 16 ),

  // frustum

  _frustum = new THREE.Frustum(),

   // camera matrices cache

  _projScreenMatrix = new THREE.Matrix4(),
  _projScreenMatrixPS = new THREE.Matrix4(),

  _vector3 = new THREE.Vector3(),

  // light arrays cache

  _direction = new THREE.Vector3(),

  _lightsNeedUpdate = true,

  _lights = {

    ambient: [ 0, 0, 0 ],
    directional: { length: 0, colors: new Array(), positions: new Array() },
    point: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },
    spot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },
    hemi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }

  };

  // initialize

  var _gl;

  var _glExtensionTextureFloat;
  var _glExtensionTextureFloatLinear;
  var _glExtensionStandardDerivatives;
  var _glExtensionTextureFilterAnisotropic;
  var _glExtensionCompressedTextureS3TC;
  var _glExtensionElementIndexUint;
  var _glExtensionFragDepth;


  initGL();

  setDefaultGLState();

  this.context = _gl;

  // GPU capabilities

  var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );
  var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
  var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );
  var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );

  var _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;

  var _supportsVertexTextures = ( _maxVertexTextures > 0 );
  var _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;

  var _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];

  //

  var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );
  var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );
  var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );

  var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );
  var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );
  var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );

  /*
  var _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );
  var _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );
  var _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );

  var _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );
  var _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );
  var _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );
  */

  // clamp precision to maximum available

  var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
  var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;

  if ( _precision === "highp" && ! highpAvailable ) {

    if ( mediumpAvailable ) {

      _precision = "mediump";
      console.warn( "WebGLRenderer: highp not supported, using mediump" );

    } else {

      _precision = "lowp";
      console.warn( "WebGLRenderer: highp and mediump not supported, using lowp" );

    }

  }

  if ( _precision === "mediump" && ! mediumpAvailable ) {

    _precision = "lowp";
    console.warn( "WebGLRenderer: mediump not supported, using lowp" );

  }

  // API

  this.getContext = function () {

    return _gl;

  };

  this.supportsVertexTextures = function () {

    return _supportsVertexTextures;

  };

  this.supportsFloatTextures = function () {

    return _glExtensionTextureFloat;

  };

  this.supportsStandardDerivatives = function () {

    return _glExtensionStandardDerivatives;

  };

  this.supportsCompressedTextureS3TC = function () {

    return _glExtensionCompressedTextureS3TC;

  };

  this.getMaxAnisotropy  = function () {

    return _maxAnisotropy;

  };

  this.getPrecision = function () {

    return _precision;

  };

  this.setSize = function ( width, height, updateStyle ) {

    _canvas.width = width * this.devicePixelRatio;
    _canvas.height = height * this.devicePixelRatio;

    if ( updateStyle !== false ) {

      _canvas.style.width = width + 'px';
      _canvas.style.height = height + 'px';

    }

    this.setViewport( 0, 0, width, height );

  };

  this.setViewport = function ( x, y, width, height ) {

    _viewportX = x * this.devicePixelRatio;
    _viewportY = y * this.devicePixelRatio;

    _viewportWidth = width * this.devicePixelRatio;
    _viewportHeight = height * this.devicePixelRatio;

    _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

  };

  this.setScissor = function ( x, y, width, height ) {

    _gl.scissor(
      x * this.devicePixelRatio,
      y * this.devicePixelRatio,
      width * this.devicePixelRatio,
      height * this.devicePixelRatio
    );

  };

  this.enableScissorTest = function ( enable ) {

    enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );

  };

  // Clearing

  this.setClearColor = function ( color, alpha ) {

    _clearColor.set( color );
    _clearAlpha = alpha !== undefined ? alpha : 1;

    _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

  };

  this.setClearColorHex = function ( hex, alpha ) {

    console.warn( 'DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
    this.setClearColor( hex, alpha );

  };

  this.getClearColor = function () {

    return _clearColor;

  };

  this.getClearAlpha = function () {

    return _clearAlpha;

  };

  this.clear = function ( color, depth, stencil ) {

    var bits = 0;

    if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
    if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
    if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

    _gl.clear( bits );

  };

  this.clearColor = function () {

    _gl.clear( _gl.COLOR_BUFFER_BIT );

  };

  this.clearDepth = function () {

    _gl.clear( _gl.DEPTH_BUFFER_BIT );

  };

  this.clearStencil = function () {

    _gl.clear( _gl.STENCIL_BUFFER_BIT );

  };

  this.clearTarget = function ( renderTarget, color, depth, stencil ) {

    this.setRenderTarget( renderTarget );
    this.clear( color, depth, stencil );

  };

  // Plugins

  this.addPostPlugin = function ( plugin ) {

    plugin.init( this );
    this.renderPluginsPost.push( plugin );

  };

  this.addPrePlugin = function ( plugin ) {

    plugin.init( this );
    this.renderPluginsPre.push( plugin );

  };

  // Rendering

  this.updateShadowMap = function ( scene, camera ) {

    _currentProgram = null;
    _oldBlending = -1;
    _oldDepthTest = -1;
    _oldDepthWrite = -1;
    _currentGeometryGroupHash = -1;
    _currentMaterialId = -1;
    _lightsNeedUpdate = true;
    _oldDoubleSided = -1;
    _oldFlipSided = -1;

    this.shadowMapPlugin.update( scene, camera );

  };

  // Internal functions

  // Buffer allocation

  function createParticleBuffers ( geometry ) {

    geometry.__webglVertexBuffer = _gl.createBuffer();
    geometry.__webglColorBuffer = _gl.createBuffer();

    _this.info.memory.geometries ++;

  };

  function createLineBuffers ( geometry ) {

    geometry.__webglVertexBuffer = _gl.createBuffer();
    geometry.__webglColorBuffer = _gl.createBuffer();
    geometry.__webglLineDistanceBuffer = _gl.createBuffer();

    _this.info.memory.geometries ++;

  };

  function createMeshBuffers ( geometryGroup ) {

    geometryGroup.__webglVertexBuffer = _gl.createBuffer();
    geometryGroup.__webglNormalBuffer = _gl.createBuffer();
    geometryGroup.__webglTangentBuffer = _gl.createBuffer();
    geometryGroup.__webglColorBuffer = _gl.createBuffer();
    geometryGroup.__webglUVBuffer = _gl.createBuffer();
    geometryGroup.__webglUV2Buffer = _gl.createBuffer();

    geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
    geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();

    geometryGroup.__webglFaceBuffer = _gl.createBuffer();
    geometryGroup.__webglLineBuffer = _gl.createBuffer();

    var m, ml;

    if ( geometryGroup.numMorphTargets ) {

      geometryGroup.__webglMorphTargetsBuffers = [];

      for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

        geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );

      }

    }

    if ( geometryGroup.numMorphNormals ) {

      geometryGroup.__webglMorphNormalsBuffers = [];

      for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

        geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );

      }

    }

    _this.info.memory.geometries ++;

  };

  // Events

  var onGeometryDispose = function ( event ) {

    var geometry = event.target;

    geometry.removeEventListener( 'dispose', onGeometryDispose );

    deallocateGeometry( geometry );

  };

  var onTextureDispose = function ( event ) {

    var texture = event.target;

    texture.removeEventListener( 'dispose', onTextureDispose );

    deallocateTexture( texture );

    _this.info.memory.textures --;


  };

  var onRenderTargetDispose = function ( event ) {

    var renderTarget = event.target;

    renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

    deallocateRenderTarget( renderTarget );

    _this.info.memory.textures --;

  };

  var onMaterialDispose = function ( event ) {

    var material = event.target;

    material.removeEventListener( 'dispose', onMaterialDispose );

    deallocateMaterial( material );

  };

  // Buffer deallocation

  var deleteBuffers = function ( geometry ) {

    if ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );
    if ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );
    if ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );
    if ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );
    if ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );
    if ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );

    if ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );
    if ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );

    if ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );
    if ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );

    if ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );
    // custom attributes

    if ( geometry.__webglCustomAttributesList !== undefined ) {

      for ( var id in geometry.__webglCustomAttributesList ) {

        _gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );

      }

    }

    _this.info.memory.geometries --;

  };

  var deallocateGeometry = function ( geometry ) {

    geometry.__webglInit = undefined;

    if ( geometry instanceof THREE.BufferGeometry ) {

      var attributes = geometry.attributes;

      for ( var key in attributes ) {

        if ( attributes[ key ].buffer !== undefined ) {

          _gl.deleteBuffer( attributes[ key ].buffer );

        }

      }

      _this.info.memory.geometries --;

    } else {

      if ( geometry.geometryGroups !== undefined ) {

        for ( var g in geometry.geometryGroups ) {

          var geometryGroup = geometry.geometryGroups[ g ];

          if ( geometryGroup.numMorphTargets !== undefined ) {

            for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

              _gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );

            }

          }

          if ( geometryGroup.numMorphNormals !== undefined ) {

            for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

              _gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );

            }

          }

          deleteBuffers( geometryGroup );

        }

      } else {

        deleteBuffers( geometry );

      }

    }

  };

  var deallocateTexture = function ( texture ) {

    if ( texture.image && texture.image.__webglTextureCube ) {

      // cube texture

      _gl.deleteTexture( texture.image.__webglTextureCube );

    } else {

      // 2D texture

      if ( ! texture.__webglInit ) return;

      texture.__webglInit = false;
      _gl.deleteTexture( texture.__webglTexture );

    }

  };

  var deallocateRenderTarget = function ( renderTarget ) {

    if ( !renderTarget || ! renderTarget.__webglTexture ) return;

    _gl.deleteTexture( renderTarget.__webglTexture );

    if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

      for ( var i = 0; i < 6; i ++ ) {

        _gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );
        _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );

      }

    } else {

      _gl.deleteFramebuffer( renderTarget.__webglFramebuffer );
      _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );

    }

  };

  var deallocateMaterial = function ( material ) {

    var program = material.program;

    if ( program === undefined ) return;

    material.program = undefined;

    // only deallocate GL program if this was the last use of shared program
    // assumed there is only single copy of any program in the _programs list
    // (that's how it's constructed)

    var i, il, programInfo;
    var deleteProgram = false;

    for ( i = 0, il = _programs.length; i < il; i ++ ) {

      programInfo = _programs[ i ];

      if ( programInfo.program === program ) {

        programInfo.usedTimes --;

        if ( programInfo.usedTimes === 0 ) {

          deleteProgram = true;

        }

        break;

      }

    }

    if ( deleteProgram === true ) {

      // avoid using array.splice, this is costlier than creating new array from scratch

      var newPrograms = [];

      for ( i = 0, il = _programs.length; i < il; i ++ ) {

        programInfo = _programs[ i ];

        if ( programInfo.program !== program ) {

          newPrograms.push( programInfo );

        }

      }

      _programs = newPrograms;

      _gl.deleteProgram( program );

      _this.info.memory.programs --;

    }

  };

  // Buffer initialization

  function initCustomAttributes ( geometry, object ) {

    var nvertices = geometry.vertices.length;

    var material = object.material;

    if ( material.attributes ) {

      if ( geometry.__webglCustomAttributesList === undefined ) {

        geometry.__webglCustomAttributesList = [];

      }

      for ( var a in material.attributes ) {

        var attribute = material.attributes[ a ];

        if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

          attribute.__webglInitialized = true;

          var size = 1;   // "f" and "i"

          if ( attribute.type === "v2" ) size = 2;
          else if ( attribute.type === "v3" ) size = 3;
          else if ( attribute.type === "v4" ) size = 4;
          else if ( attribute.type === "c"  ) size = 3;

          attribute.size = size;

          attribute.array = new Float32Array( nvertices * size );

          attribute.buffer = _gl.createBuffer();
          attribute.buffer.belongsToAttribute = a;

          attribute.needsUpdate = true;

        }

        geometry.__webglCustomAttributesList.push( attribute );

      }

    }

  };

  function initParticleBuffers ( geometry, object ) {

    var nvertices = geometry.vertices.length;

    geometry.__vertexArray = new Float32Array( nvertices * 3 );
    geometry.__colorArray = new Float32Array( nvertices * 3 );

    geometry.__sortArray = [];

    geometry.__webglParticleCount = nvertices;

    initCustomAttributes ( geometry, object );

  };

  function initLineBuffers ( geometry, object ) {

    var nvertices = geometry.vertices.length;

    geometry.__vertexArray = new Float32Array( nvertices * 3 );
    geometry.__colorArray = new Float32Array( nvertices * 3 );
    geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );

    geometry.__webglLineCount = nvertices;

    initCustomAttributes ( geometry, object );

  };

  function initMeshBuffers ( geometryGroup, object ) {

    var geometry = object.geometry,
      faces3 = geometryGroup.faces3,

      nvertices = faces3.length * 3,
      ntris     = faces3.length * 1,
      nlines    = faces3.length * 3,

      material = getBufferMaterial( object, geometryGroup ),

      uvType = bufferGuessUVType( material ),
      normalType = bufferGuessNormalType( material ),
      vertexColorType = bufferGuessVertexColorType( material );

    // console.log( "uvType", uvType, "normalType", normalType, "vertexColorType", vertexColorType, object, geometryGroup, material );

    geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );

    if ( normalType ) {

      geometryGroup.__normalArray = new Float32Array( nvertices * 3 );

    }

    if ( geometry.hasTangents ) {

      geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );

    }

    if ( vertexColorType ) {

      geometryGroup.__colorArray = new Float32Array( nvertices * 3 );

    }

    if ( uvType ) {

      if ( geometry.faceVertexUvs.length > 0 ) {

        geometryGroup.__uvArray = new Float32Array( nvertices * 2 );

      }

      if ( geometry.faceVertexUvs.length > 1 ) {

        geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );

      }

    }

    if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {

      geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );
      geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );

    }

    var UintArray = _glExtensionElementIndexUint !== null && ntris > 21845 ? Uint32Array : Uint16Array; // 65535 / 3

    geometryGroup.__typeArray = UintArray;
    geometryGroup.__faceArray = new UintArray( ntris * 3 );
    geometryGroup.__lineArray = new UintArray( nlines * 2 );

    var m, ml;

    if ( geometryGroup.numMorphTargets ) {

      geometryGroup.__morphTargetsArrays = [];

      for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

        geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );

      }

    }

    if ( geometryGroup.numMorphNormals ) {

      geometryGroup.__morphNormalsArrays = [];

      for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

        geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );

      }

    }

    geometryGroup.__webglFaceCount = ntris * 3;
    geometryGroup.__webglLineCount = nlines * 2;


    // custom attributes

    if ( material.attributes ) {

      if ( geometryGroup.__webglCustomAttributesList === undefined ) {

        geometryGroup.__webglCustomAttributesList = [];

      }

      for ( var a in material.attributes ) {

        // Do a shallow copy of the attribute object so different geometryGroup chunks use different
        // attribute buffers which are correctly indexed in the setMeshBuffers function

        var originalAttribute = material.attributes[ a ];

        var attribute = {};

        for ( var property in originalAttribute ) {

          attribute[ property ] = originalAttribute[ property ];

        }

        if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

          attribute.__webglInitialized = true;

          var size = 1;   // "f" and "i"

          if( attribute.type === "v2" ) size = 2;
          else if( attribute.type === "v3" ) size = 3;
          else if( attribute.type === "v4" ) size = 4;
          else if( attribute.type === "c"  ) size = 3;

          attribute.size = size;

          attribute.array = new Float32Array( nvertices * size );

          attribute.buffer = _gl.createBuffer();
          attribute.buffer.belongsToAttribute = a;

          originalAttribute.needsUpdate = true;
          attribute.__original = originalAttribute;

        }

        geometryGroup.__webglCustomAttributesList.push( attribute );

      }

    }

    geometryGroup.__inittedArrays = true;

  };

  function getBufferMaterial( object, geometryGroup ) {

    return object.material instanceof THREE.MeshFaceMaterial
      ? object.material.materials[ geometryGroup.materialIndex ]
      : object.material;

  };

  function materialNeedsSmoothNormals ( material ) {

    return material && material.shading !== undefined && material.shading === THREE.SmoothShading;

  };

  function bufferGuessNormalType ( material ) {

    // only MeshBasicMaterial and MeshDepthMaterial don't need normals

    if ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {

      return false;

    }

    if ( materialNeedsSmoothNormals( material ) ) {

      return THREE.SmoothShading;

    } else {

      return THREE.FlatShading;

    }

  };

  function bufferGuessVertexColorType( material ) {

    if ( material.vertexColors ) {

      return material.vertexColors;

    }

    return false;

  };

  function bufferGuessUVType( material ) {

    // material must use some texture to require uvs

    if ( material.map ||
         material.lightMap ||
         material.bumpMap ||
         material.normalMap ||
         material.specularMap ||
         material instanceof THREE.ShaderMaterial ) {

      return true;

    }

    return false;

  };

  //

  function initDirectBuffers( geometry ) {

    for ( var name in geometry.attributes ) {

      var bufferType = ( name === "index" ) ? _gl.ELEMENT_ARRAY_BUFFER : _gl.ARRAY_BUFFER;

      var attribute = geometry.attributes[ name ];
      attribute.buffer = _gl.createBuffer();

      _gl.bindBuffer( bufferType, attribute.buffer );
      _gl.bufferData( bufferType, attribute.array, _gl.STATIC_DRAW );

    }

  }

  // Buffer setting

  function setParticleBuffers ( geometry, hint, object ) {

    var v, c, vertex, offset, index, color,

    vertices = geometry.vertices,
    vl = vertices.length,

    colors = geometry.colors,
    cl = colors.length,

    vertexArray = geometry.__vertexArray,
    colorArray = geometry.__colorArray,

    sortArray = geometry.__sortArray,

    dirtyVertices = geometry.verticesNeedUpdate,
    dirtyElements = geometry.elementsNeedUpdate,
    dirtyColors = geometry.colorsNeedUpdate,

    customAttributes = geometry.__webglCustomAttributesList,
    i, il,
    a, ca, cal, value,
    customAttribute;

    if ( object.sortParticles ) {

      _projScreenMatrixPS.copy( _projScreenMatrix );
      _projScreenMatrixPS.multiply( object.matrixWorld );

      for ( v = 0; v < vl; v ++ ) {

        vertex = vertices[ v ];

        _vector3.copy( vertex );
        _vector3.applyProjection( _projScreenMatrixPS );

        sortArray[ v ] = [ _vector3.z, v ];

      }

      sortArray.sort( numericalSort );

      for ( v = 0; v < vl; v ++ ) {

        vertex = vertices[ sortArray[v][1] ];

        offset = v * 3;

        vertexArray[ offset ]     = vertex.x;
        vertexArray[ offset + 1 ] = vertex.y;
        vertexArray[ offset + 2 ] = vertex.z;

      }

      for ( c = 0; c < cl; c ++ ) {

        offset = c * 3;

        color = colors[ sortArray[c][1] ];

        colorArray[ offset ]     = color.r;
        colorArray[ offset + 1 ] = color.g;
        colorArray[ offset + 2 ] = color.b;

      }

      if ( customAttributes ) {

        for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

          customAttribute = customAttributes[ i ];

          if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) ) continue;

          offset = 0;

          cal = customAttribute.value.length;

          if ( customAttribute.size === 1 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              index = sortArray[ ca ][ 1 ];

              customAttribute.array[ ca ] = customAttribute.value[ index ];

            }

          } else if ( customAttribute.size === 2 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              index = sortArray[ ca ][ 1 ];

              value = customAttribute.value[ index ];

              customAttribute.array[ offset ]   = value.x;
              customAttribute.array[ offset + 1 ] = value.y;

              offset += 2;

            }

          } else if ( customAttribute.size === 3 ) {

            if ( customAttribute.type === "c" ) {

              for ( ca = 0; ca < cal; ca ++ ) {

                index = sortArray[ ca ][ 1 ];

                value = customAttribute.value[ index ];

                customAttribute.array[ offset ]     = value.r;
                customAttribute.array[ offset + 1 ] = value.g;
                customAttribute.array[ offset + 2 ] = value.b;

                offset += 3;

              }

            } else {

              for ( ca = 0; ca < cal; ca ++ ) {

                index = sortArray[ ca ][ 1 ];

                value = customAttribute.value[ index ];

                customAttribute.array[ offset ]   = value.x;
                customAttribute.array[ offset + 1 ] = value.y;
                customAttribute.array[ offset + 2 ] = value.z;

                offset += 3;

              }

            }

          } else if ( customAttribute.size === 4 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              index = sortArray[ ca ][ 1 ];

              value = customAttribute.value[ index ];

              customAttribute.array[ offset ]      = value.x;
              customAttribute.array[ offset + 1  ] = value.y;
              customAttribute.array[ offset + 2  ] = value.z;
              customAttribute.array[ offset + 3  ] = value.w;

              offset += 4;

            }

          }

        }

      }

    } else {

      if ( dirtyVertices ) {

        for ( v = 0; v < vl; v ++ ) {

          vertex = vertices[ v ];

          offset = v * 3;

          vertexArray[ offset ]     = vertex.x;
          vertexArray[ offset + 1 ] = vertex.y;
          vertexArray[ offset + 2 ] = vertex.z;

        }

      }

      if ( dirtyColors ) {

        for ( c = 0; c < cl; c ++ ) {

          color = colors[ c ];

          offset = c * 3;

          colorArray[ offset ]     = color.r;
          colorArray[ offset + 1 ] = color.g;
          colorArray[ offset + 2 ] = color.b;

        }

      }

      if ( customAttributes ) {

        for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

          customAttribute = customAttributes[ i ];

          if ( customAttribute.needsUpdate &&
             ( customAttribute.boundTo === undefined ||
               customAttribute.boundTo === "vertices") ) {

            cal = customAttribute.value.length;

            offset = 0;

            if ( customAttribute.size === 1 ) {

              for ( ca = 0; ca < cal; ca ++ ) {

                customAttribute.array[ ca ] = customAttribute.value[ ca ];

              }

            } else if ( customAttribute.size === 2 ) {

              for ( ca = 0; ca < cal; ca ++ ) {

                value = customAttribute.value[ ca ];

                customAttribute.array[ offset ]   = value.x;
                customAttribute.array[ offset + 1 ] = value.y;

                offset += 2;

              }

            } else if ( customAttribute.size === 3 ) {

              if ( customAttribute.type === "c" ) {

                for ( ca = 0; ca < cal; ca ++ ) {

                  value = customAttribute.value[ ca ];

                  customAttribute.array[ offset ]   = value.r;
                  customAttribute.array[ offset + 1 ] = value.g;
                  customAttribute.array[ offset + 2 ] = value.b;

                  offset += 3;

                }

              } else {

                for ( ca = 0; ca < cal; ca ++ ) {

                  value = customAttribute.value[ ca ];

                  customAttribute.array[ offset ]   = value.x;
                  customAttribute.array[ offset + 1 ] = value.y;
                  customAttribute.array[ offset + 2 ] = value.z;

                  offset += 3;

                }

              }

            } else if ( customAttribute.size === 4 ) {

              for ( ca = 0; ca < cal; ca ++ ) {

                value = customAttribute.value[ ca ];

                customAttribute.array[ offset ]      = value.x;
                customAttribute.array[ offset + 1  ] = value.y;
                customAttribute.array[ offset + 2  ] = value.z;
                customAttribute.array[ offset + 3  ] = value.w;

                offset += 4;

              }

            }

          }

        }

      }

    }

    if ( dirtyVertices || object.sortParticles ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

    }

    if ( dirtyColors || object.sortParticles ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

    }

    if ( customAttributes ) {

      for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

        customAttribute = customAttributes[ i ];

        if ( customAttribute.needsUpdate || object.sortParticles ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
          _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

        }

      }

    }

  }

  function setLineBuffers ( geometry, hint ) {

    var v, c, d, vertex, offset, color,

    vertices = geometry.vertices,
    colors = geometry.colors,
    lineDistances = geometry.lineDistances,

    vl = vertices.length,
    cl = colors.length,
    dl = lineDistances.length,

    vertexArray = geometry.__vertexArray,
    colorArray = geometry.__colorArray,
    lineDistanceArray = geometry.__lineDistanceArray,

    dirtyVertices = geometry.verticesNeedUpdate,
    dirtyColors = geometry.colorsNeedUpdate,
    dirtyLineDistances = geometry.lineDistancesNeedUpdate,

    customAttributes = geometry.__webglCustomAttributesList,

    i, il,
    a, ca, cal, value,
    customAttribute;

    if ( dirtyVertices ) {

      for ( v = 0; v < vl; v ++ ) {

        vertex = vertices[ v ];

        offset = v * 3;

        vertexArray[ offset ]     = vertex.x;
        vertexArray[ offset + 1 ] = vertex.y;
        vertexArray[ offset + 2 ] = vertex.z;

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

    }

    if ( dirtyColors ) {

      for ( c = 0; c < cl; c ++ ) {

        color = colors[ c ];

        offset = c * 3;

        colorArray[ offset ]     = color.r;
        colorArray[ offset + 1 ] = color.g;
        colorArray[ offset + 2 ] = color.b;

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

    }

    if ( dirtyLineDistances ) {

      for ( d = 0; d < dl; d ++ ) {

        lineDistanceArray[ d ] = lineDistances[ d ];

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );

    }

    if ( customAttributes ) {

      for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

        customAttribute = customAttributes[ i ];

        if ( customAttribute.needsUpdate &&
           ( customAttribute.boundTo === undefined ||
             customAttribute.boundTo === "vertices" ) ) {

          offset = 0;

          cal = customAttribute.value.length;

          if ( customAttribute.size === 1 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              customAttribute.array[ ca ] = customAttribute.value[ ca ];

            }

          } else if ( customAttribute.size === 2 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              value = customAttribute.value[ ca ];

              customAttribute.array[ offset ]   = value.x;
              customAttribute.array[ offset + 1 ] = value.y;

              offset += 2;

            }

          } else if ( customAttribute.size === 3 ) {

            if ( customAttribute.type === "c" ) {

              for ( ca = 0; ca < cal; ca ++ ) {

                value = customAttribute.value[ ca ];

                customAttribute.array[ offset ]   = value.r;
                customAttribute.array[ offset + 1 ] = value.g;
                customAttribute.array[ offset + 2 ] = value.b;

                offset += 3;

              }

            } else {

              for ( ca = 0; ca < cal; ca ++ ) {

                value = customAttribute.value[ ca ];

                customAttribute.array[ offset ]   = value.x;
                customAttribute.array[ offset + 1 ] = value.y;
                customAttribute.array[ offset + 2 ] = value.z;

                offset += 3;

              }

            }

          } else if ( customAttribute.size === 4 ) {

            for ( ca = 0; ca < cal; ca ++ ) {

              value = customAttribute.value[ ca ];

              customAttribute.array[ offset ]    = value.x;
              customAttribute.array[ offset + 1  ] = value.y;
              customAttribute.array[ offset + 2  ] = value.z;
              customAttribute.array[ offset + 3  ] = value.w;

              offset += 4;

            }

          }

          _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
          _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

        }

      }

    }

  }

  function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {

    if ( ! geometryGroup.__inittedArrays ) {

      return;

    }

    var normalType = bufferGuessNormalType( material ),
    vertexColorType = bufferGuessVertexColorType( material ),
    uvType = bufferGuessUVType( material ),

    needsSmoothNormals = ( normalType === THREE.SmoothShading );

    var f, fl, fi, face,
    vertexNormals, faceNormal, normal,
    vertexColors, faceColor,
    vertexTangents,
    uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,
    c1, c2, c3, c4,
    sw1, sw2, sw3, sw4,
    si1, si2, si3, si4,
    sa1, sa2, sa3, sa4,
    sb1, sb2, sb3, sb4,
    m, ml, i, il,
    vn, uvi, uv2i,
    vk, vkl, vka,
    nka, chf, faceVertexNormals,
    a,

    vertexIndex = 0,

    offset = 0,
    offset_uv = 0,
    offset_uv2 = 0,
    offset_face = 0,
    offset_normal = 0,
    offset_tangent = 0,
    offset_line = 0,
    offset_color = 0,
    offset_skin = 0,
    offset_morphTarget = 0,
    offset_custom = 0,
    offset_customSrc = 0,

    value,

    vertexArray = geometryGroup.__vertexArray,
    uvArray = geometryGroup.__uvArray,
    uv2Array = geometryGroup.__uv2Array,
    normalArray = geometryGroup.__normalArray,
    tangentArray = geometryGroup.__tangentArray,
    colorArray = geometryGroup.__colorArray,

    skinIndexArray = geometryGroup.__skinIndexArray,
    skinWeightArray = geometryGroup.__skinWeightArray,

    morphTargetsArrays = geometryGroup.__morphTargetsArrays,
    morphNormalsArrays = geometryGroup.__morphNormalsArrays,

    customAttributes = geometryGroup.__webglCustomAttributesList,
    customAttribute,

    faceArray = geometryGroup.__faceArray,
    lineArray = geometryGroup.__lineArray,

    geometry = object.geometry, // this is shared for all chunks

    dirtyVertices = geometry.verticesNeedUpdate,
    dirtyElements = geometry.elementsNeedUpdate,
    dirtyUvs = geometry.uvsNeedUpdate,
    dirtyNormals = geometry.normalsNeedUpdate,
    dirtyTangents = geometry.tangentsNeedUpdate,
    dirtyColors = geometry.colorsNeedUpdate,
    dirtyMorphTargets = geometry.morphTargetsNeedUpdate,

    vertices = geometry.vertices,
    chunk_faces3 = geometryGroup.faces3,
    obj_faces = geometry.faces,

    obj_uvs  = geometry.faceVertexUvs[ 0 ],
    obj_uvs2 = geometry.faceVertexUvs[ 1 ],

    obj_colors = geometry.colors,

    obj_skinIndices = geometry.skinIndices,
    obj_skinWeights = geometry.skinWeights,

    morphTargets = geometry.morphTargets,
    morphNormals = geometry.morphNormals;

    if ( dirtyVertices ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        face = obj_faces[ chunk_faces3[ f ] ];

        v1 = vertices[ face.a ];
        v2 = vertices[ face.b ];
        v3 = vertices[ face.c ];

        vertexArray[ offset ]     = v1.x;
        vertexArray[ offset + 1 ] = v1.y;
        vertexArray[ offset + 2 ] = v1.z;

        vertexArray[ offset + 3 ] = v2.x;
        vertexArray[ offset + 4 ] = v2.y;
        vertexArray[ offset + 5 ] = v2.z;

        vertexArray[ offset + 6 ] = v3.x;
        vertexArray[ offset + 7 ] = v3.y;
        vertexArray[ offset + 8 ] = v3.z;

        offset += 9;

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

    }

    if ( dirtyMorphTargets ) {

      for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {

        offset_morphTarget = 0;

        for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

          chf = chunk_faces3[ f ];
          face = obj_faces[ chf ];

          // morph positions

          v1 = morphTargets[ vk ].vertices[ face.a ];
          v2 = morphTargets[ vk ].vertices[ face.b ];
          v3 = morphTargets[ vk ].vertices[ face.c ];

          vka = morphTargetsArrays[ vk ];

          vka[ offset_morphTarget ]     = v1.x;
          vka[ offset_morphTarget + 1 ] = v1.y;
          vka[ offset_morphTarget + 2 ] = v1.z;

          vka[ offset_morphTarget + 3 ] = v2.x;
          vka[ offset_morphTarget + 4 ] = v2.y;
          vka[ offset_morphTarget + 5 ] = v2.z;

          vka[ offset_morphTarget + 6 ] = v3.x;
          vka[ offset_morphTarget + 7 ] = v3.y;
          vka[ offset_morphTarget + 8 ] = v3.z;

          // morph normals

          if ( material.morphNormals ) {

            if ( needsSmoothNormals ) {

              faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];

              n1 = faceVertexNormals.a;
              n2 = faceVertexNormals.b;
              n3 = faceVertexNormals.c;

            } else {

              n1 = morphNormals[ vk ].faceNormals[ chf ];
              n2 = n1;
              n3 = n1;

            }

            nka = morphNormalsArrays[ vk ];

            nka[ offset_morphTarget ]     = n1.x;
            nka[ offset_morphTarget + 1 ] = n1.y;
            nka[ offset_morphTarget + 2 ] = n1.z;

            nka[ offset_morphTarget + 3 ] = n2.x;
            nka[ offset_morphTarget + 4 ] = n2.y;
            nka[ offset_morphTarget + 5 ] = n2.z;

            nka[ offset_morphTarget + 6 ] = n3.x;
            nka[ offset_morphTarget + 7 ] = n3.y;
            nka[ offset_morphTarget + 8 ] = n3.z;

          }

          //

          offset_morphTarget += 9;

        }

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );
        _gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );

        if ( material.morphNormals ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );
          _gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );

        }

      }

    }

    if ( obj_skinWeights.length ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        face = obj_faces[ chunk_faces3[ f ] ];

        // weights

        sw1 = obj_skinWeights[ face.a ];
        sw2 = obj_skinWeights[ face.b ];
        sw3 = obj_skinWeights[ face.c ];

        skinWeightArray[ offset_skin ]     = sw1.x;
        skinWeightArray[ offset_skin + 1 ] = sw1.y;
        skinWeightArray[ offset_skin + 2 ] = sw1.z;
        skinWeightArray[ offset_skin + 3 ] = sw1.w;

        skinWeightArray[ offset_skin + 4 ] = sw2.x;
        skinWeightArray[ offset_skin + 5 ] = sw2.y;
        skinWeightArray[ offset_skin + 6 ] = sw2.z;
        skinWeightArray[ offset_skin + 7 ] = sw2.w;

        skinWeightArray[ offset_skin + 8 ]  = sw3.x;
        skinWeightArray[ offset_skin + 9 ]  = sw3.y;
        skinWeightArray[ offset_skin + 10 ] = sw3.z;
        skinWeightArray[ offset_skin + 11 ] = sw3.w;

        // indices

        si1 = obj_skinIndices[ face.a ];
        si2 = obj_skinIndices[ face.b ];
        si3 = obj_skinIndices[ face.c ];

        skinIndexArray[ offset_skin ]     = si1.x;
        skinIndexArray[ offset_skin + 1 ] = si1.y;
        skinIndexArray[ offset_skin + 2 ] = si1.z;
        skinIndexArray[ offset_skin + 3 ] = si1.w;

        skinIndexArray[ offset_skin + 4 ] = si2.x;
        skinIndexArray[ offset_skin + 5 ] = si2.y;
        skinIndexArray[ offset_skin + 6 ] = si2.z;
        skinIndexArray[ offset_skin + 7 ] = si2.w;

        skinIndexArray[ offset_skin + 8 ]  = si3.x;
        skinIndexArray[ offset_skin + 9 ]  = si3.y;
        skinIndexArray[ offset_skin + 10 ] = si3.z;
        skinIndexArray[ offset_skin + 11 ] = si3.w;

        offset_skin += 12;

      }

      if ( offset_skin > 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );

      }

    }

    if ( dirtyColors && vertexColorType ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        face = obj_faces[ chunk_faces3[ f ] ];

        vertexColors = face.vertexColors;
        faceColor = face.color;

        if ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {

          c1 = vertexColors[ 0 ];
          c2 = vertexColors[ 1 ];
          c3 = vertexColors[ 2 ];

        } else {

          c1 = faceColor;
          c2 = faceColor;
          c3 = faceColor;

        }

        colorArray[ offset_color ]     = c1.r;
        colorArray[ offset_color + 1 ] = c1.g;
        colorArray[ offset_color + 2 ] = c1.b;

        colorArray[ offset_color + 3 ] = c2.r;
        colorArray[ offset_color + 4 ] = c2.g;
        colorArray[ offset_color + 5 ] = c2.b;

        colorArray[ offset_color + 6 ] = c3.r;
        colorArray[ offset_color + 7 ] = c3.g;
        colorArray[ offset_color + 8 ] = c3.b;

        offset_color += 9;

      }

      if ( offset_color > 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

      }

    }

    if ( dirtyTangents && geometry.hasTangents ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        face = obj_faces[ chunk_faces3[ f ] ];

        vertexTangents = face.vertexTangents;

        t1 = vertexTangents[ 0 ];
        t2 = vertexTangents[ 1 ];
        t3 = vertexTangents[ 2 ];

        tangentArray[ offset_tangent ]     = t1.x;
        tangentArray[ offset_tangent + 1 ] = t1.y;
        tangentArray[ offset_tangent + 2 ] = t1.z;
        tangentArray[ offset_tangent + 3 ] = t1.w;

        tangentArray[ offset_tangent + 4 ] = t2.x;
        tangentArray[ offset_tangent + 5 ] = t2.y;
        tangentArray[ offset_tangent + 6 ] = t2.z;
        tangentArray[ offset_tangent + 7 ] = t2.w;

        tangentArray[ offset_tangent + 8 ]  = t3.x;
        tangentArray[ offset_tangent + 9 ]  = t3.y;
        tangentArray[ offset_tangent + 10 ] = t3.z;
        tangentArray[ offset_tangent + 11 ] = t3.w;

        offset_tangent += 12;

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );

    }

    if ( dirtyNormals && normalType ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        face = obj_faces[ chunk_faces3[ f ] ];

        vertexNormals = face.vertexNormals;
        faceNormal = face.normal;

        if ( vertexNormals.length === 3 && needsSmoothNormals ) {

          for ( i = 0; i < 3; i ++ ) {

            vn = vertexNormals[ i ];

            normalArray[ offset_normal ]     = vn.x;
            normalArray[ offset_normal + 1 ] = vn.y;
            normalArray[ offset_normal + 2 ] = vn.z;

            offset_normal += 3;

          }

        } else {

          for ( i = 0; i < 3; i ++ ) {

            normalArray[ offset_normal ]     = faceNormal.x;
            normalArray[ offset_normal + 1 ] = faceNormal.y;
            normalArray[ offset_normal + 2 ] = faceNormal.z;

            offset_normal += 3;

          }

        }

      }

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );

    }

    if ( dirtyUvs && obj_uvs && uvType ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        fi = chunk_faces3[ f ];

        uv = obj_uvs[ fi ];

        if ( uv === undefined ) continue;

        for ( i = 0; i < 3; i ++ ) {

          uvi = uv[ i ];

          uvArray[ offset_uv ]     = uvi.x;
          uvArray[ offset_uv + 1 ] = uvi.y;

          offset_uv += 2;

        }

      }

      if ( offset_uv > 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );

      }

    }

    if ( dirtyUvs && obj_uvs2 && uvType ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        fi = chunk_faces3[ f ];

        uv2 = obj_uvs2[ fi ];

        if ( uv2 === undefined ) continue;

        for ( i = 0; i < 3; i ++ ) {

          uv2i = uv2[ i ];

          uv2Array[ offset_uv2 ]     = uv2i.x;
          uv2Array[ offset_uv2 + 1 ] = uv2i.y;

          offset_uv2 += 2;

        }

      }

      if ( offset_uv2 > 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );

      }

    }

    if ( dirtyElements ) {

      for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

        faceArray[ offset_face ]   = vertexIndex;
        faceArray[ offset_face + 1 ] = vertexIndex + 1;
        faceArray[ offset_face + 2 ] = vertexIndex + 2;

        offset_face += 3;

        lineArray[ offset_line ]     = vertexIndex;
        lineArray[ offset_line + 1 ] = vertexIndex + 1;

        lineArray[ offset_line + 2 ] = vertexIndex;
        lineArray[ offset_line + 3 ] = vertexIndex + 2;

        lineArray[ offset_line + 4 ] = vertexIndex + 1;
        lineArray[ offset_line + 5 ] = vertexIndex + 2;

        offset_line += 6;

        vertexIndex += 3;

      }

      _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
      _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );

      _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
      _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );

    }

    if ( customAttributes ) {

      for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

        customAttribute = customAttributes[ i ];

        if ( ! customAttribute.__original.needsUpdate ) continue;

        offset_custom = 0;
        offset_customSrc = 0;

        if ( customAttribute.size === 1 ) {

          if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              face = obj_faces[ chunk_faces3[ f ] ];

              customAttribute.array[ offset_custom ]     = customAttribute.value[ face.a ];
              customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
              customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];

              offset_custom += 3;

            }

          } else if ( customAttribute.boundTo === "faces" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              customAttribute.array[ offset_custom ]     = value;
              customAttribute.array[ offset_custom + 1 ] = value;
              customAttribute.array[ offset_custom + 2 ] = value;

              offset_custom += 3;

            }

          }

        } else if ( customAttribute.size === 2 ) {

          if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              face = obj_faces[ chunk_faces3[ f ] ];

              v1 = customAttribute.value[ face.a ];
              v2 = customAttribute.value[ face.b ];
              v3 = customAttribute.value[ face.c ];

              customAttribute.array[ offset_custom ]     = v1.x;
              customAttribute.array[ offset_custom + 1 ] = v1.y;

              customAttribute.array[ offset_custom + 2 ] = v2.x;
              customAttribute.array[ offset_custom + 3 ] = v2.y;

              customAttribute.array[ offset_custom + 4 ] = v3.x;
              customAttribute.array[ offset_custom + 5 ] = v3.y;

              offset_custom += 6;

            }

          } else if ( customAttribute.boundTo === "faces" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              v1 = value;
              v2 = value;
              v3 = value;

              customAttribute.array[ offset_custom ]     = v1.x;
              customAttribute.array[ offset_custom + 1 ] = v1.y;

              customAttribute.array[ offset_custom + 2 ] = v2.x;
              customAttribute.array[ offset_custom + 3 ] = v2.y;

              customAttribute.array[ offset_custom + 4 ] = v3.x;
              customAttribute.array[ offset_custom + 5 ] = v3.y;

              offset_custom += 6;

            }

          }

        } else if ( customAttribute.size === 3 ) {

          var pp;

          if ( customAttribute.type === "c" ) {

            pp = [ "r", "g", "b" ];

          } else {

            pp = [ "x", "y", "z" ];

          }

          if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              face = obj_faces[ chunk_faces3[ f ] ];

              v1 = customAttribute.value[ face.a ];
              v2 = customAttribute.value[ face.b ];
              v3 = customAttribute.value[ face.c ];

              customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

              offset_custom += 9;

            }

          } else if ( customAttribute.boundTo === "faces" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              v1 = value;
              v2 = value;
              v3 = value;

              customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

              offset_custom += 9;

            }

          } else if ( customAttribute.boundTo === "faceVertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              v1 = value[ 0 ];
              v2 = value[ 1 ];
              v3 = value[ 2 ];

              customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

              customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
              customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
              customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

              offset_custom += 9;

            }

          }

        } else if ( customAttribute.size === 4 ) {

          if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              face = obj_faces[ chunk_faces3[ f ] ];

              v1 = customAttribute.value[ face.a ];
              v2 = customAttribute.value[ face.b ];
              v3 = customAttribute.value[ face.c ];

              customAttribute.array[ offset_custom  ]   = v1.x;
              customAttribute.array[ offset_custom + 1  ] = v1.y;
              customAttribute.array[ offset_custom + 2  ] = v1.z;
              customAttribute.array[ offset_custom + 3  ] = v1.w;

              customAttribute.array[ offset_custom + 4  ] = v2.x;
              customAttribute.array[ offset_custom + 5  ] = v2.y;
              customAttribute.array[ offset_custom + 6  ] = v2.z;
              customAttribute.array[ offset_custom + 7  ] = v2.w;

              customAttribute.array[ offset_custom + 8  ] = v3.x;
              customAttribute.array[ offset_custom + 9  ] = v3.y;
              customAttribute.array[ offset_custom + 10 ] = v3.z;
              customAttribute.array[ offset_custom + 11 ] = v3.w;

              offset_custom += 12;

            }

          } else if ( customAttribute.boundTo === "faces" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              v1 = value;
              v2 = value;
              v3 = value;

              customAttribute.array[ offset_custom  ]   = v1.x;
              customAttribute.array[ offset_custom + 1  ] = v1.y;
              customAttribute.array[ offset_custom + 2  ] = v1.z;
              customAttribute.array[ offset_custom + 3  ] = v1.w;

              customAttribute.array[ offset_custom + 4  ] = v2.x;
              customAttribute.array[ offset_custom + 5  ] = v2.y;
              customAttribute.array[ offset_custom + 6  ] = v2.z;
              customAttribute.array[ offset_custom + 7  ] = v2.w;

              customAttribute.array[ offset_custom + 8  ] = v3.x;
              customAttribute.array[ offset_custom + 9  ] = v3.y;
              customAttribute.array[ offset_custom + 10 ] = v3.z;
              customAttribute.array[ offset_custom + 11 ] = v3.w;

              offset_custom += 12;

            }

          } else if ( customAttribute.boundTo === "faceVertices" ) {

            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

              value = customAttribute.value[ chunk_faces3[ f ] ];

              v1 = value[ 0 ];
              v2 = value[ 1 ];
              v3 = value[ 2 ];

              customAttribute.array[ offset_custom  ]   = v1.x;
              customAttribute.array[ offset_custom + 1  ] = v1.y;
              customAttribute.array[ offset_custom + 2  ] = v1.z;
              customAttribute.array[ offset_custom + 3  ] = v1.w;

              customAttribute.array[ offset_custom + 4  ] = v2.x;
              customAttribute.array[ offset_custom + 5  ] = v2.y;
              customAttribute.array[ offset_custom + 6  ] = v2.z;
              customAttribute.array[ offset_custom + 7  ] = v2.w;

              customAttribute.array[ offset_custom + 8  ] = v3.x;
              customAttribute.array[ offset_custom + 9  ] = v3.y;
              customAttribute.array[ offset_custom + 10 ] = v3.z;
              customAttribute.array[ offset_custom + 11 ] = v3.w;

              offset_custom += 12;

            }

          }

        }

        _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
        _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

      }

    }

    if ( dispose ) {

      delete geometryGroup.__inittedArrays;
      delete geometryGroup.__colorArray;
      delete geometryGroup.__normalArray;
      delete geometryGroup.__tangentArray;
      delete geometryGroup.__uvArray;
      delete geometryGroup.__uv2Array;
      delete geometryGroup.__faceArray;
      delete geometryGroup.__vertexArray;
      delete geometryGroup.__lineArray;
      delete geometryGroup.__skinIndexArray;
      delete geometryGroup.__skinWeightArray;

    }

  };

  function setDirectBuffers( geometry, hint ) {

    var attributes = geometry.attributes;

    var attributeName, attributeItem;

    for ( attributeName in attributes ) {

      attributeItem = attributes[ attributeName ];

      if ( attributeItem.needsUpdate ) {

        if ( attributeName === 'index' ) {

          _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.buffer );
          _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, attributeItem.array, hint );

        } else {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
          _gl.bufferData( _gl.ARRAY_BUFFER, attributeItem.array, hint );

        }

        attributeItem.needsUpdate = false;

      }

    }

  }

  // Buffer rendering

  this.renderBufferImmediate = function ( object, program, material ) {

    initAttributes();

    if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();
    if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();
    if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();
    if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();

    if ( object.hasPositions ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
      enableAttribute( program.attributes.position );
      _gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );

    }

    if ( object.hasNormals ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );

      if ( material.shading === THREE.FlatShading ) {

        var nx, ny, nz,
          nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,
          normalArray,
          i, il = object.count * 3;

        for( i = 0; i < il; i += 9 ) {

          normalArray = object.normalArray;

          nax  = normalArray[ i ];
          nay  = normalArray[ i + 1 ];
          naz  = normalArray[ i + 2 ];

          nbx  = normalArray[ i + 3 ];
          nby  = normalArray[ i + 4 ];
          nbz  = normalArray[ i + 5 ];

          ncx  = normalArray[ i + 6 ];
          ncy  = normalArray[ i + 7 ];
          ncz  = normalArray[ i + 8 ];

          nx = ( nax + nbx + ncx ) / 3;
          ny = ( nay + nby + ncy ) / 3;
          nz = ( naz + nbz + ncz ) / 3;

          normalArray[ i ]   = nx;
          normalArray[ i + 1 ] = ny;
          normalArray[ i + 2 ] = nz;

          normalArray[ i + 3 ] = nx;
          normalArray[ i + 4 ] = ny;
          normalArray[ i + 5 ] = nz;

          normalArray[ i + 6 ] = nx;
          normalArray[ i + 7 ] = ny;
          normalArray[ i + 8 ] = nz;

        }

      }

      _gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
      enableAttribute( program.attributes.normal );
      _gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

    }

    if ( object.hasUvs && material.map ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
      enableAttribute( program.attributes.uv );
      _gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

    }

    if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );
      _gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
      enableAttribute( program.attributes.color );
      _gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );

    }

    disableUnusedAttributes();

    _gl.drawArrays( _gl.TRIANGLES, 0, object.count );

    object.count = 0;

  };

  function setupVertexAttributes( material, programAttributes, geometryAttributes, startIndex ) {

    for ( var attributeName in programAttributes ) {

      var attributePointer = programAttributes[ attributeName ];
      var attributeItem = geometryAttributes[ attributeName ];

      if ( attributePointer >= 0 ) {

        if ( attributeItem ) {

          var attributeSize = attributeItem.itemSize;

          _gl.bindBuffer( _gl.ARRAY_BUFFER, attributeItem.buffer );
          enableAttribute( attributePointer );
          _gl.vertexAttribPointer( attributePointer, attributeSize, _gl.FLOAT, false, 0, startIndex * attributeSize * 4 ); // 4 bytes per Float32

        } else if ( material.defaultAttributeValues ) {

          if ( material.defaultAttributeValues[ attributeName ].length === 2 ) {

            _gl.vertexAttrib2fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

          } else if ( material.defaultAttributeValues[ attributeName ].length === 3 ) {

            _gl.vertexAttrib3fv( attributePointer, material.defaultAttributeValues[ attributeName ] );

          }

        }

      }

    }

    disableUnusedAttributes();

  }

  this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {

    if ( material.visible === false ) return;

    var linewidth, a, attribute;
    var attributeItem, attributeName, attributePointer, attributeSize;

    var program = setProgram( camera, lights, fog, material, object );

    var programAttributes = program.attributes;
    var geometryAttributes = geometry.attributes;

    var updateBuffers = false,
      wireframeBit = material.wireframe ? 1 : 0,
      geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

    if ( geometryHash !== _currentGeometryGroupHash ) {

      _currentGeometryGroupHash = geometryHash;
      updateBuffers = true;

    }

    if ( updateBuffers ) {

      initAttributes();

    }

    // render mesh

    if ( object instanceof THREE.Mesh ) {

      var index = geometryAttributes[ "index" ];

      if ( index ) {

        // indexed triangles

        var type, size;

        if ( index.array instanceof Uint32Array ) {

          type = _gl.UNSIGNED_INT;
          size = 4;

        } else {

          type = _gl.UNSIGNED_SHORT;
          size = 2;

        }

        var offsets = geometry.offsets;

        if ( offsets.length === 0 ) {

          if ( updateBuffers ) {

            setupVertexAttributes( material, programAttributes, geometryAttributes, 0 );
            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

          }

          _gl.drawElements( _gl.TRIANGLES, index.array.length, type, 0 );

          _this.info.render.calls ++;
          _this.info.render.vertices += index.array.length; // not really true, here vertices can be shared
          _this.info.render.faces += index.array.length / 3;

        } else {

          // if there is more than 1 chunk
          // must set attribute pointers to use new offsets for each chunk
          // even if geometry and materials didn't change

          updateBuffers = true;

          for ( var i = 0, il = offsets.length; i < il; i ++ ) {

            var startIndex = offsets[ i ].index;

            if ( updateBuffers ) {

              setupVertexAttributes( material, programAttributes, geometryAttributes, startIndex );
              _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

            }

            // render indexed triangles

            _gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, type, offsets[ i ].start * size );

            _this.info.render.calls ++;
            _this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
            _this.info.render.faces += offsets[ i ].count / 3;

          }

        }

      } else {

        // non-indexed triangles

        if ( updateBuffers ) {

          setupVertexAttributes( material, programAttributes, geometryAttributes, 0 );

        }

        var position = geometry.attributes[ "position" ];

        // render non-indexed triangles

        _gl.drawArrays( _gl.TRIANGLES, 0, position.array.length / 3 );

        _this.info.render.calls ++;
        _this.info.render.vertices += position.array.length / 3;
        _this.info.render.faces += position.array.length / 9;

      }

    } else if ( object instanceof THREE.ParticleSystem ) {

      // render particles

      if ( updateBuffers ) {

        setupVertexAttributes( material, programAttributes, geometryAttributes, 0 );

      }

      var position = geometryAttributes[ "position" ];

      // render particles

      _gl.drawArrays( _gl.POINTS, 0, position.array.length / 3 );

      _this.info.render.calls ++;
      _this.info.render.points += position.array.length / 3;

    } else if ( object instanceof THREE.Line ) {

      var mode = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

      setLineWidth( material.linewidth );

      var index = geometryAttributes[ "index" ];

      if ( index ) {

        // indexed lines

        var type, size;

        if ( index.array instanceof Uint32Array ){

          type = _gl.UNSIGNED_INT;
          size = 4;

        } else {

          type = _gl.UNSIGNED_SHORT;
          size = 2;

        }

        var offsets = geometry.offsets;

        if ( offsets.length === 0 ) {

          if ( updateBuffers ) {

            setupVertexAttributes( material, programAttributes, geometryAttributes, 0 );
            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

          }

          _gl.drawElements( _gl.LINES, index.array.length, type, 0 ); // 2 bytes per Uint16Array

          _this.info.render.calls ++;
          _this.info.render.vertices += index.array.length; // not really true, here vertices can be shared

        } else {

          // if there is more than 1 chunk
          // must set attribute pointers to use new offsets for each chunk
          // even if geometry and materials didn't change

          if ( offsets.length > 1 ) updateBuffers = true;

          for ( var i = 0, il = offsets.length; i < il; i ++ ) {

            var startIndex = offsets[ i ].index;

            if ( updateBuffers ) {

              setupVertexAttributes( material, programAttributes, geometryAttributes, startIndex );
              _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

            }

            // render indexed lines

            _gl.drawElements( _gl.LINES, offsets[ i ].count, type, offsets[ i ].start * size ); // 2 bytes per Uint16Array

            _this.info.render.calls ++;
            _this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared

          }

        }

      } else {

        // non-indexed lines

        if ( updateBuffers ) {

          setupVertexAttributes( material, programAttributes, geometryAttributes, 0 );

        }

        var position = geometryAttributes[ "position" ];

        _gl.drawArrays( mode, 0, position.array.length / 3 );

        _this.info.render.calls ++;
        _this.info.render.points += position.array.length / 3;

      }

    }

  };

  this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {

    if ( material.visible === false ) return;

    var linewidth, a, attribute, i, il;

    var program = setProgram( camera, lights, fog, material, object );

    var attributes = program.attributes;

    var updateBuffers = false,
      wireframeBit = material.wireframe ? 1 : 0,
      geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

    if ( geometryGroupHash !== _currentGeometryGroupHash ) {

      _currentGeometryGroupHash = geometryGroupHash;
      updateBuffers = true;

    }

    if ( updateBuffers ) {

      initAttributes();

    }

    // vertices

    if ( !material.morphTargets && attributes.position >= 0 ) {

      if ( updateBuffers ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
        enableAttribute( attributes.position );
        _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

      }

    } else {

      if ( object.morphTargetBase ) {

        setupMorphTargets( material, geometryGroup, object );

      }

    }


    if ( updateBuffers ) {

      // custom attributes

      // Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers

      if ( geometryGroup.__webglCustomAttributesList ) {

        for ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {

          attribute = geometryGroup.__webglCustomAttributesList[ i ];

          if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {

            _gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );
            enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );
            _gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );

          }

        }

      }


      // colors

      if ( attributes.color >= 0 ) {

        if ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
          enableAttribute( attributes.color );
          _gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

        } else if ( material.defaultAttributeValues ) {


          _gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );

        }

      }

      // normals

      if ( attributes.normal >= 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
        enableAttribute( attributes.normal );
        _gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

      }

      // tangents

      if ( attributes.tangent >= 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
        enableAttribute( attributes.tangent );
        _gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );

      }

      // uvs

      if ( attributes.uv >= 0 ) {

        if ( object.geometry.faceVertexUvs[0] ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
          enableAttribute( attributes.uv );
          _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

        } else if ( material.defaultAttributeValues ) {


          _gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );

        }

      }

      if ( attributes.uv2 >= 0 ) {

        if ( object.geometry.faceVertexUvs[1] ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
          enableAttribute( attributes.uv2 );
          _gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );

        } else if ( material.defaultAttributeValues ) {


          _gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );

        }

      }

      if ( material.skinning &&
         attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
        enableAttribute( attributes.skinIndex );
        _gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
        enableAttribute( attributes.skinWeight );
        _gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );

      }

      // line distances

      if ( attributes.lineDistance >= 0 ) {

        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );
        enableAttribute( attributes.lineDistance );
        _gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );

      }

    }

    disableUnusedAttributes();

    // render mesh

    if ( object instanceof THREE.Mesh ) {

      var type = geometryGroup.__typeArray === Uint32Array ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;

      // wireframe

      if ( material.wireframe ) {

        setLineWidth( material.wireframeLinewidth );
        if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
        _gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, type, 0 );

      // triangles

      } else {

        if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
        _gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, type, 0 );

      }

      _this.info.render.calls ++;
      _this.info.render.vertices += geometryGroup.__webglFaceCount;
      _this.info.render.faces += geometryGroup.__webglFaceCount / 3;

    // render lines

    } else if ( object instanceof THREE.Line ) {

      var mode = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

      setLineWidth( material.linewidth );

      _gl.drawArrays( mode, 0, geometryGroup.__webglLineCount );

      _this.info.render.calls ++;

    // render particles

    } else if ( object instanceof THREE.ParticleSystem ) {

      _gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );

      _this.info.render.calls ++;
      _this.info.render.points += geometryGroup.__webglParticleCount;

    }

  };

  function initAttributes() {

    for ( var i = 0, l = _newAttributes.length; i < l; i ++ ) {

      _newAttributes[ i ] = 0;

    }

  }

  function enableAttribute( attribute ) {

    _newAttributes[ attribute ] = 1;

    if ( _enabledAttributes[ attribute ] === 0 ) {

      _gl.enableVertexAttribArray( attribute );
      _enabledAttributes[ attribute ] = 1;

    }

  }

  function disableUnusedAttributes() {

    for ( var i = 0, l = _enabledAttributes.length; i < l; i ++ ) {

      if ( _enabledAttributes[ i ] !== _newAttributes[ i ] ) {

        _gl.disableVertexAttribArray( i );
        _enabledAttributes[ i ] = 0;

      }

    }

  }

  function setupMorphTargets ( material, geometryGroup, object ) {

    // set base

    var attributes = material.program.attributes;

    if ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );
      enableAttribute( attributes.position );
      _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

    } else if ( attributes.position >= 0 ) {

      _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
      enableAttribute( attributes.position );
      _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

    }

    if ( object.morphTargetForcedOrder.length ) {

      // set forced order

      var m = 0;
      var order = object.morphTargetForcedOrder;
      var influences = object.morphTargetInfluences;

      while ( m < material.numSupportedMorphTargets && m < order.length ) {

        if ( attributes[ "morphTarget" + m ] >= 0 ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );
          enableAttribute( attributes[ "morphTarget" + m ] );
          _gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

        }

        if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

          _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );
          enableAttribute( attributes[ "morphNormal" + m ] );
          _gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

        }

        object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];

        m ++;
      }

    } else {

      // find the most influencing

      var influence, activeInfluenceIndices = [];
      var influences = object.morphTargetInfluences;
      var i, il = influences.length;

      for ( i = 0; i < il; i ++ ) {

        influence = influences[ i ];

        if ( influence > 0 ) {

          activeInfluenceIndices.push( [ influence, i ] );

        }

      }

      if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {

        activeInfluenceIndices.sort( numericalSort );
        activeInfluenceIndices.length = material.numSupportedMorphTargets;

      } else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {

        activeInfluenceIndices.sort( numericalSort );

      } else if ( activeInfluenceIndices.length === 0 ) {

        activeInfluenceIndices.push( [ 0, 0 ] );

      };

      var influenceIndex, m = 0;

      while ( m < material.numSupportedMorphTargets ) {

        if ( activeInfluenceIndices[ m ] ) {

          influenceIndex = activeInfluenceIndices[ m ][ 1 ];

          if ( attributes[ "morphTarget" + m ] >= 0 ) {

            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );
            enableAttribute( attributes[ "morphTarget" + m ] );
            _gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

          }

          if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );
            enableAttribute( attributes[ "morphNormal" + m ] );
            _gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );


          }

          object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];

        } else {

          /*
          _gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

          if ( material.morphNormals ) {

            _gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

          }
          */

          object.__webglMorphTargetInfluences[ m ] = 0;

        }

        m ++;

      }

    }

    // load updated influences uniform

    if ( material.program.uniforms.morphTargetInfluences !== null ) {

      _gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );

    }

  };

  // Sorting

  function painterSortStable ( a, b ) {

    if ( a.z !== b.z ) {

      return b.z - a.z;

    } else {

      return a.id - b.id;

    }

  };

  function numericalSort ( a, b ) {

    return b[ 0 ] - a[ 0 ];

  };


  // Rendering

  this.render = function ( scene, camera, renderTarget, forceClear ) {

    if ( camera instanceof THREE.Camera === false ) {

      console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
      return;

    }

    var i, il,

    webglObject, object,
    renderList,

    lights = scene.__lights,
    fog = scene.fog;

    // reset caching for this frame

    _currentMaterialId = -1;
    _lightsNeedUpdate = true;

    // update scene graph

    if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

    // update camera matrices and frustum

    if ( camera.parent === undefined ) camera.updateMatrixWorld();

    camera.matrixWorldInverse.getInverse( camera.matrixWorld );

    _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    _frustum.setFromMatrix( _projScreenMatrix );

    // update WebGL objects

    if ( this.autoUpdateObjects ) this.initWebGLObjects( scene );

    // custom render plugins (pre pass)

    renderPlugins( this.renderPluginsPre, scene, camera );

    //

    _this.info.render.calls = 0;
    _this.info.render.vertices = 0;
    _this.info.render.faces = 0;
    _this.info.render.points = 0;

    this.setRenderTarget( renderTarget );

    if ( this.autoClear || forceClear ) {

      this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

    }

    // set matrices for regular objects (frustum culled)

    renderList = scene.__webglObjects;

    for ( i = 0, il = renderList.length; i < il; i ++ ) {

      webglObject = renderList[ i ];
      object = webglObject.object;

      webglObject.id = i;
      webglObject.render = false;

      if ( object.visible ) {

        if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

          setupMatrices( object, camera );

          unrollBufferMaterial( webglObject );

          webglObject.render = true;

          if ( this.sortObjects === true ) {

            if ( object.renderDepth !== null ) {

              webglObject.z = object.renderDepth;

            } else {

              _vector3.setFromMatrixPosition( object.matrixWorld );
              _vector3.applyProjection( _projScreenMatrix );

              webglObject.z = _vector3.z;

            }

          }

        }

      }

    }

    if ( this.sortObjects ) {

      renderList.sort( painterSortStable );

    }

    // set matrices for immediate objects

    renderList = scene.__webglObjectsImmediate;

    for ( i = 0, il = renderList.length; i < il; i ++ ) {

      webglObject = renderList[ i ];
      object = webglObject.object;

      if ( object.visible ) {

        setupMatrices( object, camera );

        unrollImmediateBufferMaterial( webglObject );

      }

    }

    if ( scene.overrideMaterial ) {

      var material = scene.overrideMaterial;

      this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
      this.setDepthTest( material.depthTest );
      this.setDepthWrite( material.depthWrite );
      setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

      renderObjects( scene.__webglObjects, false, "", camera, lights, fog, true, material );
      renderObjectsImmediate( scene.__webglObjectsImmediate, "", camera, lights, fog, false, material );

    } else {

      var material = null;

      // opaque pass (front-to-back order)

      this.setBlending( THREE.NoBlending );

      renderObjects( scene.__webglObjects, true, "opaque", camera, lights, fog, false, material );
      renderObjectsImmediate( scene.__webglObjectsImmediate, "opaque", camera, lights, fog, false, material );

      // transparent pass (back-to-front order)

      renderObjects( scene.__webglObjects, false, "transparent", camera, lights, fog, true, material );
      renderObjectsImmediate( scene.__webglObjectsImmediate, "transparent", camera, lights, fog, true, material );

    }

    // custom render plugins (post pass)

    renderPlugins( this.renderPluginsPost, scene, camera );


    // Generate mipmap if we're using any kind of mipmap filtering

    if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {

      updateRenderTargetMipmap( renderTarget );

    }

    // Ensure depth buffer writing is enabled so it can be cleared on next render

    this.setDepthTest( true );
    this.setDepthWrite( true );

    // _gl.finish();

  };

  function renderPlugins( plugins, scene, camera ) {

    if ( ! plugins.length ) return;

    for ( var i = 0, il = plugins.length; i < il; i ++ ) {

      // reset state for plugin (to start from clean slate)

      _currentProgram = null;
      _currentCamera = null;

      _oldBlending = -1;
      _oldDepthTest = -1;
      _oldDepthWrite = -1;
      _oldDoubleSided = -1;
      _oldFlipSided = -1;
      _currentGeometryGroupHash = -1;
      _currentMaterialId = -1;

      _lightsNeedUpdate = true;

      plugins[ i ].render( scene, camera, _currentWidth, _currentHeight );

      // reset state after plugin (anything could have changed)

      _currentProgram = null;
      _currentCamera = null;

      _oldBlending = -1;
      _oldDepthTest = -1;
      _oldDepthWrite = -1;
      _oldDoubleSided = -1;
      _oldFlipSided = -1;
      _currentGeometryGroupHash = -1;
      _currentMaterialId = -1;

      _lightsNeedUpdate = true;

    }

  };

  function renderObjects( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

    var webglObject, object, buffer, material, start, end, delta;

    if ( reverse ) {

      start = renderList.length - 1;
      end = -1;
      delta = -1;

    } else {

      start = 0;
      end = renderList.length;
      delta = 1;
    }

    for ( var i = start; i !== end; i += delta ) {

      webglObject = renderList[ i ];

      if ( webglObject.render ) {

        object = webglObject.object;
        buffer = webglObject.buffer;

        if ( overrideMaterial ) {

          material = overrideMaterial;

        } else {

          material = webglObject[ materialType ];

          if ( ! material ) continue;

          if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

          _this.setDepthTest( material.depthTest );
          _this.setDepthWrite( material.depthWrite );
          setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

        }

        _this.setMaterialFaces( material );

        if ( buffer instanceof THREE.BufferGeometry ) {

          _this.renderBufferDirect( camera, lights, fog, material, buffer, object );

        } else {

          _this.renderBuffer( camera, lights, fog, material, buffer, object );

        }

      }

    }

  };

  function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

    var webglObject, object, material, program;

    for ( var i = 0, il = renderList.length; i < il; i ++ ) {

      webglObject = renderList[ i ];
      object = webglObject.object;

      if ( object.visible ) {

        if ( overrideMaterial ) {

          material = overrideMaterial;

        } else {

          material = webglObject[ materialType ];

          if ( ! material ) continue;

          if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

          _this.setDepthTest( material.depthTest );
          _this.setDepthWrite( material.depthWrite );
          setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

        }

        _this.renderImmediateObject( camera, lights, fog, material, object );

      }

    }

  };

  this.renderImmediateObject = function ( camera, lights, fog, material, object ) {

    var program = setProgram( camera, lights, fog, material, object );

    _currentGeometryGroupHash = -1;

    _this.setMaterialFaces( material );

    if ( object.immediateRenderCallback ) {

      object.immediateRenderCallback( program, _gl, _frustum );

    } else {

      object.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );

    }

  };

  function unrollImmediateBufferMaterial ( globject ) {

    var object = globject.object,
      material = object.material;

    if ( material.transparent ) {

      globject.transparent = material;
      globject.opaque = null;

    } else {

      globject.opaque = material;
      globject.transparent = null;

    }

  };

  function unrollBufferMaterial ( globject ) {

    var object = globject.object;
    var buffer = globject.buffer;

    var geometry = object.geometry;
    var material = object.material;

    if ( material instanceof THREE.MeshFaceMaterial ) {

      var materialIndex = geometry instanceof THREE.BufferGeometry ? 0 : buffer.materialIndex;

      material = material.materials[ materialIndex ];

      if ( material.transparent ) {

        globject.transparent = material;
        globject.opaque = null;

      } else {

        globject.opaque = material;
        globject.transparent = null;

      }

    } else {

      if ( material ) {

        if ( material.transparent ) {

          globject.transparent = material;
          globject.opaque = null;

        } else {

          globject.opaque = material;
          globject.transparent = null;

        }

      }

    }

  };

  // Objects refresh

  this.initWebGLObjects = function ( scene ) {

    if ( !scene.__webglObjects ) {

      scene.__webglObjects = [];
      scene.__webglObjectsImmediate = [];
      scene.__webglSprites = [];
      scene.__webglFlares = [];

    }

    while ( scene.__objectsAdded.length ) {

      addObject( scene.__objectsAdded[ 0 ], scene );
      scene.__objectsAdded.splice( 0, 1 );

    }

    while ( scene.__objectsRemoved.length ) {

      removeObject( scene.__objectsRemoved[ 0 ], scene );
      scene.__objectsRemoved.splice( 0, 1 );

    }

    // update must be called after objects adding / removal

    for ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {

      var object = scene.__webglObjects[ o ].object;

      // TODO: Remove this hack (WebGLRenderer refactoring)

      if ( object.__webglInit === undefined ) {

        if ( object.__webglActive !== undefined ) {

          removeObject( object, scene );

        }

        addObject( object, scene );

      }

      updateObject( object );

    }

  };

  // Objects adding

  function addObject( object, scene ) {

    var g, geometry, material, geometryGroup;

    if ( object.__webglInit === undefined ) {

      object.__webglInit = true;

      object._modelViewMatrix = new THREE.Matrix4();
      object._normalMatrix = new THREE.Matrix3();

      geometry = object.geometry;

      if ( geometry === undefined ) {

        // ImmediateRenderObject

      } else if ( geometry.__webglInit === undefined ) {

        geometry.__webglInit = true;
        geometry.addEventListener( 'dispose', onGeometryDispose );

        if ( geometry instanceof THREE.BufferGeometry ) {

          initDirectBuffers( geometry );

        } else if ( object instanceof THREE.Mesh ) {

          material = object.material;

          if ( geometry.geometryGroups === undefined ) {

            geometry.makeGroups( material instanceof THREE.MeshFaceMaterial, _glExtensionElementIndexUint ? 4294967296 : 65535  );

          }

          // create separate VBOs per geometry chunk

          for ( g in geometry.geometryGroups ) {

            geometryGroup = geometry.geometryGroups[ g ];

            // initialise VBO on the first access

            if ( ! geometryGroup.__webglVertexBuffer ) {

              createMeshBuffers( geometryGroup );
              initMeshBuffers( geometryGroup, object );

              geometry.verticesNeedUpdate = true;
              geometry.morphTargetsNeedUpdate = true;
              geometry.elementsNeedUpdate = true;
              geometry.uvsNeedUpdate = true;
              geometry.normalsNeedUpdate = true;
              geometry.tangentsNeedUpdate = true;
              geometry.colorsNeedUpdate = true;

            }

          }

        } else if ( object instanceof THREE.Line ) {

          if ( ! geometry.__webglVertexBuffer ) {

            createLineBuffers( geometry );
            initLineBuffers( geometry, object );

            geometry.verticesNeedUpdate = true;
            geometry.colorsNeedUpdate = true;
            geometry.lineDistancesNeedUpdate = true;

          }

        } else if ( object instanceof THREE.ParticleSystem ) {

          if ( ! geometry.__webglVertexBuffer ) {

            createParticleBuffers( geometry );
            initParticleBuffers( geometry, object );

            geometry.verticesNeedUpdate = true;
            geometry.colorsNeedUpdate = true;

          }

        }

      }

    }

    if ( object.__webglActive === undefined ) {

      if ( object instanceof THREE.Mesh ) {

        geometry = object.geometry;

        if ( geometry instanceof THREE.BufferGeometry ) {

          addBuffer( scene.__webglObjects, geometry, object );

        } else if ( geometry instanceof THREE.Geometry ) {

          for ( g in geometry.geometryGroups ) {

            geometryGroup = geometry.geometryGroups[ g ];

            addBuffer( scene.__webglObjects, geometryGroup, object );

          }

        }

      } else if ( object instanceof THREE.Line ||
            object instanceof THREE.ParticleSystem ) {

        geometry = object.geometry;
        addBuffer( scene.__webglObjects, geometry, object );

      } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

        addBufferImmediate( scene.__webglObjectsImmediate, object );

      } else if ( object instanceof THREE.Sprite ) {

        scene.__webglSprites.push( object );

      } else if ( object instanceof THREE.LensFlare ) {

        scene.__webglFlares.push( object );

      }

      object.__webglActive = true;

    }

  };

  function addBuffer( objlist, buffer, object ) {

    objlist.push(
      {
        id: null,
        buffer: buffer,
        object: object,
        opaque: null,
        transparent: null,
        z: 0
      }
    );

  };

  function addBufferImmediate( objlist, object ) {

    objlist.push(
      {
        id: null,
        object: object,
        opaque: null,
        transparent: null,
        z: 0
      }
    );

  };

  // Objects updates

  function updateObject( object ) {

    var geometry = object.geometry,
      geometryGroup, customAttributesDirty, material;

    if ( geometry instanceof THREE.BufferGeometry ) {

      setDirectBuffers( geometry, _gl.DYNAMIC_DRAW );

    } else if ( object instanceof THREE.Mesh ) {

      // check all geometry groups

      for( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {

        geometryGroup = geometry.geometryGroupsList[ i ];

        material = getBufferMaterial( object, geometryGroup );

        if ( geometry.buffersNeedUpdate ) {

          initMeshBuffers( geometryGroup, object );

        }

        customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

        if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||
           geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
           geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {

          setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );

        }

      }

      geometry.verticesNeedUpdate = false;
      geometry.morphTargetsNeedUpdate = false;
      geometry.elementsNeedUpdate = false;
      geometry.uvsNeedUpdate = false;
      geometry.normalsNeedUpdate = false;
      geometry.colorsNeedUpdate = false;
      geometry.tangentsNeedUpdate = false;

      geometry.buffersNeedUpdate = false;

      material.attributes && clearCustomAttributes( material );

    } else if ( object instanceof THREE.Line ) {

      material = getBufferMaterial( object, geometry );

      customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

      if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {

        setLineBuffers( geometry, _gl.DYNAMIC_DRAW );

      }

      geometry.verticesNeedUpdate = false;
      geometry.colorsNeedUpdate = false;
      geometry.lineDistancesNeedUpdate = false;

      material.attributes && clearCustomAttributes( material );


    } else if ( object instanceof THREE.ParticleSystem ) {

      material = getBufferMaterial( object, geometry );

      customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

      if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {

        setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );

      }

      geometry.verticesNeedUpdate = false;
      geometry.colorsNeedUpdate = false;

      material.attributes && clearCustomAttributes( material );

    }

  };

  // Objects updates - custom attributes check

  function areCustomAttributesDirty( material ) {

    for ( var a in material.attributes ) {

      if ( material.attributes[ a ].needsUpdate ) return true;

    }

    return false;

  };

  function clearCustomAttributes( material ) {

    for ( var a in material.attributes ) {

      material.attributes[ a ].needsUpdate = false;

    }

  };

  // Objects removal

  function removeObject( object, scene ) {

    if ( object instanceof THREE.Mesh  ||
       object instanceof THREE.ParticleSystem ||
       object instanceof THREE.Line ) {

      removeInstances( scene.__webglObjects, object );

    } else if ( object instanceof THREE.Sprite ) {

      removeInstancesDirect( scene.__webglSprites, object );

    } else if ( object instanceof THREE.LensFlare ) {

      removeInstancesDirect( scene.__webglFlares, object );

    } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

      removeInstances( scene.__webglObjectsImmediate, object );

    }

    delete object.__webglActive;

  };

  function removeInstances( objlist, object ) {

    for ( var o = objlist.length - 1; o >= 0; o -- ) {

      if ( objlist[ o ].object === object ) {

        objlist.splice( o, 1 );

      }

    }

  };

  function removeInstancesDirect( objlist, object ) {

    for ( var o = objlist.length - 1; o >= 0; o -- ) {

      if ( objlist[ o ] === object ) {

        objlist.splice( o, 1 );

      }

    }

  };

  // Materials

  this.initMaterial = function ( material, lights, fog, object ) {

    material.addEventListener( 'dispose', onMaterialDispose );

    var u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;

    if ( material instanceof THREE.MeshDepthMaterial ) {

      shaderID = 'depth';

    } else if ( material instanceof THREE.MeshNormalMaterial ) {

      shaderID = 'normal';

    } else if ( material instanceof THREE.MeshBasicMaterial ) {

      shaderID = 'basic';

    } else if ( material instanceof THREE.MeshLambertMaterial ) {

      shaderID = 'lambert';

    } else if ( material instanceof THREE.MeshPhongMaterial ) {

      shaderID = 'phong';

    } else if ( material instanceof THREE.LineBasicMaterial ) {

      shaderID = 'basic';

    } else if ( material instanceof THREE.LineDashedMaterial ) {

      shaderID = 'dashed';

    } else if ( material instanceof THREE.ParticleSystemMaterial ) {

      shaderID = 'particle_basic';

    }

    if ( shaderID ) {

      setMaterialShaders( material, THREE.ShaderLib[ shaderID ] );

    }

    // heuristics to create shader parameters according to lights in the scene
    // (not to blow over maxLights budget)

    maxLightCount = allocateLights( lights );

    maxShadows = allocateShadows( lights );

    maxBones = allocateBones( object );

    parameters = {

      precision: _precision,
      supportsVertexTextures: _supportsVertexTextures,

      map: !!material.map,
      envMap: !!material.envMap,
      lightMap: !!material.lightMap,
      bumpMap: !!material.bumpMap,
      normalMap: !!material.normalMap,
      specularMap: !!material.specularMap,

      vertexColors: material.vertexColors,

      fog: fog,
      useFog: material.fog,
      fogExp: fog instanceof THREE.FogExp2,

      sizeAttenuation: material.sizeAttenuation,
      logarithmicDepthBuffer: _logarithmicDepthBuffer,

      skinning: material.skinning,
      maxBones: maxBones,
      useVertexTexture: _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture,

      morphTargets: material.morphTargets,
      morphNormals: material.morphNormals,
      maxMorphTargets: this.maxMorphTargets,
      maxMorphNormals: this.maxMorphNormals,

      maxDirLights: maxLightCount.directional,
      maxPointLights: maxLightCount.point,
      maxSpotLights: maxLightCount.spot,
      maxHemiLights: maxLightCount.hemi,

      maxShadows: maxShadows,
      shadowMapEnabled: this.shadowMapEnabled && object.receiveShadow && maxShadows > 0,
      shadowMapType: this.shadowMapType,
      shadowMapDebug: this.shadowMapDebug,
      shadowMapCascade: this.shadowMapCascade,

      alphaTest: material.alphaTest,
      metal: material.metal,
      wrapAround: material.wrapAround,
      doubleSided: material.side === THREE.DoubleSide,
      flipSided: material.side === THREE.BackSide

    };

    // Generate code

    var chunks = [];

    if ( shaderID ) {

      chunks.push( shaderID );

    } else {

      chunks.push( material.fragmentShader );
      chunks.push( material.vertexShader );

    }

    for ( var d in material.defines ) {

      chunks.push( d );
      chunks.push( material.defines[ d ] );

    }

    for ( var p in parameters ) {

      chunks.push( p );
      chunks.push( parameters[ p ] );

    }

    var code = chunks.join();

    var program;

    // Check if code has been already compiled

    for ( var p = 0, pl = _programs.length; p < pl; p ++ ) {

      var programInfo = _programs[ p ];

      if ( programInfo.code === code ) {

        program = programInfo;
        program.usedTimes ++;

        break;

      }

    }

    if ( program === undefined ) {

      program = new THREE.WebGLProgram( this, code, material, parameters );
      _programs.push( program );

      _this.info.memory.programs = _programs.length;

    }

    material.program = program;

    var attributes = material.program.attributes;

    if ( material.morphTargets ) {

      material.numSupportedMorphTargets = 0;

      var id, base = "morphTarget";

      for ( i = 0; i < this.maxMorphTargets; i ++ ) {

        id = base + i;

        if ( attributes[ id ] >= 0 ) {

          material.numSupportedMorphTargets ++;

        }

      }

    }

    if ( material.morphNormals ) {

      material.numSupportedMorphNormals = 0;

      var id, base = "morphNormal";

      for ( i = 0; i < this.maxMorphNormals; i ++ ) {

        id = base + i;

        if ( attributes[ id ] >= 0 ) {

          material.numSupportedMorphNormals ++;

        }

      }

    }

    material.uniformsList = [];

    for ( u in material.uniforms ) {

      material.uniformsList.push( [ material.uniforms[ u ], u ] );

    }

  };

  function setMaterialShaders( material, shaders ) {

    material.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );
    material.vertexShader = shaders.vertexShader;
    material.fragmentShader = shaders.fragmentShader;

  };

  function setProgram( camera, lights, fog, material, object ) {

    _usedTextureUnits = 0;

    if ( material.needsUpdate ) {

      if ( material.program ) deallocateMaterial( material );

      _this.initMaterial( material, lights, fog, object );
      material.needsUpdate = false;

    }

    if ( material.morphTargets ) {

      if ( ! object.__webglMorphTargetInfluences ) {

        object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );

      }

    }

    var refreshMaterial = false;

    var program = material.program,
      p_uniforms = program.uniforms,
      m_uniforms = material.uniforms;

    if ( program.id !== _currentProgram ) {

      _gl.useProgram( program.program );
      _currentProgram = program.id;

      refreshMaterial = true;

    }

    if ( material.id !== _currentMaterialId ) {

      _currentMaterialId = material.id;
      refreshMaterial = true;

    }

    if ( refreshMaterial || camera !== _currentCamera ) {

      _gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

      if ( _logarithmicDepthBuffer ) {

        _gl.uniform1f(p_uniforms.logDepthBufFC, 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));

      }


      if ( camera !== _currentCamera ) _currentCamera = camera;

    }

    // skinning uniforms must be set even if material didn't change
    // auto-setting of texture unit for bone texture must go before other textures
    // not sure why, but otherwise weird things happen

    if ( material.skinning ) {

      if ( _supportsBoneTextures && object.skeleton.useVertexTexture ) {

        if ( p_uniforms.boneTexture !== null ) {

          var textureUnit = getTextureUnit();

          _gl.uniform1i( p_uniforms.boneTexture, textureUnit );
          _this.setTexture( object.skeleton.boneTexture, textureUnit );

        }

        if ( p_uniforms.boneTextureWidth !== null ) {

          _gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );

        }

        if ( p_uniforms.boneTextureHeight !== null ) {

          _gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );

        }

      } else {

        if ( p_uniforms.boneGlobalMatrices !== null ) {

          _gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );

        }

      }

    }

    if ( refreshMaterial ) {

      // refresh uniforms common to several materials

      if ( fog && material.fog ) {

        refreshUniformsFog( m_uniforms, fog );

      }

      if ( material instanceof THREE.MeshPhongMaterial ||
         material instanceof THREE.MeshLambertMaterial ||
         material.lights ) {

        if ( _lightsNeedUpdate ) {

          setupLights( program, lights );
          _lightsNeedUpdate = false;

        }

        refreshUniformsLights( m_uniforms, _lights );

      }

      if ( material instanceof THREE.MeshBasicMaterial ||
         material instanceof THREE.MeshLambertMaterial ||
         material instanceof THREE.MeshPhongMaterial ) {

        refreshUniformsCommon( m_uniforms, material );

      }

      // refresh single material specific uniforms

      if ( material instanceof THREE.LineBasicMaterial ) {

        refreshUniformsLine( m_uniforms, material );

      } else if ( material instanceof THREE.LineDashedMaterial ) {

        refreshUniformsLine( m_uniforms, material );
        refreshUniformsDash( m_uniforms, material );

      } else if ( material instanceof THREE.ParticleSystemMaterial ) {

        refreshUniformsParticle( m_uniforms, material );

      } else if ( material instanceof THREE.MeshPhongMaterial ) {

        refreshUniformsPhong( m_uniforms, material );

      } else if ( material instanceof THREE.MeshLambertMaterial ) {

        refreshUniformsLambert( m_uniforms, material );

      } else if ( material instanceof THREE.MeshDepthMaterial ) {

        m_uniforms.mNear.value = camera.near;
        m_uniforms.mFar.value = camera.far;
        m_uniforms.opacity.value = material.opacity;

      } else if ( material instanceof THREE.MeshNormalMaterial ) {

        m_uniforms.opacity.value = material.opacity;

      }

      if ( object.receiveShadow && ! material._shadowPass ) {

        refreshUniformsShadow( m_uniforms, lights );

      }

      // load common uniforms

      loadUniformsGeneric( program, material.uniformsList );

      // load material specific uniforms
      // (shader material also gets them for the sake of genericity)

      if ( material instanceof THREE.ShaderMaterial ||
         material instanceof THREE.MeshPhongMaterial ||
         material.envMap ) {

        if ( p_uniforms.cameraPosition !== null ) {

          _vector3.setFromMatrixPosition( camera.matrixWorld );
          _gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );

        }

      }

      if ( material instanceof THREE.MeshPhongMaterial ||
         material instanceof THREE.MeshLambertMaterial ||
         material instanceof THREE.ShaderMaterial ||
         material.skinning ) {

        if ( p_uniforms.viewMatrix !== null ) {

          _gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

        }

      }

    }

    loadUniformsMatrices( p_uniforms, object );

    if ( p_uniforms.modelMatrix !== null ) {

      _gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

    }

    return program;

  };

  // Uniforms (refresh uniforms objects)

  function refreshUniformsCommon ( uniforms, material ) {

    uniforms.opacity.value = material.opacity;

    if ( _this.gammaInput ) {

      uniforms.diffuse.value.copyGammaToLinear( material.color );

    } else {

      uniforms.diffuse.value = material.color;

    }

    uniforms.map.value = material.map;
    uniforms.lightMap.value = material.lightMap;
    uniforms.specularMap.value = material.specularMap;

    if ( material.bumpMap ) {

      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;

    }

    if ( material.normalMap ) {

      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy( material.normalScale );

    }

    // uv repeat and offset setting priorities
    //  1. color map
    //  2. specular map
    //  3. normal map
    //  4. bump map

    var uvScaleMap;

    if ( material.map ) {

      uvScaleMap = material.map;

    } else if ( material.specularMap ) {

      uvScaleMap = material.specularMap;

    } else if ( material.normalMap ) {

      uvScaleMap = material.normalMap;

    } else if ( material.bumpMap ) {

      uvScaleMap = material.bumpMap;

    }

    if ( uvScaleMap !== undefined ) {

      var offset = uvScaleMap.offset;
      var repeat = uvScaleMap.repeat;

      uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

    }

    uniforms.envMap.value = material.envMap;
    uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;

    if ( _this.gammaInput ) {

      //uniforms.reflectivity.value = material.reflectivity * material.reflectivity;
      uniforms.reflectivity.value = material.reflectivity;

    } else {

      uniforms.reflectivity.value = material.reflectivity;

    }

    uniforms.refractionRatio.value = material.refractionRatio;
    uniforms.combine.value = material.combine;
    uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;

  };

  function refreshUniformsLine ( uniforms, material ) {

    uniforms.diffuse.value = material.color;
    uniforms.opacity.value = material.opacity;

  };

  function refreshUniformsDash ( uniforms, material ) {

    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;

  };

  function refreshUniformsParticle ( uniforms, material ) {

    uniforms.psColor.value = material.color;
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size;
    uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.

    uniforms.map.value = material.map;

  };

  function refreshUniformsFog ( uniforms, fog ) {

    uniforms.fogColor.value = fog.color;

    if ( fog instanceof THREE.Fog ) {

      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;

    } else if ( fog instanceof THREE.FogExp2 ) {

      uniforms.fogDensity.value = fog.density;

    }

  };

  function refreshUniformsPhong ( uniforms, material ) {

    uniforms.shininess.value = material.shininess;

    if ( _this.gammaInput ) {

      uniforms.ambient.value.copyGammaToLinear( material.ambient );
      uniforms.emissive.value.copyGammaToLinear( material.emissive );
      uniforms.specular.value.copyGammaToLinear( material.specular );

    } else {

      uniforms.ambient.value = material.ambient;
      uniforms.emissive.value = material.emissive;
      uniforms.specular.value = material.specular;

    }

    if ( material.wrapAround ) {

      uniforms.wrapRGB.value.copy( material.wrapRGB );

    }

  };

  function refreshUniformsLambert ( uniforms, material ) {

    if ( _this.gammaInput ) {

      uniforms.ambient.value.copyGammaToLinear( material.ambient );
      uniforms.emissive.value.copyGammaToLinear( material.emissive );

    } else {

      uniforms.ambient.value = material.ambient;
      uniforms.emissive.value = material.emissive;

    }

    if ( material.wrapAround ) {

      uniforms.wrapRGB.value.copy( material.wrapRGB );

    }

  };

  function refreshUniformsLights ( uniforms, lights ) {

    uniforms.ambientLightColor.value = lights.ambient;

    uniforms.directionalLightColor.value = lights.directional.colors;
    uniforms.directionalLightDirection.value = lights.directional.positions;

    uniforms.pointLightColor.value = lights.point.colors;
    uniforms.pointLightPosition.value = lights.point.positions;
    uniforms.pointLightDistance.value = lights.point.distances;

    uniforms.spotLightColor.value = lights.spot.colors;
    uniforms.spotLightPosition.value = lights.spot.positions;
    uniforms.spotLightDistance.value = lights.spot.distances;
    uniforms.spotLightDirection.value = lights.spot.directions;
    uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
    uniforms.spotLightExponent.value = lights.spot.exponents;

    uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
    uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
    uniforms.hemisphereLightDirection.value = lights.hemi.positions;

  };

  function refreshUniformsShadow ( uniforms, lights ) {

    if ( uniforms.shadowMatrix ) {

      var j = 0;

      for ( var i = 0, il = lights.length; i < il; i ++ ) {

        var light = lights[ i ];

        if ( ! light.castShadow ) continue;

        if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {

          uniforms.shadowMap.value[ j ] = light.shadowMap;
          uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;

          uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;

          uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;
          uniforms.shadowBias.value[ j ] = light.shadowBias;

          j ++;

        }

      }

    }

  };

  // Uniforms (load to GPU)

  function loadUniformsMatrices ( uniforms, object ) {

    _gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );

    if ( uniforms.normalMatrix ) {

      _gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );

    }

  };

  function getTextureUnit() {

    var textureUnit = _usedTextureUnits;

    if ( textureUnit >= _maxTextures ) {

      console.warn( "WebGLRenderer: trying to use " + textureUnit + " texture units while this GPU supports only " + _maxTextures );

    }

    _usedTextureUnits += 1;

    return textureUnit;

  };

  function loadUniformsGeneric ( program, uniforms ) {

    var uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;

    for ( j = 0, jl = uniforms.length; j < jl; j ++ ) {

      location = program.uniforms[ uniforms[ j ][ 1 ] ];
      if ( !location ) continue;

      uniform = uniforms[ j ][ 0 ];

      type = uniform.type;
      value = uniform.value;

      if ( type === "i" ) { // single integer

        _gl.uniform1i( location, value );

      } else if ( type === "f" ) { // single float

        _gl.uniform1f( location, value );

      } else if ( type === "v2" ) { // single THREE.Vector2

        _gl.uniform2f( location, value.x, value.y );

      } else if ( type === "v3" ) { // single THREE.Vector3

        _gl.uniform3f( location, value.x, value.y, value.z );

      } else if ( type === "v4" ) { // single THREE.Vector4

        _gl.uniform4f( location, value.x, value.y, value.z, value.w );

      } else if ( type === "c" ) { // single THREE.Color

        _gl.uniform3f( location, value.r, value.g, value.b );

      } else if ( type === "iv1" ) { // flat array of integers (JS or typed array)

        _gl.uniform1iv( location, value );

      } else if ( type === "iv" ) { // flat array of integers with 3 x N size (JS or typed array)

        _gl.uniform3iv( location, value );

      } else if ( type === "fv1" ) { // flat array of floats (JS or typed array)

        _gl.uniform1fv( location, value );

      } else if ( type === "fv" ) { // flat array of floats with 3 x N size (JS or typed array)

        _gl.uniform3fv( location, value );

      } else if ( type === "v2v" ) { // array of THREE.Vector2

        if ( uniform._array === undefined ) {

          uniform._array = new Float32Array( 2 * value.length );

        }

        for ( i = 0, il = value.length; i < il; i ++ ) {

          offset = i * 2;

          uniform._array[ offset ]   = value[ i ].x;
          uniform._array[ offset + 1 ] = value[ i ].y;

        }

        _gl.uniform2fv( location, uniform._array );

      } else if ( type === "v3v" ) { // array of THREE.Vector3

        if ( uniform._array === undefined ) {

          uniform._array = new Float32Array( 3 * value.length );

        }

        for ( i = 0, il = value.length; i < il; i ++ ) {

          offset = i * 3;

          uniform._array[ offset ]   = value[ i ].x;
          uniform._array[ offset + 1 ] = value[ i ].y;
          uniform._array[ offset + 2 ] = value[ i ].z;

        }

        _gl.uniform3fv( location, uniform._array );

      } else if ( type === "v4v" ) { // array of THREE.Vector4

        if ( uniform._array === undefined ) {

          uniform._array = new Float32Array( 4 * value.length );

        }

        for ( i = 0, il = value.length; i < il; i ++ ) {

          offset = i * 4;

          uniform._array[ offset ]   = value[ i ].x;
          uniform._array[ offset + 1 ] = value[ i ].y;
          uniform._array[ offset + 2 ] = value[ i ].z;
          uniform._array[ offset + 3 ] = value[ i ].w;

        }

        _gl.uniform4fv( location, uniform._array );

      } else if ( type === "m3") { // single THREE.Matrix3

        _gl.uniformMatrix3fv( location, false, value.elements );

      } else if ( type === "m3v" ) { // array of THREE.Matrix3

        if ( uniform._array === undefined ) {

          uniform._array = new Float32Array( 9 * value.length );

        }

        for ( i = 0, il = value.length; i < il; i ++ ) {

          value[ i ].flattenToArrayOffset( uniform._array, i * 9 );

        }

        _gl.uniformMatrix3fv( location, false, uniform._array );

      } else if ( type === "m4") { // single THREE.Matrix4

        _gl.uniformMatrix4fv( location, false, value.elements );

      } else if ( type === "m4v" ) { // array of THREE.Matrix4

        if ( uniform._array === undefined ) {

          uniform._array = new Float32Array( 16 * value.length );

        }

        for ( i = 0, il = value.length; i < il; i ++ ) {

          value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

        }

        _gl.uniformMatrix4fv( location, false, uniform._array );

      } else if ( type === "t" ) { // single THREE.Texture (2d or cube)

        texture = value;
        textureUnit = getTextureUnit();

        _gl.uniform1i( location, textureUnit );

        if ( !texture ) continue;

        if ( texture.image instanceof Array && texture.image.length === 6 ) {

          setCubeTexture( texture, textureUnit );

        } else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

          setCubeTextureDynamic( texture, textureUnit );

        } else {

          _this.setTexture( texture, textureUnit );

        }

      } else if ( type === "tv" ) { // array of THREE.Texture (2d)

        if ( uniform._array === undefined ) {

          uniform._array = [];

        }

        for( i = 0, il = uniform.value.length; i < il; i ++ ) {

          uniform._array[ i ] = getTextureUnit();

        }

        _gl.uniform1iv( location, uniform._array );

        for( i = 0, il = uniform.value.length; i < il; i ++ ) {

          texture = uniform.value[ i ];
          textureUnit = uniform._array[ i ];

          if ( !texture ) continue;

          _this.setTexture( texture, textureUnit );

        }

      } else {

        console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );

      }

    }

  };

  function setupMatrices ( object, camera ) {

    object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
    object._normalMatrix.getNormalMatrix( object._modelViewMatrix );

  };

  //

  function setColorGamma( array, offset, color, intensitySq ) {

    array[ offset ]     = color.r * color.r * intensitySq;
    array[ offset + 1 ] = color.g * color.g * intensitySq;
    array[ offset + 2 ] = color.b * color.b * intensitySq;

  };

  function setColorLinear( array, offset, color, intensity ) {

    array[ offset ]     = color.r * intensity;
    array[ offset + 1 ] = color.g * intensity;
    array[ offset + 2 ] = color.b * intensity;

  };

  function setupLights ( program, lights ) {

    var l, ll, light, n,
    r = 0, g = 0, b = 0,
    color, skyColor, groundColor,
    intensity,  intensitySq,
    position,
    distance,

    zlights = _lights,

    dirColors = zlights.directional.colors,
    dirPositions = zlights.directional.positions,

    pointColors = zlights.point.colors,
    pointPositions = zlights.point.positions,
    pointDistances = zlights.point.distances,

    spotColors = zlights.spot.colors,
    spotPositions = zlights.spot.positions,
    spotDistances = zlights.spot.distances,
    spotDirections = zlights.spot.directions,
    spotAnglesCos = zlights.spot.anglesCos,
    spotExponents = zlights.spot.exponents,

    hemiSkyColors = zlights.hemi.skyColors,
    hemiGroundColors = zlights.hemi.groundColors,
    hemiPositions = zlights.hemi.positions,

    dirLength = 0,
    pointLength = 0,
    spotLength = 0,
    hemiLength = 0,

    dirCount = 0,
    pointCount = 0,
    spotCount = 0,
    hemiCount = 0,

    dirOffset = 0,
    pointOffset = 0,
    spotOffset = 0,
    hemiOffset = 0;

    for ( l = 0, ll = lights.length; l < ll; l ++ ) {

      light = lights[ l ];

      if ( light.onlyShadow ) continue;

      color = light.color;
      intensity = light.intensity;
      distance = light.distance;

      if ( light instanceof THREE.AmbientLight ) {

        if ( ! light.visible ) continue;

        if ( _this.gammaInput ) {

          r += color.r * color.r;
          g += color.g * color.g;
          b += color.b * color.b;

        } else {

          r += color.r;
          g += color.g;
          b += color.b;

        }

      } else if ( light instanceof THREE.DirectionalLight ) {

        dirCount += 1;

        if ( ! light.visible ) continue;

        _direction.setFromMatrixPosition( light.matrixWorld );
        _vector3.setFromMatrixPosition( light.target.matrixWorld );
        _direction.sub( _vector3 );
        _direction.normalize();

        // skip lights with undefined direction
        // these create troubles in OpenGL (making pixel black)

        if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

        dirOffset = dirLength * 3;

        dirPositions[ dirOffset ]     = _direction.x;
        dirPositions[ dirOffset + 1 ] = _direction.y;
        dirPositions[ dirOffset + 2 ] = _direction.z;

        if ( _this.gammaInput ) {

          setColorGamma( dirColors, dirOffset, color, intensity * intensity );

        } else {

          setColorLinear( dirColors, dirOffset, color, intensity );

        }

        dirLength += 1;

      } else if ( light instanceof THREE.PointLight ) {

        pointCount += 1;

        if ( ! light.visible ) continue;

        pointOffset = pointLength * 3;

        if ( _this.gammaInput ) {

          setColorGamma( pointColors, pointOffset, color, intensity * intensity );

        } else {

          setColorLinear( pointColors, pointOffset, color, intensity );

        }

        _vector3.setFromMatrixPosition( light.matrixWorld );

        pointPositions[ pointOffset ]     = _vector3.x;
        pointPositions[ pointOffset + 1 ] = _vector3.y;
        pointPositions[ pointOffset + 2 ] = _vector3.z;

        pointDistances[ pointLength ] = distance;

        pointLength += 1;

      } else if ( light instanceof THREE.SpotLight ) {

        spotCount += 1;

        if ( ! light.visible ) continue;

        spotOffset = spotLength * 3;

        if ( _this.gammaInput ) {

          setColorGamma( spotColors, spotOffset, color, intensity * intensity );

        } else {

          setColorLinear( spotColors, spotOffset, color, intensity );

        }

        _vector3.setFromMatrixPosition( light.matrixWorld );

        spotPositions[ spotOffset ]     = _vector3.x;
        spotPositions[ spotOffset + 1 ] = _vector3.y;
        spotPositions[ spotOffset + 2 ] = _vector3.z;

        spotDistances[ spotLength ] = distance;

        _direction.copy( _vector3 );
        _vector3.setFromMatrixPosition( light.target.matrixWorld );
        _direction.sub( _vector3 );
        _direction.normalize();

        spotDirections[ spotOffset ]     = _direction.x;
        spotDirections[ spotOffset + 1 ] = _direction.y;
        spotDirections[ spotOffset + 2 ] = _direction.z;

        spotAnglesCos[ spotLength ] = Math.cos( light.angle );
        spotExponents[ spotLength ] = light.exponent;

        spotLength += 1;

      } else if ( light instanceof THREE.HemisphereLight ) {

        hemiCount += 1;

        if ( ! light.visible ) continue;

        _direction.setFromMatrixPosition( light.matrixWorld );
        _direction.normalize();

        // skip lights with undefined direction
        // these create troubles in OpenGL (making pixel black)

        if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

        hemiOffset = hemiLength * 3;

        hemiPositions[ hemiOffset ]     = _direction.x;
        hemiPositions[ hemiOffset + 1 ] = _direction.y;
        hemiPositions[ hemiOffset + 2 ] = _direction.z;

        skyColor = light.color;
        groundColor = light.groundColor;

        if ( _this.gammaInput ) {

          intensitySq = intensity * intensity;

          setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );
          setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );

        } else {

          setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
          setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );

        }

        hemiLength += 1;

      }

    }

    // null eventual remains from removed lights
    // (this is to avoid if in shader)

    for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
    for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
    for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
    for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
    for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;

    zlights.directional.length = dirLength;
    zlights.point.length = pointLength;
    zlights.spot.length = spotLength;
    zlights.hemi.length = hemiLength;

    zlights.ambient[ 0 ] = r;
    zlights.ambient[ 1 ] = g;
    zlights.ambient[ 2 ] = b;

  };

  // GL state setting

  this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

    if ( cullFace === THREE.CullFaceNone ) {

      _gl.disable( _gl.CULL_FACE );

    } else {

      if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

        _gl.frontFace( _gl.CW );

      } else {

        _gl.frontFace( _gl.CCW );

      }

      if ( cullFace === THREE.CullFaceBack ) {

        _gl.cullFace( _gl.BACK );

      } else if ( cullFace === THREE.CullFaceFront ) {

        _gl.cullFace( _gl.FRONT );

      } else {

        _gl.cullFace( _gl.FRONT_AND_BACK );

      }

      _gl.enable( _gl.CULL_FACE );

    }

  };

  this.setMaterialFaces = function ( material ) {

    var doubleSided = material.side === THREE.DoubleSide;
    var flipSided = material.side === THREE.BackSide;

    if ( _oldDoubleSided !== doubleSided ) {

      if ( doubleSided ) {

        _gl.disable( _gl.CULL_FACE );

      } else {

        _gl.enable( _gl.CULL_FACE );

      }

      _oldDoubleSided = doubleSided;

    }

    if ( _oldFlipSided !== flipSided ) {

      if ( flipSided ) {

        _gl.frontFace( _gl.CW );

      } else {

        _gl.frontFace( _gl.CCW );

      }

      _oldFlipSided = flipSided;

    }

  };

  this.setDepthTest = function ( depthTest ) {

    if ( _oldDepthTest !== depthTest ) {

      if ( depthTest ) {

        _gl.enable( _gl.DEPTH_TEST );

      } else {

        _gl.disable( _gl.DEPTH_TEST );

      }

      _oldDepthTest = depthTest;

    }

  };

  this.setDepthWrite = function ( depthWrite ) {

    if ( _oldDepthWrite !== depthWrite ) {

      _gl.depthMask( depthWrite );
      _oldDepthWrite = depthWrite;

    }

  };

  function setLineWidth ( width ) {

    if ( width !== _oldLineWidth ) {

      _gl.lineWidth( width );

      _oldLineWidth = width;

    }

  };

  function setPolygonOffset ( polygonoffset, factor, units ) {

    if ( _oldPolygonOffset !== polygonoffset ) {

      if ( polygonoffset ) {

        _gl.enable( _gl.POLYGON_OFFSET_FILL );

      } else {

        _gl.disable( _gl.POLYGON_OFFSET_FILL );

      }

      _oldPolygonOffset = polygonoffset;

    }

    if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {

      _gl.polygonOffset( factor, units );

      _oldPolygonOffsetFactor = factor;
      _oldPolygonOffsetUnits = units;

    }

  };

  this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {

    if ( blending !== _oldBlending ) {

      if ( blending === THREE.NoBlending ) {

        _gl.disable( _gl.BLEND );

      } else if ( blending === THREE.AdditiveBlending ) {

        _gl.enable( _gl.BLEND );
        _gl.blendEquation( _gl.FUNC_ADD );
        _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );

      } else if ( blending === THREE.SubtractiveBlending ) {

        // TODO: Find blendFuncSeparate() combination
        _gl.enable( _gl.BLEND );
        _gl.blendEquation( _gl.FUNC_ADD );
        _gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );

      } else if ( blending === THREE.MultiplyBlending ) {

        // TODO: Find blendFuncSeparate() combination
        _gl.enable( _gl.BLEND );
        _gl.blendEquation( _gl.FUNC_ADD );
        _gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );

      } else if ( blending === THREE.CustomBlending ) {

        _gl.enable( _gl.BLEND );

      } else {

        _gl.enable( _gl.BLEND );
        _gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );
        _gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );

      }

      _oldBlending = blending;

    }

    if ( blending === THREE.CustomBlending ) {

      if ( blendEquation !== _oldBlendEquation ) {

        _gl.blendEquation( paramThreeToGL( blendEquation ) );

        _oldBlendEquation = blendEquation;

      }

      if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {

        _gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );

        _oldBlendSrc = blendSrc;
        _oldBlendDst = blendDst;

      }

    } else {

      _oldBlendEquation = null;
      _oldBlendSrc = null;
      _oldBlendDst = null;

    }

  };

  // Textures

  function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {

    if ( isImagePowerOfTwo ) {

      _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
      _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

      _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
      _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

    } else {

      _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
      _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

      _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
      _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

    }

    if ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {

      if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {

        _gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );
        texture.__oldAnisotropy = texture.anisotropy;

      }

    }

  };

  this.setTexture = function ( texture, slot ) {

    if ( texture.needsUpdate ) {

      if ( ! texture.__webglInit ) {

        texture.__webglInit = true;

        texture.addEventListener( 'dispose', onTextureDispose );

        texture.__webglTexture = _gl.createTexture();

        _this.info.memory.textures ++;

      }

      _gl.activeTexture( _gl.TEXTURE0 + slot );
      _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

      _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
      _gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
      _gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

      var image = texture.image,
      isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
      glFormat = paramThreeToGL( texture.format ),
      glType = paramThreeToGL( texture.type );

      setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );

      var mipmap, mipmaps = texture.mipmaps;

      if ( texture instanceof THREE.DataTexture ) {

        // use manually created mipmaps if available
        // if there are no manual mipmaps
        // set 0 level mipmap and then use GL to generate other mipmap levels

        if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

          for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

            mipmap = mipmaps[ i ];
            _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

          }

          texture.generateMipmaps = false;

        } else {

          _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

        }

      } else if ( texture instanceof THREE.CompressedTexture ) {

        for( var i = 0, il = mipmaps.length; i < il; i ++ ) {

          mipmap = mipmaps[ i ];
          if ( texture.format!==THREE.RGBAFormat ) {
            _gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
          } else {
            _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
          }

        }

      } else { // regular Texture (image, video, canvas)

        // use manually created mipmaps if available
        // if there are no manual mipmaps
        // set 0 level mipmap and then use GL to generate other mipmap levels

        if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

          for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

            mipmap = mipmaps[ i ];
            _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

          }

          texture.generateMipmaps = false;

        } else {

          _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );

        }

      }

      if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

      texture.needsUpdate = false;

      if ( texture.onUpdate ) texture.onUpdate();

    } else {

      _gl.activeTexture( _gl.TEXTURE0 + slot );
      _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

    }

  };

  function clampToMaxSize ( image, maxSize ) {

    if ( image.width <= maxSize && image.height <= maxSize ) {

      return image;

    }

    // Warning: Scaling through the canvas will only work with images that use
    // premultiplied alpha.

    var maxDimension = Math.max( image.width, image.height );
    var newWidth = Math.floor( image.width * maxSize / maxDimension );
    var newHeight = Math.floor( image.height * maxSize / maxDimension );

    var canvas = document.createElement( 'canvas' );
    canvas.width = newWidth;
    canvas.height = newHeight;

    var ctx = canvas.getContext( "2d" );
    ctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );

    return canvas;

  }

  function setCubeTexture ( texture, slot ) {

    if ( texture.image.length === 6 ) {

      if ( texture.needsUpdate ) {

        if ( ! texture.image.__webglTextureCube ) {

          texture.addEventListener( 'dispose', onTextureDispose );

          texture.image.__webglTextureCube = _gl.createTexture();

          _this.info.memory.textures ++;

        }

        _gl.activeTexture( _gl.TEXTURE0 + slot );
        _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

        _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

        var isCompressed = texture instanceof THREE.CompressedTexture;

        var cubeImage = [];

        for ( var i = 0; i < 6; i ++ ) {

          if ( _this.autoScaleCubemaps && ! isCompressed ) {

            cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );

          } else {

            cubeImage[ i ] = texture.image[ i ];

          }

        }

        var image = cubeImage[ 0 ],
        isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
        glFormat = paramThreeToGL( texture.format ),
        glType = paramThreeToGL( texture.type );

        setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );

        for ( var i = 0; i < 6; i ++ ) {

          if( !isCompressed ) {

            _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

          } else {

            var mipmap, mipmaps = cubeImage[ i ].mipmaps;

            for( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

              mipmap = mipmaps[ j ];
              if ( texture.format!==THREE.RGBAFormat ) {

                _gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

              } else {
                _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
              }

            }
          }
        }

        if ( texture.generateMipmaps && isImagePowerOfTwo ) {

          _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

        }

        texture.needsUpdate = false;

        if ( texture.onUpdate ) texture.onUpdate();

      } else {

        _gl.activeTexture( _gl.TEXTURE0 + slot );
        _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

      }

    }

  };

  function setCubeTextureDynamic ( texture, slot ) {

    _gl.activeTexture( _gl.TEXTURE0 + slot );
    _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );

  };

  // Render targets

  function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {

    _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
    _gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );

  };

  function setupRenderBuffer ( renderbuffer, renderTarget  ) {

    _gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

    if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

      _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
      _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

    /* For some reason this is not working. Defaulting to RGBA4.
    } else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

      _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
      _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
    */
    } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

      _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
      _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

    } else {

      _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

    }

  };

  this.setRenderTarget = function ( renderTarget ) {

    var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

    if ( renderTarget && ! renderTarget.__webglFramebuffer ) {

      if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
      if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;

      renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

      renderTarget.__webglTexture = _gl.createTexture();

      _this.info.memory.textures ++;

      // Setup texture, create render and frame buffers

      var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height ),
        glFormat = paramThreeToGL( renderTarget.format ),
        glType = paramThreeToGL( renderTarget.type );

      if ( isCube ) {

        renderTarget.__webglFramebuffer = [];
        renderTarget.__webglRenderbuffer = [];

        _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
        setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );

        for ( var i = 0; i < 6; i ++ ) {

          renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();
          renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();

          _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

          setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
          setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );

        }

        if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

      } else {

        renderTarget.__webglFramebuffer = _gl.createFramebuffer();

        if ( renderTarget.shareDepthFrom ) {

          renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;

        } else {

          renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();

        }

        _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
        setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );

        _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

        setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );

        if ( renderTarget.shareDepthFrom ) {

          if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

          } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

          }

        } else {

          setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );

        }

        if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

      }

      // Release everything

      if ( isCube ) {

        _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

      } else {

        _gl.bindTexture( _gl.TEXTURE_2D, null );

      }

      _gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
      _gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

    }

    var framebuffer, width, height, vx, vy;

    if ( renderTarget ) {

      if ( isCube ) {

        framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];

      } else {

        framebuffer = renderTarget.__webglFramebuffer;

      }

      width = renderTarget.width;
      height = renderTarget.height;

      vx = 0;
      vy = 0;

    } else {

      framebuffer = null;

      width = _viewportWidth;
      height = _viewportHeight;

      vx = _viewportX;
      vy = _viewportY;

    }

    if ( framebuffer !== _currentFramebuffer ) {

      _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
      _gl.viewport( vx, vy, width, height );

      _currentFramebuffer = framebuffer;

    }

    _currentWidth = width;
    _currentHeight = height;

  };

  function updateRenderTargetMipmap ( renderTarget ) {

    if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

      _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
      _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
      _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

    } else {

      _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
      _gl.generateMipmap( _gl.TEXTURE_2D );
      _gl.bindTexture( _gl.TEXTURE_2D, null );

    }

  };

  // Fallback filters for non-power-of-2 textures

  function filterFallback ( f ) {

    if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

      return _gl.NEAREST;

    }

    return _gl.LINEAR;

  };

  // Map three.js constants to WebGL constants

  function paramThreeToGL ( p ) {

    if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
    if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
    if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

    if ( p === THREE.NearestFilter ) return _gl.NEAREST;
    if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
    if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

    if ( p === THREE.LinearFilter ) return _gl.LINEAR;
    if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
    if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

    if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
    if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
    if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
    if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

    if ( p === THREE.ByteType ) return _gl.BYTE;
    if ( p === THREE.ShortType ) return _gl.SHORT;
    if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
    if ( p === THREE.IntType ) return _gl.INT;
    if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
    if ( p === THREE.FloatType ) return _gl.FLOAT;

    if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
    if ( p === THREE.RGBFormat ) return _gl.RGB;
    if ( p === THREE.RGBAFormat ) return _gl.RGBA;
    if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
    if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

    if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
    if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
    if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

    if ( p === THREE.ZeroFactor ) return _gl.ZERO;
    if ( p === THREE.OneFactor ) return _gl.ONE;
    if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
    if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
    if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
    if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
    if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
    if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

    if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
    if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
    if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

    if ( _glExtensionCompressedTextureS3TC !== undefined ) {

      if ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;
      if ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;
      if ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;
      if ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;

    }

    return 0;

  };

  // Allocations

  function allocateBones ( object ) {

    if ( _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

      return 1024;

    } else {

      // default for when object is not specified
      // ( for example when prebuilding shader
      //   to be used with multiple objects )
      //
      //  - leave some extra space for other uniforms
      //  - limit here is ANGLE's 254 max uniform vectors
      //    (up to 54 should be safe)

      var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );
      var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

      var maxBones = nVertexMatrices;

      if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

        maxBones = Math.min( object.skeleton.bones.length, maxBones );

        if ( maxBones < object.skeleton.bones.length ) {

          console.warn( "WebGLRenderer: too many bones - " + object.skeleton.bones.length + ", this GPU supports just " + maxBones + " (try OpenGL instead of ANGLE)" );

        }

      }

      return maxBones;

    }

  };

  function allocateLights( lights ) {

    var dirLights = 0;
    var pointLights = 0;
    var spotLights = 0;
    var hemiLights = 0;

    for ( var l = 0, ll = lights.length; l < ll; l ++ ) {

      var light = lights[ l ];

      if ( light.onlyShadow || light.visible === false ) continue;

      if ( light instanceof THREE.DirectionalLight ) dirLights ++;
      if ( light instanceof THREE.PointLight ) pointLights ++;
      if ( light instanceof THREE.SpotLight ) spotLights ++;
      if ( light instanceof THREE.HemisphereLight ) hemiLights ++;

    }

    return { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };

  };

  function allocateShadows( lights ) {

    var maxShadows = 0;

    for ( var l = 0, ll = lights.length; l < ll; l++ ) {

      var light = lights[ l ];

      if ( ! light.castShadow ) continue;

      if ( light instanceof THREE.SpotLight ) maxShadows ++;
      if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;

    }

    return maxShadows;

  };

  // Initialization

  function initGL() {

    try {

      var attributes = {
        alpha: _alpha,
        depth: _depth,
        stencil: _stencil,
        antialias: _antialias,
        premultipliedAlpha: _premultipliedAlpha,
        preserveDrawingBuffer: _preserveDrawingBuffer
      };

      _gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

      if ( _gl === null ) {

        throw 'Error creating WebGL context.';

      }

    } catch ( error ) {

      console.error( error );

    }

    _glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );
    _glExtensionTextureFloatLinear = _gl.getExtension( 'OES_texture_float_linear' );
    _glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );

    _glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );

    _glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || _gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );

    _glExtensionElementIndexUint = _gl.getExtension( 'OES_element_index_uint' );


    if ( _glExtensionTextureFloat === null ) {

      console.log( 'THREE.WebGLRenderer: Float textures not supported.' );

    }

    if ( _glExtensionStandardDerivatives === null ) {

      console.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );

    }

    if ( _glExtensionTextureFilterAnisotropic === null ) {

      console.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );

    }

    if ( _glExtensionCompressedTextureS3TC === null ) {

      console.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );

    }

    if ( _glExtensionElementIndexUint === null ) {

      console.log( 'THREE.WebGLRenderer: elementindex as unsigned integer not supported.' );

    }

    if ( _gl.getShaderPrecisionFormat === undefined ) {

      _gl.getShaderPrecisionFormat = function() {

        return {
          "rangeMin"  : 1,
          "rangeMax"  : 1,
          "precision" : 1
        };

      }
    }

    if ( _logarithmicDepthBuffer ) {

      _glExtensionFragDepth = _gl.getExtension( 'EXT_frag_depth' );

    }

  };

  function setDefaultGLState () {

    _gl.clearColor( 0, 0, 0, 1 );
    _gl.clearDepth( 1 );
    _gl.clearStencil( 0 );

    _gl.enable( _gl.DEPTH_TEST );
    _gl.depthFunc( _gl.LEQUAL );

    _gl.frontFace( _gl.CCW );
    _gl.cullFace( _gl.BACK );
    _gl.enable( _gl.CULL_FACE );

    _gl.enable( _gl.BLEND );
    _gl.blendEquation( _gl.FUNC_ADD );
    _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );

    _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

    _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

  };

  // default plugins (order is important)

  this.shadowMapPlugin = new THREE.ShadowMapPlugin();
  this.addPrePlugin( this.shadowMapPlugin );

  this.addPostPlugin( new THREE.SpritePlugin() );
  this.addPostPlugin( new THREE.LensFlarePlugin() );

};

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.WebGLRenderTarget = function ( width, height, options ) {

  this.width = width;
  this.height = height;

  options = options || {};

  this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
  this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;

  this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
  this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;

  this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;

  this.offset = new THREE.Vector2( 0, 0 );
  this.repeat = new THREE.Vector2( 1, 1 );

  this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
  this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;

  this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

  this.generateMipmaps = true;

  this.shareDepthFrom = null;

};

THREE.WebGLRenderTarget.prototype = {

  constructor: THREE.WebGLRenderTarget,

  setSize: function ( width, height ) {

    this.width = width;
    this.height = height;

  },

  clone: function () {

    var tmp = new THREE.WebGLRenderTarget( this.width, this.height );

    tmp.wrapS = this.wrapS;
    tmp.wrapT = this.wrapT;

    tmp.magFilter = this.magFilter;
    tmp.minFilter = this.minFilter;

    tmp.anisotropy = this.anisotropy;

    tmp.offset.copy( this.offset );
    tmp.repeat.copy( this.repeat );

    tmp.format = this.format;
    tmp.type = this.type;

    tmp.depthBuffer = this.depthBuffer;
    tmp.stencilBuffer = this.stencilBuffer;

    tmp.generateMipmaps = this.generateMipmaps;

    tmp.shareDepthFrom = this.shareDepthFrom;

    return tmp;

  },

  dispose: function () {

    this.dispatchEvent( { type: 'dispose' } );

  }

};

THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );

/**
 * @author alteredq / http://alteredqualia.com
 */

THREE.WebGLRenderTargetCube = function ( width, height, options ) {

  THREE.WebGLRenderTarget.call( this, width, height, options );

  this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

};

THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );

THREE.WebGLProgram = ( function () {

  var programIdCount = 0;

  var generateDefines = function ( defines ) {

    var value, chunk, chunks = [];

    for ( var d in defines ) {

      value = defines[ d ];
      if ( value === false ) continue;

      chunk = "#define " + d + " " + value;
      chunks.push( chunk );

    }

    return chunks.join( "\n" );

  };

  var cacheUniformLocations = function ( gl, program, identifiers ) {

    var uniforms = {};

    for ( var i = 0, l = identifiers.length; i < l; i ++ ) {

      var id = identifiers[ i ];
      uniforms[ id ] = gl.getUniformLocation( program, id );

    }

    return uniforms;

  };

  var cacheAttributeLocations = function ( gl, program, identifiers ) {

    var attributes = {};

    for ( var i = 0, l = identifiers.length; i < l; i ++ ) {

      var id = identifiers[ i ];
      attributes[ id ] = gl.getAttribLocation( program, id );

    }

    return attributes;

  };

  return function ( renderer, code, material, parameters ) {

    var _this = renderer;
    var _gl = _this.context;

    var fragmentShader = material.fragmentShader;
    var vertexShader = material.vertexShader;
    var uniforms = material.uniforms;
    var attributes = material.attributes;
    var defines = material.defines;
    var index0AttributeName = material.index0AttributeName;

    if ( index0AttributeName === undefined && parameters.morphTargets === true ) {

      // programs with morphTargets displace position out of attribute 0

      index0AttributeName = 'position';

    }

    var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";

    if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";

    } else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";

    }

    // console.log( "building new program " );

    //

    var customDefines = generateDefines( defines );

    //

    var program = _gl.createProgram();

    var prefix_vertex, prefix_fragment;

    if ( material instanceof THREE.RawShaderMaterial ) {

      prefix_vertex = '';
      prefix_fragment = '';

    } else {

      prefix_vertex = [

        "precision " + parameters.precision + " float;",
        "precision " + parameters.precision + " int;",

        customDefines,

        parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",

        _this.gammaInput ? "#define GAMMA_INPUT" : "",
        _this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

        "#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
        "#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
        "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
        "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

        "#define MAX_SHADOWS " + parameters.maxShadows,

        "#define MAX_BONES " + parameters.maxBones,

        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",

        parameters.skinning ? "#define USE_SKINNING" : "",
        parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",

        parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
        parameters.morphNormals ? "#define USE_MORPHNORMALS" : "",
        parameters.wrapAround ? "#define WRAP_AROUND" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",

        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
        parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

        parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",

        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        //_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",


        "uniform mat4 modelMatrix;",
        "uniform mat4 modelViewMatrix;",
        "uniform mat4 projectionMatrix;",
        "uniform mat4 viewMatrix;",
        "uniform mat3 normalMatrix;",
        "uniform vec3 cameraPosition;",

        "attribute vec3 position;",
        "attribute vec3 normal;",
        "attribute vec2 uv;",
        "attribute vec2 uv2;",

        "#ifdef USE_COLOR",

        " attribute vec3 color;",

        "#endif",

        "#ifdef USE_MORPHTARGETS",

        " attribute vec3 morphTarget0;",
        " attribute vec3 morphTarget1;",
        " attribute vec3 morphTarget2;",
        " attribute vec3 morphTarget3;",

        " #ifdef USE_MORPHNORMALS",

        "   attribute vec3 morphNormal0;",
        "   attribute vec3 morphNormal1;",
        "   attribute vec3 morphNormal2;",
        "   attribute vec3 morphNormal3;",

        " #else",

        "   attribute vec3 morphTarget4;",
        "   attribute vec3 morphTarget5;",
        "   attribute vec3 morphTarget6;",
        "   attribute vec3 morphTarget7;",

        " #endif",

        "#endif",

        "#ifdef USE_SKINNING",

        " attribute vec4 skinIndex;",
        " attribute vec4 skinWeight;",

        "#endif",

        ""

      ].join( '\n' );

      prefix_fragment = [

        "precision " + parameters.precision + " float;",
        "precision " + parameters.precision + " int;",

        ( parameters.bumpMap || parameters.normalMap ) ? "#extension GL_OES_standard_derivatives : enable" : "",

        customDefines,

        "#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
        "#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
        "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
        "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

        "#define MAX_SHADOWS " + parameters.maxShadows,

        parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest: "",

        _this.gammaInput ? "#define GAMMA_INPUT" : "",
        _this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

        ( parameters.useFog && parameters.fog ) ? "#define USE_FOG" : "",
        ( parameters.useFog && parameters.fogExp ) ? "#define FOG_EXP2" : "",

        parameters.map ? "#define USE_MAP" : "",
        parameters.envMap ? "#define USE_ENVMAP" : "",
        parameters.lightMap ? "#define USE_LIGHTMAP" : "",
        parameters.bumpMap ? "#define USE_BUMPMAP" : "",
        parameters.normalMap ? "#define USE_NORMALMAP" : "",
        parameters.specularMap ? "#define USE_SPECULARMAP" : "",
        parameters.vertexColors ? "#define USE_COLOR" : "",

        parameters.metal ? "#define METAL" : "",
        parameters.wrapAround ? "#define WRAP_AROUND" : "",
        parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
        parameters.flipSided ? "#define FLIP_SIDED" : "",

        parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
        parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
        parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
        parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

        parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
        //_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",

        "uniform mat4 viewMatrix;",
        "uniform vec3 cameraPosition;",
        ""

      ].join( '\n' );

    }

    var glVertexShader = new THREE.WebGLShader( _gl, _gl.VERTEX_SHADER, prefix_vertex + vertexShader );
    var glFragmentShader = new THREE.WebGLShader( _gl, _gl.FRAGMENT_SHADER, prefix_fragment + fragmentShader );

    _gl.attachShader( program, glVertexShader );
    _gl.attachShader( program, glFragmentShader );

    if ( index0AttributeName !== undefined ) {

      // Force a particular attribute to index 0.
      // because potentially expensive emulation is done by browser if attribute 0 is disabled.
      // And, color, for example is often automatically bound to index 0 so disabling it

      _gl.bindAttribLocation( program, 0, index0AttributeName );

    }

    _gl.linkProgram( program );

    if ( _gl.getProgramParameter( program, _gl.LINK_STATUS ) === false ) {

      console.error( 'Could not initialise shader' );
      console.error( 'gl.VALIDATE_STATUS', _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) );
      console.error( 'gl.getError()', _gl.getError() );

    }

    if ( _gl.getProgramInfoLog( program ) !== '' ) {

      console.error( 'gl.getProgramInfoLog()', _gl.getProgramInfoLog( program ) );

    }

    // clean up

    _gl.deleteShader( glVertexShader );
    _gl.deleteShader( glFragmentShader );

    // cache uniform locations

    var identifiers = [

      'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',
      'morphTargetInfluences'

    ];

    if ( parameters.useVertexTexture ) {

      identifiers.push( 'boneTexture' );
      identifiers.push( 'boneTextureWidth' );
      identifiers.push( 'boneTextureHeight' );

    } else {

      identifiers.push( 'boneGlobalMatrices' );

    }

    if ( parameters.logarithmicDepthBuffer ) {

      identifiers.push('logDepthBufFC');

    }


    for ( var u in uniforms ) {

      identifiers.push( u );

    }

    this.uniforms = cacheUniformLocations( _gl, program, identifiers );

    // cache attributes locations

    identifiers = [

      "position", "normal", "uv", "uv2", "tangent", "color",
      "skinIndex", "skinWeight", "lineDistance"

    ];

    for ( var i = 0; i < parameters.maxMorphTargets; i ++ ) {

      identifiers.push( "morphTarget" + i );

    }

    for ( var i = 0; i < parameters.maxMorphNormals; i ++ ) {

      identifiers.push( "morphNormal" + i );

    }

    for ( var a in attributes ) {

      identifiers.push( a );

    }

    this.attributes = cacheAttributeLocations( _gl, program, identifiers );

    //

    this.id = programIdCount ++;
    this.code = code;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;

    return this;

  };

} )();

THREE.WebGLShader = ( function () {

  var addLineNumbers = function ( string ) {

    var lines = string.split( '\n' );

    for ( var i = 0; i < lines.length; i ++ ) {

      lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

    }

    return lines.join( '\n' );

  };

  return function ( gl, type, string ) {

    var shader = gl.createShader( type ); 

    gl.shaderSource( shader, string );
    gl.compileShader( shader );

    if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

      console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

    }

    if ( gl.getShaderInfoLog( shader ) !== '' ) {

      console.error( 'THREE.WebGLShader:', 'gl.getShaderInfoLog()', gl.getShaderInfoLog( shader ) );
      console.error( addLineNumbers( string ) );

    }

    // --enable-privileged-webgl-extension
    // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

    return shader;

  };

} )();
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableVertex = function () {

  this.position = new THREE.Vector3();
  this.positionWorld = new THREE.Vector3();
  this.positionScreen = new THREE.Vector4();

  this.visible = true;

};

THREE.RenderableVertex.prototype.copy = function ( vertex ) {

  this.positionWorld.copy( vertex.positionWorld );
  this.positionScreen.copy( vertex.positionScreen );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableFace = function () {

  this.id = 0;

  this.v1 = new THREE.RenderableVertex();
  this.v2 = new THREE.RenderableVertex();
  this.v3 = new THREE.RenderableVertex();

  this.normalModel = new THREE.Vector3();

  this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
  this.vertexNormalsLength = 0;

  this.color = null;
  this.material = null;
  this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];

  this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableObject = function () {

  this.id = 0;

  this.object = null;
  this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableSprite = function () {

  this.id = 0;

  this.object = null;

  this.x = 0;
  this.y = 0;
  this.z = 0;

  this.rotation = 0;
  this.scale = new THREE.Vector2();

  this.material = null;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableLine = function () {

  this.id = 0;

  this.v1 = new THREE.RenderableVertex();
  this.v2 = new THREE.RenderableVertex();

  this.vertexColors = [ new THREE.Color(), new THREE.Color() ];
  this.material = null;

  this.z = 0;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.GeometryUtils = {

  // Merge two geometries or geometry and geometry from object (using object's transform)

  merge: function ( geometry1, geometry2, materialIndexOffset ) {

    console.warn( 'DEPRECATED: GeometryUtils\'s .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

    var matrix;

    if ( geometry2 instanceof THREE.Mesh ) {

      geometry2.matrixAutoUpdate && geometry2.updateMatrix();

      matrix = geometry2.matrix;
      geometry2 = geometry2.geometry;

    }

    geometry1.merge( geometry2, matrix, materialIndexOffset );

  },

  // Get random point in triangle (via barycentric coordinates)
  //  (uniform distribution)
  //  http://www.cgafaq.info/wiki/Random_Point_In_Triangle

  randomPointInTriangle: function () {

    var vector = new THREE.Vector3();

    return function ( vectorA, vectorB, vectorC ) {

      var point = new THREE.Vector3();

      var a = THREE.Math.random16();
      var b = THREE.Math.random16();

      if ( ( a + b ) > 1 ) {

        a = 1 - a;
        b = 1 - b;

      }

      var c = 1 - a - b;

      point.copy( vectorA );
      point.multiplyScalar( a );

      vector.copy( vectorB );
      vector.multiplyScalar( b );

      point.add( vector );

      vector.copy( vectorC );
      vector.multiplyScalar( c );

      point.add( vector );

      return point;

    };

  }(),

  // Get random point in face (triangle)
  // (uniform distribution)

  randomPointInFace: function ( face, geometry, useCachedAreas ) {

    var vA, vB, vC;

    vA = geometry.vertices[ face.a ];
    vB = geometry.vertices[ face.b ];
    vC = geometry.vertices[ face.c ];

    return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );

  },

  // Get uniformly distributed random points in mesh
  //  - create array with cumulative sums of face areas
  //  - pick random number from 0 to total area
  //  - find corresponding place in area array by binary search
  //  - get random point in face

  randomPointsInGeometry: function ( geometry, n ) {

    var face, i,
      faces = geometry.faces,
      vertices = geometry.vertices,
      il = faces.length,
      totalArea = 0,
      cumulativeAreas = [],
      vA, vB, vC, vD;

    // precompute face areas

    for ( i = 0; i < il; i ++ ) {

      face = faces[ i ];

      vA = vertices[ face.a ];
      vB = vertices[ face.b ];
      vC = vertices[ face.c ];

      face._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );

      totalArea += face._area;

      cumulativeAreas[ i ] = totalArea;

    }

    // binary search cumulative areas array

    function binarySearchIndices( value ) {

      function binarySearch( start, end ) {

        // return closest larger index
        // if exact number is not found

        if ( end < start )
          return start;

        var mid = start + Math.floor( ( end - start ) / 2 );

        if ( cumulativeAreas[ mid ] > value ) {

          return binarySearch( start, mid - 1 );

        } else if ( cumulativeAreas[ mid ] < value ) {

          return binarySearch( mid + 1, end );

        } else {

          return mid;

        }

      }

      var result = binarySearch( 0, cumulativeAreas.length - 1 )
      return result;

    }

    // pick random face weighted by face area

    var r, index,
      result = [];

    var stats = {};

    for ( i = 0; i < n; i ++ ) {

      r = THREE.Math.random16() * totalArea;

      index = binarySearchIndices( r );

      result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );

      if ( ! stats[ index ] ) {

        stats[ index ] = 1;

      } else {

        stats[ index ] += 1;

      }

    }

    return result;

  },

  // Get triangle area (half of parallelogram)
  //  http://mathworld.wolfram.com/TriangleArea.html

  triangleArea: function () {

    var vector1 = new THREE.Vector3();
    var vector2 = new THREE.Vector3();

    return function ( vectorA, vectorB, vectorC ) {

      vector1.subVectors( vectorB, vectorA );
      vector2.subVectors( vectorC, vectorA );
      vector1.cross( vector2 );

      return 0.5 * vector1.length();

    };

  }(),

  // Center geometry so that 0,0,0 is in center of bounding box

  center: function ( geometry ) {

    geometry.computeBoundingBox();

    var bb = geometry.boundingBox;

    var offset = new THREE.Vector3();

    offset.addVectors( bb.min, bb.max );
    offset.multiplyScalar( -0.5 );

    geometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );
    geometry.computeBoundingBox();

    return offset;

  }

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageUtils = {

  crossOrigin: undefined,

  loadTexture: function ( url, mapping, onLoad, onError ) {

    var loader = new THREE.ImageLoader();
    loader.crossOrigin = this.crossOrigin;

    var texture = new THREE.Texture( undefined, mapping );

    var image = loader.load( url, function () {

      texture.needsUpdate = true;

      if ( onLoad ) onLoad( texture );

    }, undefined, function ( event ) {

      if ( onError ) onError( event );

    } );

    texture.image = image;
    texture.sourceFile = url;

    return texture;

  },

  loadCompressedTexture: function ( url, mapping, onLoad, onError ) {

    var texture = new THREE.CompressedTexture();
    texture.mapping = mapping;

    var request = new XMLHttpRequest();

    request.onload = function () {

      var buffer = request.response;
      var dds = THREE.ImageUtils.parseDDS( buffer, true );

      texture.format = dds.format;

      texture.mipmaps = dds.mipmaps;
      texture.image.width = dds.width;
      texture.image.height = dds.height;

      // gl.generateMipmap fails for compressed textures
      // mipmaps must be embedded in the DDS file
      // or texture filters must not use mipmapping

      texture.generateMipmaps = false;

      texture.needsUpdate = true;

      if ( onLoad ) onLoad( texture );

    }

    request.onerror = onError;

    request.open( 'GET', url, true );
    request.responseType = "arraybuffer";
    request.send( null );

    return texture;

  },

  loadTextureCube: function ( array, mapping, onLoad, onError ) {

    var images = [];
    images.loadCount = 0;

    var loader = new THREE.ImageLoader();
    loader.crossOrigin = this.crossOrigin;
    
    var texture = new THREE.Texture();
    texture.image = images;
    
    if ( mapping !== undefined ) texture.mapping = mapping;

    // no flipping needed for cube textures

    texture.flipY = false;

    for ( var i = 0, il = array.length; i < il; ++ i ) {

      var cubeImage = loader.load( array[i], function () {

        images.loadCount += 1;

        if ( images.loadCount === 6 ) {

          texture.needsUpdate = true;
          if ( onLoad ) onLoad( texture );

        }

      } );
      
      images[ i ] = cubeImage;
    }
    
    return texture;

  },

  loadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {

    var images = [];
    images.loadCount = 0;

    var texture = new THREE.CompressedTexture();
    texture.image = images;
    if ( mapping !== undefined ) texture.mapping = mapping;

    // no flipping for cube textures
    // (also flipping doesn't work for compressed textures )

    texture.flipY = false;

    // can't generate mipmaps for compressed textures
    // mips must be embedded in DDS files

    texture.generateMipmaps = false;

    var generateCubeFaceCallback = function ( rq, img ) {

      return function () {

        var buffer = rq.response;
        var dds = THREE.ImageUtils.parseDDS( buffer, true );

        img.format = dds.format;

        img.mipmaps = dds.mipmaps;
        img.width = dds.width;
        img.height = dds.height;

        images.loadCount += 1;

        if ( images.loadCount === 6 ) {

          texture.format = dds.format;
          texture.needsUpdate = true;
          if ( onLoad ) onLoad( texture );

        }

      }

    }

    // compressed cubemap textures as 6 separate DDS files

    if ( array instanceof Array ) {

      for ( var i = 0, il = array.length; i < il; ++ i ) {

        var cubeImage = {};
        images[ i ] = cubeImage;

        var request = new XMLHttpRequest();

        request.onload = generateCubeFaceCallback( request, cubeImage );
        request.onerror = onError;

        var url = array[ i ];

        request.open( 'GET', url, true );
        request.responseType = "arraybuffer";
        request.send( null );

      }

    // compressed cubemap texture stored in a single DDS file

    } else {

      var url = array;
      var request = new XMLHttpRequest();

      request.onload = function( ) {

        var buffer = request.response;
        var dds = THREE.ImageUtils.parseDDS( buffer, true );

        if ( dds.isCubemap ) {

          var faces = dds.mipmaps.length / dds.mipmapCount;

          for ( var f = 0; f < faces; f ++ ) {

            images[ f ] = { mipmaps : [] };

            for ( var i = 0; i < dds.mipmapCount; i ++ ) {

              images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );
              images[ f ].format = dds.format;
              images[ f ].width = dds.width;
              images[ f ].height = dds.height;

            }

          }

          texture.format = dds.format;
          texture.needsUpdate = true;
          if ( onLoad ) onLoad( texture );

        }

      }

      request.onerror = onError;

      request.open( 'GET', url, true );
      request.responseType = "arraybuffer";
      request.send( null );

    }

    return texture;

  },

  loadDDSTexture: function ( url, mapping, onLoad, onError ) {

    var images = [];
    images.loadCount = 0;

    var texture = new THREE.CompressedTexture();
    texture.image = images;
    if ( mapping !== undefined ) texture.mapping = mapping;

    // no flipping for cube textures
    // (also flipping doesn't work for compressed textures )

    texture.flipY = false;

    // can't generate mipmaps for compressed textures
    // mips must be embedded in DDS files

    texture.generateMipmaps = false;

    {
      var request = new XMLHttpRequest();

      request.onload = function( ) {

        var buffer = request.response;
        var dds = THREE.ImageUtils.parseDDS( buffer, true );

        if ( dds.isCubemap ) {

          var faces = dds.mipmaps.length / dds.mipmapCount;

          for ( var f = 0; f < faces; f ++ ) {

            images[ f ] = { mipmaps : [] };

            for ( var i = 0; i < dds.mipmapCount; i ++ ) {

              images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );
              images[ f ].format = dds.format;
              images[ f ].width = dds.width;
              images[ f ].height = dds.height;

            }

          }


        } else {
          texture.image.width = dds.width;
          texture.image.height = dds.height;
          texture.mipmaps = dds.mipmaps;
        }

        texture.format = dds.format;
        texture.needsUpdate = true;
        if ( onLoad ) onLoad( texture );

      }

      request.onerror = onError;

      request.open( 'GET', url, true );
      request.responseType = "arraybuffer";
      request.send( null );

    }

    return texture;

  },

  parseDDS: function ( buffer, loadMipmaps ) {

    var dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };

    // Adapted from @toji's DDS utils
    //  https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js

    // All values and structures referenced from:
    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/

    var DDS_MAGIC = 0x20534444;

    var DDSD_CAPS = 0x1,
      DDSD_HEIGHT = 0x2,
      DDSD_WIDTH = 0x4,
      DDSD_PITCH = 0x8,
      DDSD_PIXELFORMAT = 0x1000,
      DDSD_MIPMAPCOUNT = 0x20000,
      DDSD_LINEARSIZE = 0x80000,
      DDSD_DEPTH = 0x800000;

    var DDSCAPS_COMPLEX = 0x8,
      DDSCAPS_MIPMAP = 0x400000,
      DDSCAPS_TEXTURE = 0x1000;

    var DDSCAPS2_CUBEMAP = 0x200,
      DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
      DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
      DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
      DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
      DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
      DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
      DDSCAPS2_VOLUME = 0x200000;

    var DDPF_ALPHAPIXELS = 0x1,
      DDPF_ALPHA = 0x2,
      DDPF_FOURCC = 0x4,
      DDPF_RGB = 0x40,
      DDPF_YUV = 0x200,
      DDPF_LUMINANCE = 0x20000;

    function fourCCToInt32( value ) {

      return value.charCodeAt(0) +
        (value.charCodeAt(1) << 8) +
        (value.charCodeAt(2) << 16) +
        (value.charCodeAt(3) << 24);

    }

    function int32ToFourCC( value ) {

      return String.fromCharCode(
        value & 0xff,
        (value >> 8) & 0xff,
        (value >> 16) & 0xff,
        (value >> 24) & 0xff
      );
    }

    function loadARGBMip( buffer, dataOffset, width, height ) {
      var dataLength = width*height*4;
      var srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );
      var byteArray = new Uint8Array( dataLength );
      var dst = 0;
      var src = 0;
      for ( var y = 0; y < height; y++ ) {
        for ( var x = 0; x < width; x++ ) {
          var b = srcBuffer[src]; src++;
          var g = srcBuffer[src]; src++;
          var r = srcBuffer[src]; src++;
          var a = srcBuffer[src]; src++;
          byteArray[dst] = r; dst++;  //r
          byteArray[dst] = g; dst++;  //g
          byteArray[dst] = b; dst++;  //b
          byteArray[dst] = a; dst++;  //a
        }
      }
      return byteArray;
    }

    var FOURCC_DXT1 = fourCCToInt32("DXT1");
    var FOURCC_DXT3 = fourCCToInt32("DXT3");
    var FOURCC_DXT5 = fourCCToInt32("DXT5");

    var headerLengthInt = 31; // The header length in 32 bit ints

    // Offsets into the header array

    var off_magic = 0;

    var off_size = 1;
    var off_flags = 2;
    var off_height = 3;
    var off_width = 4;

    var off_mipmapCount = 7;

    var off_pfFlags = 20;
    var off_pfFourCC = 21;
    var off_RGBBitCount = 22;
    var off_RBitMask = 23;
    var off_GBitMask = 24;
    var off_BBitMask = 25;
    var off_ABitMask = 26;

    var off_caps = 27;
    var off_caps2 = 28;
    var off_caps3 = 29;
    var off_caps4 = 30;

    // Parse header

    var header = new Int32Array( buffer, 0, headerLengthInt );

    if ( header[ off_magic ] !== DDS_MAGIC ) {

      console.error( "ImageUtils.parseDDS(): Invalid magic number in DDS header" );
      return dds;

    }

    if ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {

      console.error( "ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code" );
      return dds;

    }

    var blockBytes;

    var fourCC = header[ off_pfFourCC ];

    var isRGBAUncompressed = false;

    switch ( fourCC ) {

      case FOURCC_DXT1:

        blockBytes = 8;
        dds.format = THREE.RGB_S3TC_DXT1_Format;
        break;

      case FOURCC_DXT3:

        blockBytes = 16;
        dds.format = THREE.RGBA_S3TC_DXT3_Format;
        break;

      case FOURCC_DXT5:

        blockBytes = 16;
        dds.format = THREE.RGBA_S3TC_DXT5_Format;
        break;

      default:

        if( header[off_RGBBitCount] ==32 
          && header[off_RBitMask]&0xff0000
          && header[off_GBitMask]&0xff00 
          && header[off_BBitMask]&0xff
          && header[off_ABitMask]&0xff000000  ) {
          isRGBAUncompressed = true;
          blockBytes = 64;
          dds.format = THREE.RGBAFormat;
        } else {
          console.error( "ImageUtils.parseDDS(): Unsupported FourCC code: ", int32ToFourCC( fourCC ) );
          return dds;
        }
    }

    dds.mipmapCount = 1;

    if ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {

      dds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );

    }

    //TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.

    dds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;

    dds.width = header[ off_width ];
    dds.height = header[ off_height ];

    var dataOffset = header[ off_size ] + 4;

    // Extract mipmaps buffers

    var width = dds.width;
    var height = dds.height;

    var faces = dds.isCubemap ? 6 : 1;

    for ( var face = 0; face < faces; face ++ ) {

      for ( var i = 0; i < dds.mipmapCount; i ++ ) {

        if( isRGBAUncompressed ) {
          var byteArray = loadARGBMip( buffer, dataOffset, width, height );
          var dataLength = byteArray.length;
        } else {
          var dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;
          var byteArray = new Uint8Array( buffer, dataOffset, dataLength );
        }
        
        var mipmap = { "data": byteArray, "width": width, "height": height };
        dds.mipmaps.push( mipmap );

        dataOffset += dataLength;

        width = Math.max( width * 0.5, 1 );
        height = Math.max( height * 0.5, 1 );

      }

      width = dds.width;
      height = dds.height;

    }

    return dds;

  },

  getNormalMap: function ( image, depth ) {

    // Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/

    var cross = function ( a, b ) {

      return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];

    }

    var subtract = function ( a, b ) {

      return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];

    }

    var normalize = function ( a ) {

      var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );
      return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];

    }

    depth = depth | 1;

    var width = image.width;
    var height = image.height;

    var canvas = document.createElement( 'canvas' );
    canvas.width = width;
    canvas.height = height;

    var context = canvas.getContext( '2d' );
    context.drawImage( image, 0, 0 );

    var data = context.getImageData( 0, 0, width, height ).data;
    var imageData = context.createImageData( width, height );
    var output = imageData.data;

    for ( var x = 0; x < width; x ++ ) {

      for ( var y = 0; y < height; y ++ ) {

        var ly = y - 1 < 0 ? 0 : y - 1;
        var uy = y + 1 > height - 1 ? height - 1 : y + 1;
        var lx = x - 1 < 0 ? 0 : x - 1;
        var ux = x + 1 > width - 1 ? width - 1 : x + 1;

        var points = [];
        var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];
        points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );
        points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );
        points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );
        points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );
        points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );
        points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );
        points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );
        points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );

        var normals = [];
        var num_points = points.length;

        for ( var i = 0; i < num_points; i ++ ) {

          var v1 = points[ i ];
          var v2 = points[ ( i + 1 ) % num_points ];
          v1 = subtract( v1, origin );
          v2 = subtract( v2, origin );
          normals.push( normalize( cross( v1, v2 ) ) );

        }

        var normal = [ 0, 0, 0 ];

        for ( var i = 0; i < normals.length; i ++ ) {

          normal[ 0 ] += normals[ i ][ 0 ];
          normal[ 1 ] += normals[ i ][ 1 ];
          normal[ 2 ] += normals[ i ][ 2 ];

        }

        normal[ 0 ] /= normals.length;
        normal[ 1 ] /= normals.length;
        normal[ 2 ] /= normals.length;

        var idx = ( y * width + x ) * 4;

        output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;
        output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;
        output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;
        output[ idx + 3 ] = 255;

      }

    }

    context.putImageData( imageData, 0, 0 );

    return canvas;

  },

  generateDataTexture: function ( width, height, color ) {

    var size = width * height;
    var data = new Uint8Array( 3 * size );

    var r = Math.floor( color.r * 255 );
    var g = Math.floor( color.g * 255 );
    var b = Math.floor( color.b * 255 );

    for ( var i = 0; i < size; i ++ ) {

      data[ i * 3 ]     = r;
      data[ i * 3 + 1 ] = g;
      data[ i * 3 + 2 ] = b;

    }

    var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );
    texture.needsUpdate = true;

    return texture;

  }

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneUtils = {

  createMultiMaterialObject: function ( geometry, materials ) {

    var group = new THREE.Object3D();

    for ( var i = 0, l = materials.length; i < l; i ++ ) {

      group.add( new THREE.Mesh( geometry, materials[ i ] ) );

    }

    return group;

  },

  detach : function ( child, parent, scene ) {

    child.applyMatrix( parent.matrixWorld );
    parent.remove( child );
    scene.add( child );

  },

  attach: function ( child, scene, parent ) {

    var matrixWorldInverse = new THREE.Matrix4();
    matrixWorldInverse.getInverse( parent.matrixWorld );
    child.applyMatrix( matrixWorldInverse );

    scene.remove( child );
    parent.add( child );

  }

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For Text operations in three.js (See TextGeometry)
 *
 * It uses techniques used in:
 *
 *  typeface.js and canvastext
 *    For converting fonts and rendering with javascript
 *    http://typeface.neocracy.org
 *
 *  Triangulation ported from AS3
 *    Simple Polygon Triangulation
 *    http://actionsnippet.com/?p=1462
 *
 *  A Method to triangulate shapes with holes
 *    http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/
 *
 */

THREE.FontUtils = {

  faces : {},

  // Just for now. face[weight][style]

  face : "helvetiker",
  weight: "normal",
  style : "normal",
  size : 150,
  divisions : 10,

  getFace : function() {

    return this.faces[ this.face ][ this.weight ][ this.style ];

  },

  loadFace : function( data ) {

    var family = data.familyName.toLowerCase();

    var ThreeFont = this;

    ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};

    ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};
    ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

    var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

    return data;

  },

  drawText : function( text ) {

    var characterPts = [], allPts = [];

    // RenderText

    var i, p,
      face = this.getFace(),
      scale = this.size / face.resolution,
      offset = 0,
      chars = String( text ).split( '' ),
      length = chars.length;

    var fontPaths = [];

    for ( i = 0; i < length; i ++ ) {

      var path = new THREE.Path();

      var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );
      offset += ret.offset;

      fontPaths.push( ret.path );

    }

    // get the width

    var width = offset / 2;
    //
    // for ( p = 0; p < allPts.length; p++ ) {
    //
    //  allPts[ p ].x -= width;
    //
    // }

    //var extract = this.extractPoints( allPts, characterPts );
    //extract.contour = allPts;

    //extract.paths = fontPaths;
    //extract.offset = width;

    return { paths : fontPaths, offset : width };

  },




  extractGlyphPoints : function( c, face, scale, offset, path ) {

    var pts = [];

    var i, i2, divisions,
      outline, action, length,
      scaleX, scaleY,
      x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,
      laste,
      glyph = face.glyphs[ c ] || face.glyphs[ '?' ];

    if ( !glyph ) return;

    if ( glyph.o ) {

      outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
      length = outline.length;

      scaleX = scale;
      scaleY = scale;

      for ( i = 0; i < length; ) {

        action = outline[ i ++ ];

        //console.log( action );

        switch( action ) {

        case 'm':

          // Move To

          x = outline[ i++ ] * scaleX + offset;
          y = outline[ i++ ] * scaleY;

          path.moveTo( x, y );
          break;

        case 'l':

          // Line To

          x = outline[ i++ ] * scaleX + offset;
          y = outline[ i++ ] * scaleY;
          path.lineTo(x,y);
          break;

        case 'q':

          // QuadraticCurveTo

          cpx  = outline[ i++ ] * scaleX + offset;
          cpy  = outline[ i++ ] * scaleY;
          cpx1 = outline[ i++ ] * scaleX + offset;
          cpy1 = outline[ i++ ] * scaleY;

          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);

          laste = pts[ pts.length - 1 ];

          if ( laste ) {

            cpx0 = laste.x;
            cpy0 = laste.y;

            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

              var t = i2 / divisions;
              var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
              var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
            }

          }

          break;

        case 'b':

          // Cubic Bezier Curve

          cpx  = outline[ i++ ] *  scaleX + offset;
          cpy  = outline[ i++ ] *  scaleY;
          cpx1 = outline[ i++ ] *  scaleX + offset;
          cpy1 = outline[ i++ ] * -scaleY;
          cpx2 = outline[ i++ ] *  scaleX + offset;
          cpy2 = outline[ i++ ] * -scaleY;

          path.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );

          laste = pts[ pts.length - 1 ];

          if ( laste ) {

            cpx0 = laste.x;
            cpy0 = laste.y;

            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

              var t = i2 / divisions;
              var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
              var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

            }

          }

          break;

        }

      }
    }



    return { offset: glyph.ha*scale, path:path};
  }

};


THREE.FontUtils.generateShapes = function( text, parameters ) {

  // Parameters 

  parameters = parameters || {};

  var size = parameters.size !== undefined ? parameters.size : 100;
  var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;

  var font = parameters.font !== undefined ? parameters.font : "helvetiker";
  var weight = parameters.weight !== undefined ? parameters.weight : "normal";
  var style = parameters.style !== undefined ? parameters.style : "normal";

  THREE.FontUtils.size = size;
  THREE.FontUtils.divisions = curveSegments;

  THREE.FontUtils.face = font;
  THREE.FontUtils.weight = weight;
  THREE.FontUtils.style = style;

  // Get a Font data json object

  var data = THREE.FontUtils.drawText( text );

  var paths = data.paths;
  var shapes = [];

  for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

    Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

  }

  return shapes;

};


/**
 * This code is a quick port of code written in C++ which was submitted to
 * flipcode.com by John W. Ratcliff  // July 22, 2000
 * See original code and more information here:
 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
 *
 * ported to actionscript by Zevan Rosser
 * www.actionsnippet.com
 *
 * ported to javascript by Joshua Koo
 * http://www.lab4games.net/zz85/blog
 *
 */


( function( namespace ) {

  var EPSILON = 0.0000000001;

  // takes in an contour array and returns

  var process = function( contour, indices ) {

    var n = contour.length;

    if ( n < 3 ) return null;

    var result = [],
      verts = [],
      vertIndices = [];

    /* we want a counter-clockwise polygon in verts */

    var u, v, w;

    if ( area( contour ) > 0.0 ) {

      for ( v = 0; v < n; v++ ) verts[ v ] = v;

    } else {

      for ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;

    }

    var nv = n;

    /*  remove nv - 2 vertices, creating 1 triangle every time */

    var count = 2 * nv;   /* error detection */

    for( v = nv - 1; nv > 2; ) {

      /* if we loop, it is probably a non-simple polygon */

      if ( ( count-- ) <= 0 ) {

        //** Triangulate: ERROR - probable bad polygon!

        //throw ( "Warning, unable to triangulate polygon!" );
        //return null;
        // Sometimes warning is fine, especially polygons are triangulated in reverse.
        console.log( "Warning, unable to triangulate polygon!" );

        if ( indices ) return vertIndices;
        return result;

      }

      /* three consecutive vertices in current polygon, <u,v,w> */

      u = v;    if ( nv <= u ) u = 0;     /* previous */
      v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
      w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

      if ( snip( contour, u, v, w, nv, verts ) ) {

        var a, b, c, s, t;

        /* true names of the vertices */

        a = verts[ u ];
        b = verts[ v ];
        c = verts[ w ];

        /* output Triangle */

        result.push( [ contour[ a ],
          contour[ b ],
          contour[ c ] ] );


        vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

        /* remove v from the remaining polygon */

        for( s = v, t = v + 1; t < nv; s++, t++ ) {

          verts[ s ] = verts[ t ];

        }

        nv--;

        /* reset error detection counter */

        count = 2 * nv;

      }

    }

    if ( indices ) return vertIndices;
    return result;

  };

  // calculate area of the contour polygon

  var area = function ( contour ) {

    var n = contour.length;
    var a = 0.0;

    for( var p = n - 1, q = 0; q < n; p = q++ ) {

      a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

    }

    return a * 0.5;

  };

  var snip = function ( contour, u, v, w, n, verts ) {

    var p;
    var ax, ay, bx, by;
    var cx, cy, px, py;

    ax = contour[ verts[ u ] ].x;
    ay = contour[ verts[ u ] ].y;

    bx = contour[ verts[ v ] ].x;
    by = contour[ verts[ v ] ].y;

    cx = contour[ verts[ w ] ].x;
    cy = contour[ verts[ w ] ].y;

    if ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;

    var aX, aY, bX, bY, cX, cY;
    var apx, apy, bpx, bpy, cpx, cpy;
    var cCROSSap, bCROSScp, aCROSSbp;

    aX = cx - bx;  aY = cy - by;
    bX = ax - cx;  bY = ay - cy;
    cX = bx - ax;  cY = by - ay;

    for ( p = 0; p < n; p++ ) {

      px = contour[ verts[ p ] ].x
      py = contour[ verts[ p ] ].y

      if ( ( (px === ax) && (py === ay) ) ||
         ( (px === bx) && (py === by) ) ||
         ( (px === cx) && (py === cy) ) ) continue;

      apx = px - ax;  apy = py - ay;
      bpx = px - bx;  bpy = py - by;
      cpx = px - cx;  cpy = py - cy;

      // see if p is inside triangle abc

      aCROSSbp = aX*bpy - aY*bpx;
      cCROSSap = cX*apy - cY*apx;
      bCROSScp = bX*cpy - bY*cpx;

      if ( (aCROSSbp >= -EPSILON) && (bCROSScp >= -EPSILON) && (cCROSSap >= -EPSILON) ) return false;

    }

    return true;

  };


  namespace.Triangulate = process;
  namespace.Triangulate.area = area;

  return namespace;

})(THREE.FontUtils);

// To use the typeface.js face files, hook up the API
self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };
THREE.typeface_js = self._typeface_js;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of Curve methods
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTagentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following classes subclasses THREE.Curve:
 *
 * -- 2d classes --
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.CubicBezierCurve
 * THREE.SplineCurve
 * THREE.ArcCurve
 * THREE.EllipseCurve
 *
 * -- 3d classes --
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 * THREE.CubicBezierCurve3
 * THREE.SplineCurve3
 * THREE.ClosedSplineCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath
 *
 **/

/**************************************************************
 *  Abstract Curve base class
 **************************************************************/

THREE.Curve = function () {

};

// Virtual base class method to overwrite and implement in subclasses
//  - t [0 .. 1]

THREE.Curve.prototype.getPoint = function ( t ) {

  console.log( "Warning, getPoint() not implemented!" );
  return null;

};

// Get point at relative position in curve according to arc length
// - u [0 .. 1]

THREE.Curve.prototype.getPointAt = function ( u ) {

  var t = this.getUtoTmapping( u );
  return this.getPoint( t );

};

// Get sequence of points using getPoint( t )

THREE.Curve.prototype.getPoints = function ( divisions ) {

  if ( !divisions ) divisions = 5;

  var d, pts = [];

  for ( d = 0; d <= divisions; d ++ ) {

    pts.push( this.getPoint( d / divisions ) );

  }

  return pts;

};

// Get sequence of points using getPointAt( u )

THREE.Curve.prototype.getSpacedPoints = function ( divisions ) {

  if ( !divisions ) divisions = 5;

  var d, pts = [];

  for ( d = 0; d <= divisions; d ++ ) {

    pts.push( this.getPointAt( d / divisions ) );

  }

  return pts;

};

// Get total curve arc length

THREE.Curve.prototype.getLength = function () {

  var lengths = this.getLengths();
  return lengths[ lengths.length - 1 ];

};

// Get list of cumulative segment lengths

THREE.Curve.prototype.getLengths = function ( divisions ) {

  if ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;

  if ( this.cacheArcLengths
    && ( this.cacheArcLengths.length == divisions + 1 )
    && !this.needsUpdate) {

    //console.log( "cached", this.cacheArcLengths );
    return this.cacheArcLengths;

  }

  this.needsUpdate = false;

  var cache = [];
  var current, last = this.getPoint( 0 );
  var p, sum = 0;

  cache.push( 0 );

  for ( p = 1; p <= divisions; p ++ ) {

    current = this.getPoint ( p / divisions );
    sum += current.distanceTo( last );
    cache.push( sum );
    last = current;

  }

  this.cacheArcLengths = cache;

  return cache; // { sums: cache, sum:sum }; Sum is in the last element.

};


THREE.Curve.prototype.updateArcLengths = function() {
  this.needsUpdate = true;
  this.getLengths();
};

// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance

THREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {

  var arcLengths = this.getLengths();

  var i = 0, il = arcLengths.length;

  var targetArcLength; // The targeted u distance value to get

  if ( distance ) {

    targetArcLength = distance;

  } else {

    targetArcLength = u * arcLengths[ il - 1 ];

  }

  //var time = Date.now();

  // binary search for the index with largest value smaller than target u distance

  var low = 0, high = il - 1, comparison;

  while ( low <= high ) {

    i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

    comparison = arcLengths[ i ] - targetArcLength;

    if ( comparison < 0 ) {

      low = i + 1;
      continue;

    } else if ( comparison > 0 ) {

      high = i - 1;
      continue;

    } else {

      high = i;
      break;

      // DONE

    }

  }

  i = high;

  //console.log('b' , i, low, high, Date.now()- time);

  if ( arcLengths[ i ] == targetArcLength ) {

    var t = i / ( il - 1 );
    return t;

  }

  // we could get finer grain at lengths, or use simple interpolatation between two points

  var lengthBefore = arcLengths[ i ];
    var lengthAfter = arcLengths[ i + 1 ];

    var segmentLength = lengthAfter - lengthBefore;

    // determine where we are between the 'before' and 'after' points

    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

    // add that fractional amount to t

    var t = ( i + segmentFraction ) / ( il -1 );

  return t;

};

// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation

THREE.Curve.prototype.getTangent = function( t ) {

  var delta = 0.0001;
  var t1 = t - delta;
  var t2 = t + delta;

  // Capping in case of danger

  if ( t1 < 0 ) t1 = 0;
  if ( t2 > 1 ) t2 = 1;

  var pt1 = this.getPoint( t1 );
  var pt2 = this.getPoint( t2 );

  var vec = pt2.clone().sub(pt1);
  return vec.normalize();

};


THREE.Curve.prototype.getTangentAt = function ( u ) {

  var t = this.getUtoTmapping( u );
  return this.getTangent( t );

};





/**************************************************************
 *  Utils
 **************************************************************/

THREE.Curve.Utils = {

  tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

    return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

  },

  // Puay Bing, thanks for helping with this derivative!

  tangentCubicBezier: function (t, p0, p1, p2, p3 ) {

    return -3 * p0 * (1 - t) * (1 - t)  +
      3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +
      6 * t *  p2 * (1-t) - 3 * t * t * p2 +
      3 * t * t * p3;
  },


  tangentSpline: function ( t, p0, p1, p2, p3 ) {

    // To check if my formulas are correct

    var h00 = 6 * t * t - 6 * t;  // derived from 2t^3 â 3t^2 + 1
    var h10 = 3 * t * t - 4 * t + 1; // t^3 â 2t^2 + t
    var h01 = -6 * t * t + 6 * t;   // â 2t3 + 3t2
    var h11 = 3 * t * t - 2 * t;  // t3 â t2

    return h00 + h10 + h01 + h11;

  },

  // Catmull-Rom

  interpolate: function( p0, p1, p2, p3, t ) {

    var v0 = ( p2 - p0 ) * 0.5;
    var v1 = ( p3 - p1 ) * 0.5;
    var t2 = t * t;
    var t3 = t * t2;
    return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  }

};


// TODO: Transformation for Curves?

/**************************************************************
 *  3D Curves
 **************************************************************/

// A Factory method for creating new curve subclasses

THREE.Curve.create = function ( constructor, getPointFunc ) {

  constructor.prototype = Object.create( THREE.Curve.prototype );
  constructor.prototype.getPoint = getPointFunc;

  return constructor;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *  Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

THREE.CurvePath = function () {

  this.curves = [];
  this.bends = [];
  
  this.autoClose = false; // Automatically closes the path
};

THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );

THREE.CurvePath.prototype.add = function ( curve ) {

  this.curves.push( curve );

};

THREE.CurvePath.prototype.checkConnection = function() {
  // TODO
  // If the ending of curve is not connected to the starting
  // or the next curve, then, this is not a real path
};

THREE.CurvePath.prototype.closePath = function() {
  // TODO Test
  // and verify for vector3 (needs to implement equals)
  // Add a line curve if start and end of lines are not connected
  var startPoint = this.curves[0].getPoint(0);
  var endPoint = this.curves[this.curves.length-1].getPoint(1);
  
  if (!startPoint.equals(endPoint)) {
    this.curves.push( new THREE.LineCurve(endPoint, startPoint) );
  }
  
};

// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:

// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')

THREE.CurvePath.prototype.getPoint = function( t ) {

  var d = t * this.getLength();
  var curveLengths = this.getCurveLengths();
  var i = 0, diff, curve;

  // To think about boundaries points.

  while ( i < curveLengths.length ) {

    if ( curveLengths[ i ] >= d ) {

      diff = curveLengths[ i ] - d;
      curve = this.curves[ i ];

      var u = 1 - diff / curve.getLength();

      return curve.getPointAt( u );

      break;
    }

    i ++;

  }

  return null;

  // loop where sum != 0, sum > d , sum+1 <d

};

/*
THREE.CurvePath.prototype.getTangent = function( t ) {
};*/


// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength

THREE.CurvePath.prototype.getLength = function() {

  var lens = this.getCurveLengths();
  return lens[ lens.length - 1 ];

};

// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.

THREE.CurvePath.prototype.getCurveLengths = function() {

  // We use cache values if curves and cache array are same length

  if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {

    return this.cacheLengths;

  };

  // Get length of subsurve
  // Push sums into cached array

  var lengths = [], sums = 0;
  var i, il = this.curves.length;

  for ( i = 0; i < il; i ++ ) {

    sums += this.curves[ i ].getLength();
    lengths.push( sums );

  }

  this.cacheLengths = lengths;

  return lengths;

};



// Returns min and max coordinates

THREE.CurvePath.prototype.getBoundingBox = function () {

  var points = this.getPoints();

  var maxX, maxY, maxZ;
  var minX, minY, minZ;

  maxX = maxY = Number.NEGATIVE_INFINITY;
  minX = minY = Number.POSITIVE_INFINITY;

  var p, i, il, sum;

  var v3 = points[0] instanceof THREE.Vector3;

  sum = v3 ? new THREE.Vector3() : new THREE.Vector2();

  for ( i = 0, il = points.length; i < il; i ++ ) {

    p = points[ i ];

    if ( p.x > maxX ) maxX = p.x;
    else if ( p.x < minX ) minX = p.x;

    if ( p.y > maxY ) maxY = p.y;
    else if ( p.y < minY ) minY = p.y;

    if ( v3 ) {

      if ( p.z > maxZ ) maxZ = p.z;
      else if ( p.z < minZ ) minZ = p.z;

    }

    sum.add( p );

  }

  var ret = {

    minX: minX,
    minY: minY,
    maxX: maxX,
    maxY: maxY

  };

  if ( v3 ) {

    ret.maxZ = maxZ;
    ret.minZ = minZ;

  }

  return ret;

};

/**************************************************************
 *  Create Geometries Helpers
 **************************************************************/

/// Generate geometry from path points (for Line or ParticleSystem objects)

THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

  var pts = this.getPoints( divisions, true );
  return this.createGeometry( pts );

};

// Generate geometry from equidistance sampling along the path

THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

  var pts = this.getSpacedPoints( divisions, true );
  return this.createGeometry( pts );

};

THREE.CurvePath.prototype.createGeometry = function( points ) {

  var geometry = new THREE.Geometry();

  for ( var i = 0; i < points.length; i ++ ) {

    geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );

  }

  return geometry;

};


/**************************************************************
 *  Bend / Wrap Helper Methods
 **************************************************************/

// Wrap path / Bend modifiers?

THREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {

  this.bends.push( bendpath );

};

THREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {

  var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints
  var i, il;

  if ( !bends ) {

    bends = this.bends;

  }

  for ( i = 0, il = bends.length; i < il; i ++ ) {

    oldPts = this.getWrapPoints( oldPts, bends[ i ] );

  }

  return oldPts;

};

THREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {

  var oldPts = this.getSpacedPoints( segments );

  var i, il;

  if ( !bends ) {

    bends = this.bends;

  }

  for ( i = 0, il = bends.length; i < il; i ++ ) {

    oldPts = this.getWrapPoints( oldPts, bends[ i ] );

  }

  return oldPts;

};

// This returns getPoints() bend/wrapped around the contour of a path.
// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html

THREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {

  var bounds = this.getBoundingBox();

  var i, il, p, oldX, oldY, xNorm;

  for ( i = 0, il = oldPts.length; i < il; i ++ ) {

    p = oldPts[ i ];

    oldX = p.x;
    oldY = p.y;

    xNorm = oldX / bounds.maxX;

    // If using actual distance, for length > path, requires line extrusions
    //xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance

    xNorm = path.getUtoTmapping( xNorm, oldX );

    // check for out of bounds?

    var pathPt = path.getPoint( xNorm );
    var normal = path.getTangent( xNorm );
    normal.set( -normal.y, normal.x ).multiplyScalar( oldY );

    p.x = pathPt.x + normal.x;
    p.y = pathPt.y + normal.y;

  }

  return oldPts;

};


/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Gyroscope = function () {

  THREE.Object3D.call( this );

};

THREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );

THREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {

  this.matrixAutoUpdate && this.updateMatrix();

  // update matrixWorld

  if ( this.matrixWorldNeedsUpdate || force ) {

    if ( this.parent ) {

      this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

      this.matrixWorld.decompose( this.translationWorld, this.quaternionWorld, this.scaleWorld );
      this.matrix.decompose( this.translationObject, this.quaternionObject, this.scaleObject );

      this.matrixWorld.compose( this.translationWorld, this.quaternionObject, this.scaleWorld );


    } else {

      this.matrixWorld.copy( this.matrix );

    }


    this.matrixWorldNeedsUpdate = false;

    force = true;

  }

  // update children

  for ( var i = 0, l = this.children.length; i < l; i ++ ) {

    this.children[ i ].updateMatrixWorld( force );

  }

};

THREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.translationObject = new THREE.Vector3();
THREE.Gyroscope.prototype.quaternionWorld = new THREE.Quaternion();
THREE.Gyroscope.prototype.quaternionObject = new THREE.Quaternion();
THREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();


/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 *
 **/

THREE.Path = function ( points ) {

  THREE.CurvePath.call(this);

  this.actions = [];

  if ( points ) {

    this.fromPoints( points );

  }

};

THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );

THREE.PathActions = {

  MOVE_TO: 'moveTo',
  LINE_TO: 'lineTo',
  QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve
  BEZIER_CURVE_TO: 'bezierCurveTo',     // Bezier cubic curve
  CSPLINE_THRU: 'splineThru',       // Catmull-rom spline
  ARC: 'arc',               // Circle
  ELLIPSE: 'ellipse'
};

// TODO Clean up PATH API

// Create path using straight lines to connect all points
// - vectors: array of Vector2

THREE.Path.prototype.fromPoints = function ( vectors ) {

  this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

  for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {

    this.lineTo( vectors[ v ].x, vectors[ v ].y );

  };

};

// startPath() endPath()?

THREE.Path.prototype.moveTo = function ( x, y ) {

  var args = Array.prototype.slice.call( arguments );
  this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );

};

THREE.Path.prototype.lineTo = function ( x, y ) {

  var args = Array.prototype.slice.call( arguments );

  var lastargs = this.actions[ this.actions.length - 1 ].args;

  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];

  var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
  this.curves.push( curve );

  this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );

};

THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

  var args = Array.prototype.slice.call( arguments );

  var lastargs = this.actions[ this.actions.length - 1 ].args;

  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];

  var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),
                        new THREE.Vector2( aCPx, aCPy ),
                        new THREE.Vector2( aX, aY ) );
  this.curves.push( curve );

  this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );

};

THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,
                         aCP2x, aCP2y,
                         aX, aY ) {

  var args = Array.prototype.slice.call( arguments );

  var lastargs = this.actions[ this.actions.length - 1 ].args;

  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];

  var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),
                      new THREE.Vector2( aCP1x, aCP1y ),
                      new THREE.Vector2( aCP2x, aCP2y ),
                      new THREE.Vector2( aX, aY ) );
  this.curves.push( curve );

  this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );

};

THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

  var args = Array.prototype.slice.call( arguments );
  var lastargs = this.actions[ this.actions.length - 1 ].args;

  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];
//---
  var npts = [ new THREE.Vector2( x0, y0 ) ];
  Array.prototype.push.apply( npts, pts );

  var curve = new THREE.SplineCurve( npts );
  this.curves.push( curve );

  this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );

};

// FUTURE: Change the API or follow canvas API?

THREE.Path.prototype.arc = function ( aX, aY, aRadius,
                    aStartAngle, aEndAngle, aClockwise ) {

  var lastargs = this.actions[ this.actions.length - 1].args;
  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];

  this.absarc(aX + x0, aY + y0, aRadius,
    aStartAngle, aEndAngle, aClockwise );

 };

 THREE.Path.prototype.absarc = function ( aX, aY, aRadius,
                    aStartAngle, aEndAngle, aClockwise ) {
  this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 };

THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,
                    aStartAngle, aEndAngle, aClockwise ) {

  var lastargs = this.actions[ this.actions.length - 1].args;
  var x0 = lastargs[ lastargs.length - 2 ];
  var y0 = lastargs[ lastargs.length - 1 ];

  this.absellipse(aX + x0, aY + y0, xRadius, yRadius,
    aStartAngle, aEndAngle, aClockwise );

 };


THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,
                    aStartAngle, aEndAngle, aClockwise ) {

  var args = Array.prototype.slice.call( arguments );
  var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,
                  aStartAngle, aEndAngle, aClockwise );
  this.curves.push( curve );

  var lastPoint = curve.getPoint(1);
  args.push(lastPoint.x);
  args.push(lastPoint.y);

  this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );

 };

THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {

  if ( ! divisions ) divisions = 40;

  var points = [];

  for ( var i = 0; i < divisions; i ++ ) {

    points.push( this.getPoint( i / divisions ) );

    //if( !this.getPoint( i / divisions ) ) throw "DIE";

  }

  // if ( closedPath ) {
  //
  //  points.push( points[ 0 ] );
  //
  // }

  return points;

};

/* Return an array of vectors based on contour of the path */

THREE.Path.prototype.getPoints = function( divisions, closedPath ) {

  if (this.useSpacedPoints) {
    console.log('tata');
    return this.getSpacedPoints( divisions, closedPath );
  }

  divisions = divisions || 12;

  var points = [];

  var i, il, item, action, args;
  var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
    laste, j,
    t, tx, ty;

  for ( i = 0, il = this.actions.length; i < il; i ++ ) {

    item = this.actions[ i ];

    action = item.action;
    args = item.args;

    switch( action ) {

    case THREE.PathActions.MOVE_TO:

      points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

      break;

    case THREE.PathActions.LINE_TO:

      points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

      break;

    case THREE.PathActions.QUADRATIC_CURVE_TO:

      cpx  = args[ 2 ];
      cpy  = args[ 3 ];

      cpx1 = args[ 0 ];
      cpy1 = args[ 1 ];

      if ( points.length > 0 ) {

        laste = points[ points.length - 1 ];

        cpx0 = laste.x;
        cpy0 = laste.y;

      } else {

        laste = this.actions[ i - 1 ].args;

        cpx0 = laste[ laste.length - 2 ];
        cpy0 = laste[ laste.length - 1 ];

      }

      for ( j = 1; j <= divisions; j ++ ) {

        t = j / divisions;

        tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
        ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );

        points.push( new THREE.Vector2( tx, ty ) );

      }

      break;

    case THREE.PathActions.BEZIER_CURVE_TO:

      cpx  = args[ 4 ];
      cpy  = args[ 5 ];

      cpx1 = args[ 0 ];
      cpy1 = args[ 1 ];

      cpx2 = args[ 2 ];
      cpy2 = args[ 3 ];

      if ( points.length > 0 ) {

        laste = points[ points.length - 1 ];

        cpx0 = laste.x;
        cpy0 = laste.y;

      } else {

        laste = this.actions[ i - 1 ].args;

        cpx0 = laste[ laste.length - 2 ];
        cpy0 = laste[ laste.length - 1 ];

      }


      for ( j = 1; j <= divisions; j ++ ) {

        t = j / divisions;

        tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
        ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

        points.push( new THREE.Vector2( tx, ty ) );

      }

      break;

    case THREE.PathActions.CSPLINE_THRU:

      laste = this.actions[ i - 1 ].args;

      var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
      var spts = [ last ];

      var n = divisions * args[ 0 ].length;

      spts = spts.concat( args[ 0 ] );

      var spline = new THREE.SplineCurve( spts );

      for ( j = 1; j <= n; j ++ ) {

        points.push( spline.getPointAt( j / n ) ) ;

      }

      break;

    case THREE.PathActions.ARC:

      var aX = args[ 0 ], aY = args[ 1 ],
        aRadius = args[ 2 ],
        aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
        aClockwise = !!args[ 5 ];

      var deltaAngle = aEndAngle - aStartAngle;
      var angle;
      var tdivisions = divisions * 2;

      for ( j = 1; j <= tdivisions; j ++ ) {

        t = j / tdivisions;

        if ( ! aClockwise ) {

          t = 1 - t;

        }

        angle = aStartAngle + t * deltaAngle;

        tx = aX + aRadius * Math.cos( angle );
        ty = aY + aRadius * Math.sin( angle );

        //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

        points.push( new THREE.Vector2( tx, ty ) );

      }

      //console.log(points);

      break;
      
    case THREE.PathActions.ELLIPSE:

      var aX = args[ 0 ], aY = args[ 1 ],
        xRadius = args[ 2 ],
        yRadius = args[ 3 ],
        aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
        aClockwise = !!args[ 6 ];


      var deltaAngle = aEndAngle - aStartAngle;
      var angle;
      var tdivisions = divisions * 2;

      for ( j = 1; j <= tdivisions; j ++ ) {

        t = j / tdivisions;

        if ( ! aClockwise ) {

          t = 1 - t;

        }

        angle = aStartAngle + t * deltaAngle;

        tx = aX + xRadius * Math.cos( angle );
        ty = aY + yRadius * Math.sin( angle );

        //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

        points.push( new THREE.Vector2( tx, ty ) );

      }

      //console.log(points);

      break;

    } // end switch

  }



  // Normalize to remove the closing point by default.
  var lastPoint = points[ points.length - 1];
  var EPSILON = 0.0000000001;
  if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&
       Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)
    points.splice( points.length - 1, 1);
  if ( closedPath ) {

    points.push( points[ 0 ] );

  }

  return points;

};

//
// Breaks path into shapes
//
//  Assumptions (if parameter isCCW==true the opposite holds):
//  - solid shapes are defined clockwise (CW)
//  - holes are defined counterclockwise (CCW)
//
//  If parameter noHoles==true:
//  - all subPaths are regarded as solid shapes
//  - definition order CW/CCW has no relevance
//

THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {

  function extractSubpaths( inActions ) {

    var i, il, item, action, args;

    var subPaths = [], lastPath = new THREE.Path();

    for ( i = 0, il = inActions.length; i < il; i ++ ) {

      item = inActions[ i ];

      args = item.args;
      action = item.action;

      if ( action == THREE.PathActions.MOVE_TO ) {

        if ( lastPath.actions.length != 0 ) {

          subPaths.push( lastPath );
          lastPath = new THREE.Path();

        }

      }

      lastPath[ action ].apply( lastPath, args );

    }

    if ( lastPath.actions.length != 0 ) {

      subPaths.push( lastPath );

    }

    // console.log(subPaths);

    return  subPaths;
  }

  function toShapesNoHoles( inSubpaths ) {

    var shapes = [];

    for ( var i = 0, il = inSubpaths.length; i < il; i ++ ) {

      var tmpPath = inSubpaths[ i ];

      var tmpShape = new THREE.Shape();
      tmpShape.actions = tmpPath.actions;
      tmpShape.curves = tmpPath.curves;

      shapes.push( tmpShape );
    }

    //console.log("shape", shapes);

    return shapes;
  };

  function isPointInsidePolygon( inPt, inPolygon ) {
    var EPSILON = 0.0000000001;

    var polyLen = inPolygon.length;

    // inPt on polygon contour => immediate success    or
    // toggling of inside/outside at every single! intersection point of an edge
    //  with the horizontal line through inPt, left of inPt
    //  not counting lowerY endpoints of edges and whole edges on that line
    var inside = false;
    for( var p = polyLen - 1, q = 0; q < polyLen; p = q++ ) {
      var edgeLowPt  = inPolygon[ p ];
      var edgeHighPt = inPolygon[ q ];

      var edgeDx = edgeHighPt.x - edgeLowPt.x;
      var edgeDy = edgeHighPt.y - edgeLowPt.y;

      if ( Math.abs(edgeDy) > EPSILON ) {     // not parallel
        if ( edgeDy < 0 ) {
          edgeLowPt  = inPolygon[ q ]; edgeDx = -edgeDx;
          edgeHighPt = inPolygon[ p ]; edgeDy = -edgeDy;
        }
        if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) )    continue;

        if ( inPt.y == edgeLowPt.y ) {
          if ( inPt.x == edgeLowPt.x )    return  true;   // inPt is on contour ?
          // continue;        // no intersection or edgeLowPt => doesn't count !!!
        } else {
          var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
          if ( perpEdge == 0 )        return  true;   // inPt is on contour ?
          if ( perpEdge < 0 )         continue;
          inside = !inside;   // true intersection left of inPt
        }
      } else {    // parallel or colinear
        if ( inPt.y != edgeLowPt.y )    continue;     // parallel
        // egde lies on the same horizontal line as inPt
        if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
           ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )    return  true; // inPt: Point on contour !
        // continue;
      }
    }

    return  inside;
  }


  var subPaths = extractSubpaths( this.actions );
  if ( subPaths.length == 0 ) return [];

  if ( noHoles === true ) return  toShapesNoHoles( subPaths );


  var solid, tmpPath, tmpShape, shapes = [];

  if ( subPaths.length == 1) {

    tmpPath = subPaths[0];
    tmpShape = new THREE.Shape();
    tmpShape.actions = tmpPath.actions;
    tmpShape.curves = tmpPath.curves;
    shapes.push( tmpShape );
    return shapes;

  }

  var holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );
  holesFirst = isCCW ? !holesFirst : holesFirst;

  // console.log("Holes first", holesFirst);
  
  var betterShapeHoles = [];
  var newShapes = [];
  var newShapeHoles = [];
  var mainIdx = 0;
  var tmpPoints;

  newShapes[mainIdx] = undefined;
  newShapeHoles[mainIdx] = [];

  var i, il;

  for ( i = 0, il = subPaths.length; i < il; i ++ ) {

    tmpPath = subPaths[ i ];
    tmpPoints = tmpPath.getPoints();
    solid = THREE.Shape.Utils.isClockWise( tmpPoints );
    solid = isCCW ? !solid : solid;

    if ( solid ) {

      if ( (! holesFirst ) && ( newShapes[mainIdx] ) )  mainIdx++;

      newShapes[mainIdx] = { s: new THREE.Shape(), p: tmpPoints };
      newShapes[mainIdx].s.actions = tmpPath.actions;
      newShapes[mainIdx].s.curves = tmpPath.curves;
      
      if ( holesFirst ) mainIdx++;
      newShapeHoles[mainIdx] = [];

      //console.log('cw', i);

    } else {

      newShapeHoles[mainIdx].push( { h: tmpPath, p: tmpPoints[0] } );

      //console.log('ccw', i);

    }

  }

  // only Holes? -> probably all Shapes with wrong orientation
  if ( !newShapes[0] )  return  toShapesNoHoles( subPaths );


  if ( newShapes.length > 1 ) {
    var ambigious = false;
    var toChange = [];

    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++ ) {
      betterShapeHoles[sIdx] = [];
    }
    for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++ ) {
      var sh = newShapes[sIdx];
      var sho = newShapeHoles[sIdx];
      for (var hIdx = 0; hIdx < sho.length; hIdx++ ) {
        var ho = sho[hIdx];
        var hole_unassigned = true;
        for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++ ) {
          if ( isPointInsidePolygon( ho.p, newShapes[s2Idx].p ) ) {
            if ( sIdx != s2Idx )    toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
            if ( hole_unassigned ) {
              hole_unassigned = false;
              betterShapeHoles[s2Idx].push( ho );
            } else {
              ambigious = true;
            }
          }
        }
        if ( hole_unassigned ) { betterShapeHoles[sIdx].push( ho ); }
      }
    }
    // console.log("ambigious: ", ambigious);
    if ( toChange.length > 0 ) {
      // console.log("to change: ", toChange);
      if (! ambigious)  newShapeHoles = betterShapeHoles;
    }
  }

  var tmpHoles, j, jl;
  for ( i = 0, il = newShapes.length; i < il; i ++ ) {
    tmpShape = newShapes[i].s;
    shapes.push( tmpShape );
    tmpHoles = newShapeHoles[i];
    for ( j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
      tmpShape.holes.push( tmpHoles[j].h );
    }
  }

  //console.log("shape", shapes);

  return shapes;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

THREE.Shape = function () {

  THREE.Path.apply( this, arguments );
  this.holes = [];

};

THREE.Shape.prototype = Object.create( THREE.Path.prototype );

// Convenience method to return ExtrudeGeometry

THREE.Shape.prototype.extrude = function ( options ) {

  var extruded = new THREE.ExtrudeGeometry( this, options );
  return extruded;

};

// Convenience method to return ShapeGeometry

THREE.Shape.prototype.makeGeometry = function ( options ) {

  var geometry = new THREE.ShapeGeometry( this, options );
  return geometry;

};

// Get points of holes

THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

  var i, il = this.holes.length, holesPts = [];

  for ( i = 0; i < il; i ++ ) {

    holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );

  }

  return holesPts;

};

// Get points of holes (spaced by regular distance)

THREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {

  var i, il = this.holes.length, holesPts = [];

  for ( i = 0; i < il; i ++ ) {

    holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );

  }

  return holesPts;

};


// Get points of shape and holes (keypoints based on segments parameter)

THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

  return {

    shape: this.getTransformedPoints( divisions ),
    holes: this.getPointsHoles( divisions )

  };

};

THREE.Shape.prototype.extractPoints = function ( divisions ) {

  if (this.useSpacedPoints) {
    return this.extractAllSpacedPoints(divisions);
  }

  return this.extractAllPoints(divisions);

};

//
// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {
//
//  return {
//
//    shape: this.transform( bend, divisions ),
//    holes: this.getPointsHoles( divisions, bend )
//
//  };
//
// };

// Get points of shape and holes (spaced by regular distance)

THREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {

  return {

    shape: this.getTransformedSpacedPoints( divisions ),
    holes: this.getSpacedPointsHoles( divisions )

  };

};

/**************************************************************
 *  Utils
 **************************************************************/

THREE.Shape.Utils = {

  triangulateShape: function ( contour, holes ) {

    function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
      // inOtherPt needs to be colinear to the inSegment
      if ( inSegPt1.x != inSegPt2.x ) {
        if ( inSegPt1.x < inSegPt2.x ) {
          return  ( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
        } else {
          return  ( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
        }
      } else {
        if ( inSegPt1.y < inSegPt2.y ) {
          return  ( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
        } else {
          return  ( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
        }
      }
    }

    function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
      var EPSILON = 0.0000000001;

      var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
      var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

      var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
      var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

      var limit   = seg1dy * seg2dx - seg1dx * seg2dy;
      var perpSeg1  = seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

      if ( Math.abs(limit) > EPSILON ) {      // not parallel

        var perpSeg2;
        if ( limit > 0 ) {
          if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) )     return [];
          perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
          if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) )     return [];
        } else {
          if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) )     return [];
          perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
          if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) )     return [];
        }

        // i.e. to reduce rounding errors
        // intersection at endpoint of segment#1?
        if ( perpSeg2 == 0 ) {
          if ( ( inExcludeAdjacentSegs ) &&
             ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )   return [];
          return  [ inSeg1Pt1 ];
        }
        if ( perpSeg2 == limit ) {
          if ( ( inExcludeAdjacentSegs ) &&
             ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )   return [];
          return  [ inSeg1Pt2 ];
        }
        // intersection at endpoint of segment#2?
        if ( perpSeg1 == 0 )    return  [ inSeg2Pt1 ];
        if ( perpSeg1 == limit )  return  [ inSeg2Pt2 ];

        // return real intersection point
        var factorSeg1 = perpSeg2 / limit;
        return  [ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
              y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

      } else {    // parallel or colinear
        if ( ( perpSeg1 != 0 ) ||
           ( seg2dy * seg1seg2dx != seg2dx * seg1seg2dy ) )       return [];

        // they are collinear or degenerate
        var seg1Pt = ( (seg1dx == 0) && (seg1dy == 0) );  // segment1 ist just a point?
        var seg2Pt = ( (seg2dx == 0) && (seg2dy == 0) );  // segment2 ist just a point?
        // both segments are points
        if ( seg1Pt && seg2Pt ) {
          if ( (inSeg1Pt1.x != inSeg2Pt1.x) ||
             (inSeg1Pt1.y != inSeg2Pt1.y) )   return [];    // they are distinct  points
          return  [ inSeg1Pt1 ];                          // they are the same point
        }
        // segment#1  is a single point
        if ( seg1Pt ) {
          if (! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )    return [];    // but not in segment#2
          return  [ inSeg1Pt1 ];
        }
        // segment#2  is a single point
        if ( seg2Pt ) {
          if (! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )    return [];    // but not in segment#1
          return  [ inSeg2Pt1 ];
        }

        // they are collinear segments, which might overlap
        var seg1min, seg1max, seg1minVal, seg1maxVal;
        var seg2min, seg2max, seg2minVal, seg2maxVal;
        if (seg1dx != 0) {    // the segments are NOT on a vertical line
          if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
            seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
            seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
          } else {
            seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
            seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
          }
          if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
            seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
            seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
          } else {
            seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
            seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
          }
        } else {        // the segments are on a vertical line
          if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
            seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
            seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
          } else {
            seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
            seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
          }
          if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
            seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
            seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
          } else {
            seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
            seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
          }
        }
        if ( seg1minVal <= seg2minVal ) {
          if ( seg1maxVal <  seg2minVal ) return [];
          if ( seg1maxVal == seg2minVal ) {
            if ( inExcludeAdjacentSegs )    return [];
            return [ seg2min ];
          }
          if ( seg1maxVal <= seg2maxVal ) return [ seg2min, seg1max ];
          return  [ seg2min, seg2max ];
        } else {
          if ( seg1minVal >  seg2maxVal ) return [];
          if ( seg1minVal == seg2maxVal ) {
            if ( inExcludeAdjacentSegs )    return [];
            return [ seg1min ];
          }
          if ( seg1maxVal <= seg2maxVal ) return [ seg1min, seg1max ];
          return  [ seg1min, seg2max ];
        }
      }
    }

    function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
      // The order of legs is important

      var EPSILON = 0.0000000001;

      // translation of all points, so that Vertex is at (0,0)
      var legFromPtX  = inLegFromPt.x - inVertex.x,  legFromPtY = inLegFromPt.y - inVertex.y;
      var legToPtX  = inLegToPt.x - inVertex.x,  legToPtY   = inLegToPt.y - inVertex.y;
      var otherPtX  = inOtherPt.x - inVertex.x,  otherPtY   = inOtherPt.y - inVertex.y;

      // main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
      var from2toAngle  = legFromPtX * legToPtY - legFromPtY * legToPtX;
      var from2otherAngle = legFromPtX * otherPtY - legFromPtY * otherPtX;

      if ( Math.abs(from2toAngle) > EPSILON ) {     // angle != 180 deg.

        var other2toAngle   = otherPtX * legToPtY - otherPtY * legToPtX;
        // console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

        if ( from2toAngle > 0 ) {       // main angle < 180 deg.
          return  ( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
        } else {                // main angle > 180 deg.
          return  ( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
        }
      } else {                    // angle == 180 deg.
        // console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
        return  ( from2otherAngle > 0 );
      }
    }


    function removeHoles( contour, holes ) {

      var shape = contour.concat(); // work on this shape
      var hole;

      function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
        // Check if hole point lies within angle around shape point
        var lastShapeIdx = shape.length - 1;

        var prevShapeIdx = inShapeIdx - 1;
        if ( prevShapeIdx < 0 )     prevShapeIdx = lastShapeIdx;

        var nextShapeIdx = inShapeIdx + 1;
        if ( nextShapeIdx > lastShapeIdx )  nextShapeIdx = 0;

        var insideAngle = isPointInsideAngle( shape[inShapeIdx], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[inHoleIdx] );
        if (! insideAngle ) {
          // console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
          return  false;
        }

        // Check if shape point lies within angle around hole point
        var lastHoleIdx = hole.length - 1;

        var prevHoleIdx = inHoleIdx - 1;
        if ( prevHoleIdx < 0 )      prevHoleIdx = lastHoleIdx;

        var nextHoleIdx = inHoleIdx + 1;
        if ( nextHoleIdx > lastHoleIdx )  nextHoleIdx = 0;

        insideAngle = isPointInsideAngle( hole[inHoleIdx], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[inShapeIdx] );
        if (! insideAngle ) {
          // console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
          return  false;
        }

        return  true;
      }

      function intersectsShapeEdge( inShapePt, inHolePt ) {
        // checks for intersections with shape edges
        var sIdx, nextIdx, intersection;
        for ( sIdx = 0; sIdx < shape.length; sIdx++ ) {
          nextIdx = sIdx+1; nextIdx %= shape.length;
          intersection = intersect_segments_2D( inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true );
          if ( intersection.length > 0 )    return  true;
        }

        return  false;
      }

      var indepHoles = [];

      function intersectsHoleEdge( inShapePt, inHolePt ) {
        // checks for intersections with hole edges
        var ihIdx, chkHole,
          hIdx, nextIdx, intersection;
        for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx++ ) {
          chkHole = holes[indepHoles[ihIdx]];
          for ( hIdx = 0; hIdx < chkHole.length; hIdx++ ) {
            nextIdx = hIdx+1; nextIdx %= chkHole.length;
            intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true );
            if ( intersection.length > 0 )    return  true;
          }
        }
        return  false;
      }

      var holeIndex, shapeIndex,
        shapePt, holePt,
        holeIdx, cutKey, failedCuts = [],
        tmpShape1, tmpShape2,
        tmpHole1, tmpHole2;

      for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

        indepHoles.push( h );

      }

      var minShapeIndex = 0;
      var counter = indepHoles.length * 2;
      while ( indepHoles.length > 0 ) {
        counter --;
        if ( counter < 0 ) {
          console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
          break;
        }

        // search for shape-vertex and hole-vertex,
        // which can be connected without intersections
        for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex++ ) {

          shapePt = shape[ shapeIndex ];
          holeIndex = -1;

          // search for hole which can be reached without intersections
          for ( var h = 0; h < indepHoles.length; h ++ ) {
            holeIdx = indepHoles[h];

            // prevent multiple checks
            cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
            if ( failedCuts[cutKey] !== undefined )     continue;

            hole = holes[holeIdx];
            for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
              holePt = hole[ h2 ];
              if (! isCutLineInsideAngles( shapeIndex, h2 ) )   continue;
              if ( intersectsShapeEdge( shapePt, holePt ) )   continue;
              if ( intersectsHoleEdge( shapePt, holePt ) )    continue;

              holeIndex = h2;
              indepHoles.splice(h,1);

              tmpShape1 = shape.slice( 0, shapeIndex+1 );
              tmpShape2 = shape.slice( shapeIndex );
              tmpHole1 = hole.slice( holeIndex );
              tmpHole2 = hole.slice( 0, holeIndex+1 );

              shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

              minShapeIndex = shapeIndex;

              // Debug only, to show the selected cuts
              // glob_CutLines.push( [ shapePt, holePt ] );

              break;
            }
            if ( holeIndex >= 0 ) break;    // hole-vertex found

            failedCuts[cutKey] = true;      // remember failure
          }
          if ( holeIndex >= 0 ) break;    // hole-vertex found
        }
      }

      return shape;       /* shape with no holes */
    }


    var i, il, f, face,
      key, index,
      allPointsMap = {};

    // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

    var allpoints = contour.concat();

    for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

      Array.prototype.push.apply( allpoints, holes[h] );

    }

    //console.log( "allpoints",allpoints, allpoints.length );

    // prepare all points map

    for ( i = 0, il = allpoints.length; i < il; i ++ ) {

      key = allpoints[ i ].x + ":" + allpoints[ i ].y;

      if ( allPointsMap[ key ] !== undefined ) {

        console.log( "Duplicate point", key );

      }

      allPointsMap[ key ] = i;

    }

    // remove holes by cutting paths to holes and adding them to the shape
    var shapeWithoutHoles = removeHoles( contour, holes );

    var triangles = THREE.FontUtils.Triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
    //console.log( "triangles",triangles, triangles.length );

    // check all face vertices against all points map

    for ( i = 0, il = triangles.length; i < il; i ++ ) {

      face = triangles[ i ];

      for ( f = 0; f < 3; f ++ ) {

        key = face[ f ].x + ":" + face[ f ].y;

        index = allPointsMap[ key ];

        if ( index !== undefined ) {

          face[ f ] = index;

        }

      }

    }

    return triangles.concat();

  },

  isClockWise: function ( pts ) {

    return THREE.FontUtils.Triangulate.area( pts ) < 0;

  },

  // Bezier Curves formulas obtained from
  // http://en.wikipedia.org/wiki/B%C3%A9zier_curve

  // Quad Bezier Functions

  b2p0: function ( t, p ) {

    var k = 1 - t;
    return k * k * p;

  },

  b2p1: function ( t, p ) {

    return 2 * ( 1 - t ) * t * p;

  },

  b2p2: function ( t, p ) {

    return t * t * p;

  },

  b2: function ( t, p0, p1, p2 ) {

    return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );

  },

  // Cubic Bezier Functions

  b3p0: function ( t, p ) {

    var k = 1 - t;
    return k * k * k * p;

  },

  b3p1: function ( t, p ) {

    var k = 1 - t;
    return 3 * k * k * t * p;

  },

  b3p2: function ( t, p ) {

    var k = 1 - t;
    return 3 * k * t * t * p;

  },

  b3p3: function ( t, p ) {

    return t * t * t * p;

  },

  b3: function ( t, p0, p1, p2, p3 ) {

    return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );

  }

};


/**************************************************************
 *  Line
 **************************************************************/

THREE.LineCurve = function ( v1, v2 ) {

  this.v1 = v1;
  this.v2 = v2;

};

THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.LineCurve.prototype.getPoint = function ( t ) {

  var point = this.v2.clone().sub(this.v1);
  point.multiplyScalar( t ).add( this.v1 );

  return point;

};

// Line curve is linear, so we can overwrite default getPointAt

THREE.LineCurve.prototype.getPointAt = function ( u ) {

  return this.getPoint( u );

};

THREE.LineCurve.prototype.getTangent = function( t ) {

  var tangent = this.v2.clone().sub(this.v1);

  return tangent.normalize();

};
/**************************************************************
 *  Quadratic Bezier curve
 **************************************************************/


THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;

};

THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );


THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

  var tx, ty;

  tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
  ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );

  return new THREE.Vector2( tx, ty );

};


THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

  var tx, ty;

  tx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );
  ty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );

  // returns unit vector

  var tangent = new THREE.Vector2( tx, ty );
  tangent.normalize();

  return tangent;

};
/**************************************************************
 *  Cubic Bezier curve
 **************************************************************/

THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
  this.v3 = v3;

};

THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

  var tx, ty;

  tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
  ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

  return new THREE.Vector2( tx, ty );

};

THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

  var tx, ty;

  tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
  ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

  var tangent = new THREE.Vector2( tx, ty );
  tangent.normalize();

  return tangent;

};
/**************************************************************
 *  Spline curve
 **************************************************************/

THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

  this.points = (points == undefined) ? [] : points;

};

THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.SplineCurve.prototype.getPoint = function ( t ) {

  var v = new THREE.Vector2();
  var c = [];
  var points = this.points, point, intPoint, weight;
  point = ( points.length - 1 ) * t;

  intPoint = Math.floor( point );
  weight = point - intPoint;

  c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
  c[ 1 ] = intPoint;
  c[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;
  c[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;

  v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
  v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );

  return v;

};
/**************************************************************
 *  Ellipse curve
 **************************************************************/

THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {

  this.aX = aX;
  this.aY = aY;

  this.xRadius = xRadius;
  this.yRadius = yRadius;

  this.aStartAngle = aStartAngle;
  this.aEndAngle = aEndAngle;

  this.aClockwise = aClockwise;

};

THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.EllipseCurve.prototype.getPoint = function ( t ) {

  var angle;
  var deltaAngle = this.aEndAngle - this.aStartAngle;

  if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
  if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

  if ( this.aClockwise === true ) {

    angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

  } else {

    angle = this.aStartAngle + t * deltaAngle;

  }

  var tx = this.aX + this.xRadius * Math.cos( angle );
  var ty = this.aY + this.yRadius * Math.sin( angle );

  return new THREE.Vector2( tx, ty );

};

/**************************************************************
 *  Arc curve
 **************************************************************/

THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

  THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
};

THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
/**************************************************************
 *  Line3D
 **************************************************************/

THREE.LineCurve3 = THREE.Curve.create(

  function ( v1, v2 ) {

    this.v1 = v1;
    this.v2 = v2;

  },

  function ( t ) {

    var r = new THREE.Vector3();


    r.subVectors( this.v2, this.v1 ); // diff
    r.multiplyScalar( t );
    r.add( this.v1 );

    return r;

  }

);

/**************************************************************
 *  Quadratic Bezier 3D curve
 **************************************************************/

THREE.QuadraticBezierCurve3 = THREE.Curve.create(

  function ( v0, v1, v2 ) {

    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;

  },

  function ( t ) {

    var tx, ty, tz;

    tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
    ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
    tz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );

    return new THREE.Vector3( tx, ty, tz );

  }

);
/**************************************************************
 *  Cubic Bezier 3D curve
 **************************************************************/

THREE.CubicBezierCurve3 = THREE.Curve.create(

  function ( v0, v1, v2, v3 ) {

    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;

  },

  function ( t ) {

    var tx, ty, tz;

    tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
    ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
    tz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );

    return new THREE.Vector3( tx, ty, tz );

  }

);
/**************************************************************
 *  Spline 3D curve
 **************************************************************/


THREE.SplineCurve3 = THREE.Curve.create(

  function ( points /* array of Vector3 */) {

    this.points = (points == undefined) ? [] : points;

  },

  function ( t ) {

    var v = new THREE.Vector3();
    var c = [];
    var points = this.points, point, intPoint, weight;
    point = ( points.length - 1 ) * t;

    intPoint = Math.floor( point );
    weight = point - intPoint;

    c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
    c[ 1 ] = intPoint;
    c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
    c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

    var pt0 = points[ c[0] ],
      pt1 = points[ c[1] ],
      pt2 = points[ c[2] ],
      pt3 = points[ c[3] ];

    v.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);
    v.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);
    v.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);

    return v;

  }

);


// THREE.SplineCurve3.prototype.getTangent = function(t) {
//    var v = new THREE.Vector3();
//    var c = [];
//    var points = this.points, point, intPoint, weight;
//    point = ( points.length - 1 ) * t;

//    intPoint = Math.floor( point );
//    weight = point - intPoint;

//    c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
//    c[ 1 ] = intPoint;
//    c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
//    c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

//    var pt0 = points[ c[0] ],
//      pt1 = points[ c[1] ],
//      pt2 = points[ c[2] ],
//      pt3 = points[ c[3] ];

//  // t = weight;
//  v.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );
//  v.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );
//  v.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );

//  return v;

// }
/**************************************************************
 *  Closed Spline 3D curve
 **************************************************************/


THREE.ClosedSplineCurve3 = THREE.Curve.create(

  function ( points /* array of Vector3 */) {

    this.points = (points == undefined) ? [] : points;

  },

    function ( t ) {

        var v = new THREE.Vector3();
        var c = [];
        var points = this.points, point, intPoint, weight;
        point = ( points.length - 0 ) * t;
            // This needs to be from 0-length +1

        intPoint = Math.floor( point );
        weight = point - intPoint;

        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
        c[ 0 ] = ( intPoint - 1 ) % points.length;
        c[ 1 ] = ( intPoint ) % points.length;
        c[ 2 ] = ( intPoint + 1 ) % points.length;
        c[ 3 ] = ( intPoint + 2 ) % points.length;

        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );
        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );

        return v;

    }

);
/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.AnimationHandler = ( function () {

  var playing = [];
  var library = {};
  var that    = {};

  that.update = function ( deltaTimeMS ) {

    for ( var i = 0; i < playing.length; i ++ ) {

      playing[ i ].update( deltaTimeMS );

    }

  };

  that.addToUpdate = function ( animation ) {

    if ( playing.indexOf( animation ) === -1 ) {

      playing.push( animation );

    }

  };

  that.removeFromUpdate = function ( animation ) {

    var index = playing.indexOf( animation );

    if ( index !== -1 ) {

      playing.splice( index, 1 );

    }

  };

  that.add = function ( data ) {

    if ( library[ data.name ] !== undefined ) {

      console.log( "THREE.AnimationHandler.add: Warning! " + data.name + " already exists in library. Overwriting." );

    }

    library[ data.name ] = data;
    initData( data );

  };

  that.remove = function ( name ) {

    if ( library[ name ] === undefined ) {

      console.log( "THREE.AnimationHandler.add: Warning! " + name + " doesn't exists in library. Doing nothing." );

    }

    library[ name ] = undefined;

  };

  that.get = function ( name ) {

    if ( typeof name === "string" ) {

      if ( library[ name ] ) {

        return library[ name ];

      } else {

        return null;

      }

    } else {

      // todo: add simple tween library

    }

  };

  that.parse = function ( root ) {

    // setup hierarchy

    var hierarchy = [];

    if ( root instanceof THREE.SkinnedMesh ) {

      for ( var b = 0; b < root.skeleton.bones.length; b++ ) {

        hierarchy.push( root.skeleton.bones[ b ] );

      }

    } else {

      parseRecurseHierarchy( root, hierarchy );

    }

    return hierarchy;

  };

  var parseRecurseHierarchy = function ( root, hierarchy ) {

    hierarchy.push( root );

    for ( var c = 0; c < root.children.length; c++ )
      parseRecurseHierarchy( root.children[ c ], hierarchy );

  }

  var initData = function ( data ) {

    if ( data.initialized === true )
      return;


    // loop through all keys

    for ( var h = 0; h < data.hierarchy.length; h ++ ) {

      for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

        // remove minus times

        if ( data.hierarchy[ h ].keys[ k ].time < 0 ) {

           data.hierarchy[ h ].keys[ k ].time = 0;

        }

        // create quaternions

        if ( data.hierarchy[ h ].keys[ k ].rot !== undefined &&
          !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {

          var quat = data.hierarchy[ h ].keys[ k ].rot;
          data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion().fromArray( quat );

        }

      }

      // prepare morph target keys

      if ( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {

        // get all used

        var usedMorphTargets = {};

        for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

          for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

            var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];
            usedMorphTargets[ morphTargetName ] = -1;

          }

        }

        data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;


        // set all used on all frames

        for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

          var influences = {};

          for ( var morphTargetName in usedMorphTargets ) {

            for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

              if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {

                influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];
                break;

              }

            }

            if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {

              influences[ morphTargetName ] = 0;

            }

          }

          data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;

        }

      }


      // remove all keys that are on the same time

      for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {

        if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {

          data.hierarchy[ h ].keys.splice( k, 1 );
          k --;

        }

      }


      // set index

      for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

        data.hierarchy[ h ].keys[ k ].index = k;

      }

    }

    data.initialized = true;

  };


  // interpolation types

  that.LINEAR = 0;
  that.CATMULLROM = 1;
  that.CATMULLROM_FORWARD = 2;

  return that;

}() );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Animation = function ( root, name ) {

  this.root = root;
  this.data = THREE.AnimationHandler.get( name );
  this.hierarchy = THREE.AnimationHandler.parse( root );

  this.currentTime = 0;
  this.timeScale = 1;

  this.isPlaying = false;
  this.isPaused = true;
  this.loop = true;
  this.weight = 0;

  this.interpolationType = THREE.AnimationHandler.LINEAR;

};


THREE.Animation.prototype.keyTypes = [ "pos", "rot", "scl" ];


THREE.Animation.prototype.play = function ( startTime, weight ) {

  this.currentTime = startTime !== undefined ? startTime : 0;
  this.weight = weight !== undefined ? weight: 1;

  this.isPlaying = true;
  this.isPaused = false;

  this.reset();

  THREE.AnimationHandler.addToUpdate( this );

};


THREE.Animation.prototype.pause = function() {

  if ( this.isPaused === true ) {

    THREE.AnimationHandler.addToUpdate( this );

  } else {

    THREE.AnimationHandler.removeFromUpdate( this );

  }

  this.isPaused = !this.isPaused;

};


THREE.Animation.prototype.stop = function() {

  this.isPlaying = false;
  this.isPaused  = false;
  THREE.AnimationHandler.removeFromUpdate( this );

};

THREE.Animation.prototype.reset = function () {

  for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

    var object = this.hierarchy[ h ];

    object.matrixAutoUpdate = true;

    if ( object.animationCache === undefined ) {

      object.animationCache = {};

    }

    if ( object.animationCache[this.data.name] === undefined ) {

      object.animationCache[this.data.name] = {};
      object.animationCache[this.data.name].prevKey = { pos: 0, rot: 0, scl: 0 };
      object.animationCache[this.data.name].nextKey = { pos: 0, rot: 0, scl: 0 };
      object.animationCache[this.data.name].originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

    }

    var animationCache = object.animationCache[this.data.name];

    // Get keys to match our current time

    for ( var t = 0; t < 3; t ++ ) {

      var type = this.keyTypes[ t ];

      var prevKey = this.data.hierarchy[ h ].keys[ 0 ];
      var nextKey = this.getNextKeyWith( type, h, 1 );

      while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

        prevKey = nextKey;
        nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

      }

      animationCache.prevKey[ type ] = prevKey;
      animationCache.nextKey[ type ] = nextKey;

    }

  }

};


THREE.Animation.prototype.update = (function(){

  var points = [];
  var target = new THREE.Vector3();
  var newVector = new THREE.Vector3();
  var newQuat = new THREE.Quaternion();

  // Catmull-Rom spline

  var interpolateCatmullRom = function ( points, scale ) {

    var c = [], v3 = [],
    point, intPoint, weight, w2, w3,
    pa, pb, pc, pd;

    point = ( points.length - 1 ) * scale;
    intPoint = Math.floor( point );
    weight = point - intPoint;

    c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
    c[ 1 ] = intPoint;
    c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
    c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;

    pa = points[ c[ 0 ] ];
    pb = points[ c[ 1 ] ];
    pc = points[ c[ 2 ] ];
    pd = points[ c[ 3 ] ];

    w2 = weight * weight;
    w3 = weight * w2;

    v3[ 0 ] = interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );
    v3[ 1 ] = interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );
    v3[ 2 ] = interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );

    return v3;

  };

  var interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {

    var v0 = ( p2 - p0 ) * 0.5,
      v1 = ( p3 - p1 ) * 0.5;

    return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

  };

  return function ( delta ) {
    if ( this.isPlaying === false ) return;

    this.currentTime += delta * this.timeScale;

    if ( this.weight === 0 )
      return;

    //

    var vector;
    var duration = this.data.length;

    if ( this.loop === true && this.currentTime > duration ) {

      this.currentTime %= duration;
      this.reset();

    } else if ( this.loop === false && this.currentTime > duration ) {

      this.stop();
      return;

    }

    for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

      var object = this.hierarchy[ h ];
      var animationCache = object.animationCache[this.data.name];

      // loop through pos/rot/scl

      for ( var t = 0; t < 3; t ++ ) {

        // get keys

        var type    = this.keyTypes[ t ];
        var prevKey = animationCache.prevKey[ type ];
        var nextKey = animationCache.nextKey[ type ];

        if ( nextKey.time <= this.currentTime ) {

          prevKey = this.data.hierarchy[ h ].keys[ 0 ];
          nextKey = this.getNextKeyWith( type, h, 1 );

          while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

            prevKey = nextKey;
            nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

          }

          animationCache.prevKey[ type ] = prevKey;
          animationCache.nextKey[ type ] = nextKey;

        }

        object.matrixAutoUpdate = true;
        object.matrixWorldNeedsUpdate = true;

        var scale = ( this.currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );

        var prevXYZ = prevKey[ type ];
        var nextXYZ = nextKey[ type ];

        if ( scale < 0 ) scale = 0;
        if ( scale > 1 ) scale = 1;

        // interpolate

        if ( type === "pos" ) {

          vector = object.position;

          if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {

            newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
            newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
            newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

            // blend
            if (object instanceof THREE.Bone) {

              var proportionalWeight = this.weight / ( this.weight + object.accumulatedPosWeight );
              vector.lerp( newVector, proportionalWeight );
              object.accumulatedPosWeight += this.weight;

            } else
              vector = newVector;

          } else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
            this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

            points[ 0 ] = this.getPrevKeyWith( "pos", h, prevKey.index - 1 )[ "pos" ];
            points[ 1 ] = prevXYZ;
            points[ 2 ] = nextXYZ;
            points[ 3 ] = this.getNextKeyWith( "pos", h, nextKey.index + 1 )[ "pos" ];

            scale = scale * 0.33 + 0.33;

            var currentPoint = interpolateCatmullRom( points, scale );

            if ( object instanceof THREE.Bone ) {

              var proportionalWeight = this.weight / ( this.weight + object.accumulatedPosWeight );
              object.accumulatedPosWeight += this.weight;

            }
            else
              var proportionalWeight = 1;

            // blend
            vector.x = vector.x + ( currentPoint[ 0 ] - vector.x ) * proportionalWeight;
            vector.y = vector.y + ( currentPoint[ 1 ] - vector.y ) * proportionalWeight;
            vector.z = vector.z + ( currentPoint[ 2 ] - vector.z ) * proportionalWeight;

            if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

              var forwardPoint = interpolateCatmullRom( points, scale * 1.01 );

              target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );
              target.sub( vector );
              target.y = 0;
              target.normalize();

              var angle = Math.atan2( target.x, target.z );
              object.rotation.set( 0, angle, 0 );

            }

          }

        } else if ( type === "rot" ) {

          THREE.Quaternion.slerp( prevXYZ, nextXYZ, newQuat, scale );

          // Avoid paying the cost of an additional slerp if we don't have to
          if ( !( object instanceof THREE.Bone ) ) {

            object.quaternion.copy(newQuat);

          }
          else if ( object.accumulatedRotWeight === 0) {

            object.quaternion.copy(newQuat);
            object.accumulatedRotWeight = this.weight;

          }
          else {

            var proportionalWeight = this.weight / ( this.weight + object.accumulatedRotWeight );
            THREE.Quaternion.slerp( object.quaternion, newQuat, object.quaternion, proportionalWeight );
            object.accumulatedRotWeight += this.weight;

          }

        } else if ( type === "scl" ) {

          vector = object.scale;

          newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
          newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
          newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

          if ( object instanceof THREE.Bone ) {

            var proportionalWeight = this.weight / ( this.weight + object.accumulatedSclWeight);
            vector.lerp( newVector, proportionalWeight );
            object.accumulatedSclWeight += this.weight;

          } else
            vector = newVector;

        }

      }

    }

    return true;

  };

})();





// Get next key with

THREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {

  var keys = this.data.hierarchy[ h ].keys;

  if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
     this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

    key = key < keys.length - 1 ? key : keys.length - 1;

  } else {

    key = key % keys.length;

  }

  for ( ; key < keys.length; key++ ) {

    if ( keys[ key ][ type ] !== undefined ) {

      return keys[ key ];

    }

  }

  return this.data.hierarchy[ h ].keys[ 0 ];

};

// Get previous key with

THREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {

  var keys = this.data.hierarchy[ h ].keys;

  if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

    key = key > 0 ? key : 0;

  } else {

    key = key >= 0 ? key : key + keys.length;

  }


  for ( ; key >= 0; key -- ) {

    if ( keys[ key ][ type ] !== undefined ) {

      return keys[ key ];

    }

  }

  return this.data.hierarchy[ h ].keys[ keys.length - 1 ];

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author khang duong
 * @author erik kitson
 */

THREE.KeyFrameAnimation = function ( root, data ) {

  this.root = root;
  this.data = THREE.AnimationHandler.get( data );
  this.hierarchy = THREE.AnimationHandler.parse( root );
  this.currentTime = 0;
  this.timeScale = 0.001;
  this.isPlaying = false;
  this.isPaused = true;
  this.loop = true;

  // initialize to first keyframes

  for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

    var keys = this.data.hierarchy[h].keys,
      sids = this.data.hierarchy[h].sids,
      obj = this.hierarchy[h];

    if ( keys.length && sids ) {

      for ( var s = 0; s < sids.length; s++ ) {

        var sid = sids[ s ],
          next = this.getNextKeyWith( sid, h, 0 );

        if ( next ) {

          next.apply( sid );

        }

      }

      obj.matrixAutoUpdate = false;
      this.data.hierarchy[h].node.updateMatrix();
      obj.matrixWorldNeedsUpdate = true;

    }

  }

};

// Play

THREE.KeyFrameAnimation.prototype.play = function ( startTime ) {

  this.currentTime = startTime !== undefined ? startTime : 0;

  if ( this.isPlaying === false ) {

    this.isPlaying = true;

    // reset key cache

    var h, hl = this.hierarchy.length,
      object,
      node;

    for ( h = 0; h < hl; h++ ) {

      object = this.hierarchy[ h ];
      node = this.data.hierarchy[ h ];

      if ( node.animationCache === undefined ) {

        node.animationCache = {};
        node.animationCache.prevKey = null;
        node.animationCache.nextKey = null;
        node.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

      }

      var keys = this.data.hierarchy[h].keys;

      if (keys.length) {

        node.animationCache.prevKey = keys[ 0 ];
        node.animationCache.nextKey = keys[ 1 ];

        this.startTime = Math.min( keys[0].time, this.startTime );
        this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );

      }

    }

    this.update( 0 );

  }

  this.isPaused = false;

  THREE.AnimationHandler.addToUpdate( this );

};



// Pause

THREE.KeyFrameAnimation.prototype.pause = function() {

  if( this.isPaused ) {

    THREE.AnimationHandler.addToUpdate( this );

  } else {

    THREE.AnimationHandler.removeFromUpdate( this );

  }

  this.isPaused = !this.isPaused;

};


// Stop

THREE.KeyFrameAnimation.prototype.stop = function() {

  this.isPlaying = false;
  this.isPaused  = false;

  THREE.AnimationHandler.removeFromUpdate( this );

  // reset JIT matrix and remove cache

  for ( var h = 0; h < this.data.hierarchy.length; h++ ) {
    
    var obj = this.hierarchy[ h ];
    var node = this.data.hierarchy[ h ];

    if ( node.animationCache !== undefined ) {

      var original = node.animationCache.originalMatrix;

      if( obj instanceof THREE.Bone ) {

        original.copy( obj.skinMatrix );
        obj.skinMatrix = original;

      } else {

        original.copy( obj.matrix );
        obj.matrix = original;

      }

      delete node.animationCache;

    }

  }

};


// Update

THREE.KeyFrameAnimation.prototype.update = function ( delta ) {

  if ( this.isPlaying === false ) return;

  this.currentTime += delta * this.timeScale;

  //

  var duration = this.data.length;

  if ( this.loop === true && this.currentTime > duration ) {

    this.currentTime %= duration;

  }

  this.currentTime = Math.min( this.currentTime, duration );

  for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

    var object = this.hierarchy[ h ];
    var node = this.data.hierarchy[ h ];

    var keys = node.keys,
      animationCache = node.animationCache;


    if ( keys.length ) {

      var prevKey = animationCache.prevKey;
      var nextKey = animationCache.nextKey;

      if ( nextKey.time <= this.currentTime ) {

        while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

          prevKey = nextKey;
          nextKey = keys[ prevKey.index + 1 ];

        }

        animationCache.prevKey = prevKey;
        animationCache.nextKey = nextKey;

      }

      if ( nextKey.time >= this.currentTime ) {

        prevKey.interpolate( nextKey, this.currentTime );

      } else {

        prevKey.interpolate( nextKey, nextKey.time );

      }

      this.data.hierarchy[ h ].node.updateMatrix();
      object.matrixWorldNeedsUpdate = true;

    }

  }

};

// Get next key with

THREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {

  var keys = this.data.hierarchy[ h ].keys;
  key = key % keys.length;

  for ( ; key < keys.length; key++ ) {

    if ( keys[ key ].hasTarget( sid ) ) {

      return keys[ key ];

    }

  }

  return keys[ 0 ];

};

// Get previous key with

THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {

  var keys = this.data.hierarchy[ h ].keys;
  key = key >= 0 ? key : key + keys.length;

  for ( ; key >= 0; key-- ) {

    if ( keys[ key ].hasTarget( sid ) ) {

      return keys[ key ];

    }

  }

  return keys[ keys.length - 1 ];

};

/**
 * @author mrdoob / http://mrdoob.com
 */

THREE.MorphAnimation = function ( mesh ) {

  this.mesh = mesh;
  this.frames = mesh.morphTargetInfluences.length;
  this.currentTime = 0;
  this.duration = 1000;
  this.loop = true;

  this.isPlaying = false;

};

THREE.MorphAnimation.prototype = {

  play: function () {

    this.isPlaying = true;

  },

  pause: function () {

    this.isPlaying = false;
  },

  update: ( function () {

    var lastFrame = 0;
    var currentFrame = 0;

    return function ( delta ) {

      if ( this.isPlaying === false ) return;

      this.currentTime += delta;

      if ( this.loop === true && this.currentTime > this.duration ) {

        this.currentTime %= this.duration;

      }

      this.currentTime = Math.min( this.currentTime, this.duration );

      var interpolation = this.duration / this.frames;
      var frame = Math.floor( this.currentTime / interpolation );

      if ( frame != currentFrame ) {

        this.mesh.morphTargetInfluences[ lastFrame ] = 0;
        this.mesh.morphTargetInfluences[ currentFrame ] = 1;
        this.mesh.morphTargetInfluences[ frame ] = 0;

        lastFrame = currentFrame;
        currentFrame = frame;

      }

      this.mesh.morphTargetInfluences[ frame ] = ( this.currentTime % interpolation ) / interpolation;
      this.mesh.morphTargetInfluences[ lastFrame ] = 1 - this.mesh.morphTargetInfluences[ frame ];

    }

  } )()

};

/**
 * Camera for rendering cube maps
 *  - renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CubeCamera = function ( near, far, cubeResolution ) {

  THREE.Object3D.call( this );

  var fov = 90, aspect = 1;

  var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraPX.up.set( 0, -1, 0 );
  cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
  this.add( cameraPX );

  var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraNX.up.set( 0, -1, 0 );
  cameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );
  this.add( cameraNX );

  var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraPY.up.set( 0, 0, 1 );
  cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
  this.add( cameraPY );

  var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraNY.up.set( 0, 0, -1 );
  cameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );
  this.add( cameraNY );

  var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraPZ.up.set( 0, -1, 0 );
  cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
  this.add( cameraPZ );

  var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
  cameraNZ.up.set( 0, -1, 0 );
  cameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );
  this.add( cameraNZ );

  this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );

  this.updateCubeMap = function ( renderer, scene ) {

    var renderTarget = this.renderTarget;
    var generateMipmaps = renderTarget.generateMipmaps;

    renderTarget.generateMipmaps = false;

    renderTarget.activeCubeFace = 0;
    renderer.render( scene, cameraPX, renderTarget );

    renderTarget.activeCubeFace = 1;
    renderer.render( scene, cameraNX, renderTarget );

    renderTarget.activeCubeFace = 2;
    renderer.render( scene, cameraPY, renderTarget );

    renderTarget.activeCubeFace = 3;
    renderer.render( scene, cameraNY, renderTarget );

    renderTarget.activeCubeFace = 4;
    renderer.render( scene, cameraPZ, renderTarget );

    renderTarget.generateMipmaps = generateMipmaps;

    renderTarget.activeCubeFace = 5;
    renderer.render( scene, cameraNZ, renderTarget );

  };

};

THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );

/**
 *  @author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog
 *
 *  A general perpose camera, for setting FOV, Lens Focal Length,
 *    and switching between perspective and orthographic views easily.
 *    Use this only if you do not wish to manage
 *    both a Orthographic and Perspective Camera
 *
 */


THREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {

  THREE.Camera.call( this );

  this.fov = fov;

  this.left = -width / 2;
  this.right = width / 2
  this.top = height / 2;
  this.bottom = -height / 2;

  // We could also handle the projectionMatrix internally, but just wanted to test nested camera objects

  this.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2,  orthoNear, orthoFar );
  this.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );

  this.zoom = 1;

  this.toPerspective();

  var aspect = width/height;

};

THREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.CombinedCamera.prototype.toPerspective = function () {

  // Switches to the Perspective Camera

  this.near = this.cameraP.near;
  this.far = this.cameraP.far;

  this.cameraP.fov =  this.fov / this.zoom ;

  this.cameraP.updateProjectionMatrix();

  this.projectionMatrix = this.cameraP.projectionMatrix;

  this.inPerspectiveMode = true;
  this.inOrthographicMode = false;

};

THREE.CombinedCamera.prototype.toOrthographic = function () {

  // Switches to the Orthographic camera estimating viewport from Perspective

  var fov = this.fov;
  var aspect = this.cameraP.aspect;
  var near = this.cameraP.near;
  var far = this.cameraP.far;

  // The size that we set is the mid plane of the viewing frustum

  var hyperfocus = ( near + far ) / 2;

  var halfHeight = Math.tan( fov / 2 ) * hyperfocus;
  var planeHeight = 2 * halfHeight;
  var planeWidth = planeHeight * aspect;
  var halfWidth = planeWidth / 2;

  halfHeight /= this.zoom;
  halfWidth /= this.zoom;

  this.cameraO.left = -halfWidth;
  this.cameraO.right = halfWidth;
  this.cameraO.top = halfHeight;
  this.cameraO.bottom = -halfHeight;

  // this.cameraO.left = -farHalfWidth;
  // this.cameraO.right = farHalfWidth;
  // this.cameraO.top = farHalfHeight;
  // this.cameraO.bottom = -farHalfHeight;

  // this.cameraO.left = this.left / this.zoom;
  // this.cameraO.right = this.right / this.zoom;
  // this.cameraO.top = this.top / this.zoom;
  // this.cameraO.bottom = this.bottom / this.zoom;

  this.cameraO.updateProjectionMatrix();

  this.near = this.cameraO.near;
  this.far = this.cameraO.far;
  this.projectionMatrix = this.cameraO.projectionMatrix;

  this.inPerspectiveMode = false;
  this.inOrthographicMode = true;

};


THREE.CombinedCamera.prototype.setSize = function( width, height ) {

  this.cameraP.aspect = width / height;
  this.left = -width / 2;
  this.right = width / 2
  this.top = height / 2;
  this.bottom = -height / 2;

};


THREE.CombinedCamera.prototype.setFov = function( fov ) {

  this.fov = fov;

  if ( this.inPerspectiveMode ) {

    this.toPerspective();

  } else {

    this.toOrthographic();

  }

};

// For mantaining similar API with PerspectiveCamera

THREE.CombinedCamera.prototype.updateProjectionMatrix = function() {

  if ( this.inPerspectiveMode ) {

    this.toPerspective();

  } else {

    this.toPerspective();
    this.toOrthographic();

  }

};

/*
* Uses Focal Length (in mm) to estimate and set FOV
* 35mm (fullframe) camera is used if frame size is not specified;
* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
*/
THREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {

  if ( frameHeight === undefined ) frameHeight = 24;

  var fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );

  this.setFov( fov );

  return fov;
};


THREE.CombinedCamera.prototype.setZoom = function( zoom ) {

  this.zoom = zoom;

  if ( this.inPerspectiveMode ) {

    this.toPerspective();

  } else {

    this.toOrthographic();

  }

};

THREE.CombinedCamera.prototype.toFrontView = function() {

  this.rotation.x = 0;
  this.rotation.y = 0;
  this.rotation.z = 0;

  // should we be modifing the matrix instead?

  this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBackView = function() {

  this.rotation.x = 0;
  this.rotation.y = Math.PI;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toLeftView = function() {

  this.rotation.x = 0;
  this.rotation.y = - Math.PI / 2;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toRightView = function() {

  this.rotation.x = 0;
  this.rotation.y = Math.PI / 2;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toTopView = function() {

  this.rotation.x = - Math.PI / 2;
  this.rotation.y = 0;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBottomView = function() {

  this.rotation.x = Math.PI / 2;
  this.rotation.y = 0;
  this.rotation.z = 0;
  this.rotationAutoUpdate = false;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
 */

THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

  THREE.Geometry.call( this );

  this.parameters = {
    width: width,
    height: height,
    depth: depth,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    depthSegments: depthSegments
  };

  this.widthSegments = widthSegments || 1;
  this.heightSegments = heightSegments || 1;
  this.depthSegments = depthSegments || 1;

  var scope = this;

  var width_half = width / 2;
  var height_half = height / 2;
  var depth_half = depth / 2;

  buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
  buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
  buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
  buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
  buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
  buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz

  function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

    var w, ix, iy,
    gridX = scope.widthSegments,
    gridY = scope.heightSegments,
    width_half = width / 2,
    height_half = height / 2,
    offset = scope.vertices.length;

    if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

      w = 'z';

    } else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

      w = 'y';
      gridY = scope.depthSegments;

    } else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

      w = 'x';
      gridX = scope.depthSegments;

    }

    var gridX1 = gridX + 1,
    gridY1 = gridY + 1,
    segment_width = width / gridX,
    segment_height = height / gridY,
    normal = new THREE.Vector3();

    normal[ w ] = depth > 0 ? 1 : - 1;

    for ( iy = 0; iy < gridY1; iy ++ ) {

      for ( ix = 0; ix < gridX1; ix ++ ) {

        var vector = new THREE.Vector3();
        vector[ u ] = ( ix * segment_width - width_half ) * udir;
        vector[ v ] = ( iy * segment_height - height_half ) * vdir;
        vector[ w ] = depth;

        scope.vertices.push( vector );

      }

    }

    for ( iy = 0; iy < gridY; iy++ ) {

      for ( ix = 0; ix < gridX; ix++ ) {

        var a = ix + gridX1 * iy;
        var b = ix + gridX1 * ( iy + 1 );
        var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
        var d = ( ix + 1 ) + gridX1 * iy;

        var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
        var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
        var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
        var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );

        var face = new THREE.Face3( a + offset, b + offset, d + offset );
        face.normal.copy( normal );
        face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
        face.materialIndex = materialIndex;

        scope.faces.push( face );
        scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

        face = new THREE.Face3( b + offset, c + offset, d + offset );
        face.normal.copy( normal );
        face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
        face.materialIndex = materialIndex;

        scope.faces.push( face );
        scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

      }

    }

  }

  this.mergeVertices();

};

THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author hughes
 */

THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

  THREE.Geometry.call( this );

  this.parameters = {
    radius: radius,
    segments: segments,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };

  radius = radius || 50;
  segments = segments !== undefined ? Math.max( 3, segments ) : 8;

  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  var i, uvs = [],
  center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );

  this.vertices.push(center);
  uvs.push( centerUV );

  for ( i = 0; i <= segments; i ++ ) {

    var vertex = new THREE.Vector3();
    var segment = thetaStart + i / segments * thetaLength;

    vertex.x = radius * Math.cos( segment );
    vertex.y = radius * Math.sin( segment );

    this.vertices.push( vertex );
    uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );

  }

  var n = new THREE.Vector3( 0, 0, 1 );

  for ( i = 1; i <= segments; i ++ ) {

    this.faces.push( new THREE.Face3( i, i + 1, 0, [ n.clone(), n.clone(), n.clone() ] ) );
    this.faceVertexUvs[ 0 ].push( [ uvs[ i ].clone(), uvs[ i + 1 ].clone(), centerUV.clone() ] );

  }

  this.computeFaceNormals();

  this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );

// DEPRECATED

THREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {
  console.warn( 'DEPRECATED: THREE.CubeGeometry is deprecated. Use THREE.BoxGeometry instead.' );
  return new THREE.BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments );
 };
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {

  THREE.Geometry.call( this );

  this.parameters = {
    radiusTop: radiusTop,
    radiusBottom: radiusBottom,
    height: height,
    radialSegments: radialSegments,
    heightSegments: heightSegments,
    openEnded: openEnded
  };

  radiusTop = radiusTop !== undefined ? radiusTop : 20;
  radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
  height = height !== undefined ? height : 100;

  radialSegments = radialSegments || 8;
  heightSegments = heightSegments || 1;

  openEnded = openEnded !== undefined ? openEnded : false;

  var heightHalf = height / 2;

  var x, y, vertices = [], uvs = [];

  for ( y = 0; y <= heightSegments; y ++ ) {

    var verticesRow = [];
    var uvsRow = [];

    var v = y / heightSegments;
    var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

    for ( x = 0; x <= radialSegments; x ++ ) {

      var u = x / radialSegments;

      var vertex = new THREE.Vector3();
      vertex.x = radius * Math.sin( u * Math.PI * 2 );
      vertex.y = - v * height + heightHalf;
      vertex.z = radius * Math.cos( u * Math.PI * 2 );

      this.vertices.push( vertex );

      verticesRow.push( this.vertices.length - 1 );
      uvsRow.push( new THREE.Vector2( u, 1 - v ) );

    }

    vertices.push( verticesRow );
    uvs.push( uvsRow );

  }

  var tanTheta = ( radiusBottom - radiusTop ) / height;
  var na, nb;

  for ( x = 0; x < radialSegments; x ++ ) {

    if ( radiusTop !== 0 ) {

      na = this.vertices[ vertices[ 0 ][ x ] ].clone();
      nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

    } else {

      na = this.vertices[ vertices[ 1 ][ x ] ].clone();
      nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

    }

    na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
    nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

    for ( y = 0; y < heightSegments; y ++ ) {

      var v1 = vertices[ y ][ x ];
      var v2 = vertices[ y + 1 ][ x ];
      var v3 = vertices[ y + 1 ][ x + 1 ];
      var v4 = vertices[ y ][ x + 1 ];

      var n1 = na.clone();
      var n2 = na.clone();
      var n3 = nb.clone();
      var n4 = nb.clone();

      var uv1 = uvs[ y ][ x ].clone();
      var uv2 = uvs[ y + 1 ][ x ].clone();
      var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
      var uv4 = uvs[ y ][ x + 1 ].clone();

      this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
      this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

      this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
      this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

    }

  }

  // top cap

  if ( openEnded === false && radiusTop > 0 ) {

    this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

    for ( x = 0; x < radialSegments; x ++ ) {

      var v1 = vertices[ 0 ][ x ];
      var v2 = vertices[ 0 ][ x + 1 ];
      var v3 = this.vertices.length - 1;

      var n1 = new THREE.Vector3( 0, 1, 0 );
      var n2 = new THREE.Vector3( 0, 1, 0 );
      var n3 = new THREE.Vector3( 0, 1, 0 );

      var uv1 = uvs[ 0 ][ x ].clone();
      var uv2 = uvs[ 0 ][ x + 1 ].clone();
      var uv3 = new THREE.Vector2( uv2.x, 0 );

      this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
      this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

    }

  }

  // bottom cap

  if ( openEnded === false && radiusBottom > 0 ) {

    this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

    for ( x = 0; x < radialSegments; x ++ ) {

      var v1 = vertices[ y ][ x + 1 ];
      var v2 = vertices[ y ][ x ];
      var v3 = this.vertices.length - 1;

      var n1 = new THREE.Vector3( 0, - 1, 0 );
      var n2 = new THREE.Vector3( 0, - 1, 0 );
      var n3 = new THREE.Vector3( 0, - 1, 0 );

      var uv1 = uvs[ y ][ x + 1 ].clone();
      var uv2 = uvs[ y ][ x ].clone();
      var uv3 = new THREE.Vector2( uv2.x, 1 );

      this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
      this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

    }

  }

  this.computeFaceNormals();

}

THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
 *
 *  material: <int> // material index for front and back faces
 *  extrudeMaterial: <int> // material index for extrusion and beveled faces
 *  uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ExtrudeGeometry = function ( shapes, options ) {

  if ( typeof( shapes ) === "undefined" ) {
    shapes = [];
    return;
  }

  THREE.Geometry.call( this );

  shapes = shapes instanceof Array ? shapes : [ shapes ];

  this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

  this.addShapeList( shapes, options );

  this.computeFaceNormals();

  // can't really use automatic vertex normals
  // as then front and back sides get smoothed too
  // should do separate smoothing just for sides

  //this.computeVertexNormals();

  //console.log( "took", ( Date.now() - startTime ) );

};

THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );

THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
  var sl = shapes.length;

  for ( var s = 0; s < sl; s ++ ) {
    var shape = shapes[ s ];
    this.addShape( shape, options );
  }
};

THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

  var amount = options.amount !== undefined ? options.amount : 100;

  var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
  var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
  var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

  var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

  var steps = options.steps !== undefined ? options.steps : 1;

  var extrudePath = options.extrudePath;
  var extrudePts, extrudeByPath = false;

  var material = options.material;
  var extrudeMaterial = options.extrudeMaterial;

  // Use default WorldUVGenerator if no UV generators are specified.
  var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

  var shapebb = this.shapebb;
  //shapebb = shape.getBoundingBox();



  var splineTube, binormal, normal, position2;
  if ( extrudePath ) {

    extrudePts = extrudePath.getSpacedPoints( steps );

    extrudeByPath = true;
    bevelEnabled = false; // bevels not supported for path extrusion

    // SETUP TNB variables

    // Reuse TNB from TubeGeomtry for now.
    // TODO1 - have a .isClosed in spline?

    splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);

    // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

    binormal = new THREE.Vector3();
    normal = new THREE.Vector3();
    position2 = new THREE.Vector3();

  }

  // Safeguards if bevels are not enabled

  if ( ! bevelEnabled ) {

    bevelSegments = 0;
    bevelThickness = 0;
    bevelSize = 0;

  }

  // Variables initalization

  var ahole, h, hl; // looping of holes
  var scope = this;
  var bevelPoints = [];

  var shapesOffset = this.vertices.length;

  var shapePoints = shape.extractPoints( curveSegments );

  var vertices = shapePoints.shape;
  var holes = shapePoints.holes;

  var reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;

  if ( reverse ) {

    vertices = vertices.reverse();

    // Maybe we should also check if holes are in the opposite direction, just to be safe ...

    for ( h = 0, hl = holes.length; h < hl; h ++ ) {

      ahole = holes[ h ];

      if ( THREE.Shape.Utils.isClockWise( ahole ) ) {

        holes[ h ] = ahole.reverse();

      }

    }

    reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

  }


  var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );

  /* Vertices */

  var contour = vertices; // vertices has all points but contour has only points of circumference

  for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

    ahole = holes[ h ];

    vertices = vertices.concat( ahole );

  }


  function scalePt2 ( pt, vec, size ) {

    if ( !vec ) console.log( "die" );

    return vec.clone().multiplyScalar( size ).add( pt );

  }

  var b, bs, t, z,
    vert, vlen = vertices.length,
    face, flen = faces.length,
    cont, clen = contour.length;


  // Find directions for point movement

  var RAD_TO_DEGREES = 180 / Math.PI;


  function getBevelVec( inPt, inPrev, inNext ) {

    var EPSILON = 0.0000000001;
    var sign = THREE.Math.sign;
    
    // computes for inPt the corresponding point inPt' on a new contour
    //   shiftet by 1 unit (length of normalized vector) to the left
    // if we walk along contour clockwise, this new contour is outside the old one
    //
    // inPt' is the intersection of the two lines parallel to the two
    //  adjacent edges of inPt at a distance of 1 unit on the left side.
    
    var v_trans_x, v_trans_y, shrink_by = 1;    // resulting translation vector for inPt

    // good reading for geometry algorithms (here: line-line intersection)
    // http://geomalgorithms.com/a05-_intersect-1.html

    var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
    var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
    
    var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
    
    // check for colinear edges
    var colinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
    
    if ( Math.abs( colinear0 ) > EPSILON ) {    // not colinear
      
      // length of vectors for normalizing
  
      var v_prev_len = Math.sqrt( v_prev_lensq );
      var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
      
      // shift adjacent points by unit vectors to the left
  
      var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
      var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
      
      var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
      var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
  
      // scaling factor for v_prev to intersection point
  
      var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
            ( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
            ( v_prev_x * v_next_y - v_prev_y * v_next_x );
  
      // vector from inPt to intersection point
  
      v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
      v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
  
      // Don't normalize!, otherwise sharp corners become ugly
      //  but prevent crazy spikes
      var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y )
      if ( v_trans_lensq <= 2 ) {
        return  new THREE.Vector2( v_trans_x, v_trans_y );
      } else {
        shrink_by = Math.sqrt( v_trans_lensq / 2 );
      }
      
    } else {    // handle special case of colinear edges

      var direction_eq = false;   // assumes: opposite
      if ( v_prev_x > EPSILON ) {
        if ( v_next_x > EPSILON ) { direction_eq = true; }
      } else {
        if ( v_prev_x < -EPSILON ) {
          if ( v_next_x < -EPSILON ) { direction_eq = true; }
        } else {
          if ( sign(v_prev_y) == sign(v_next_y) ) { direction_eq = true; }
        }
      }

      if ( direction_eq ) {
        // console.log("Warning: lines are a straight sequence");
        v_trans_x = -v_prev_y;
        v_trans_y =  v_prev_x;
        shrink_by = Math.sqrt( v_prev_lensq );
      } else {
        // console.log("Warning: lines are a straight spike");
        v_trans_x = v_prev_x;
        v_trans_y = v_prev_y;
        shrink_by = Math.sqrt( v_prev_lensq / 2 );
      }

    }

    return  new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

  }


  var contourMovements = [];

  for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

    if ( j === il ) j = 0;
    if ( k === il ) k = 0;

    //  (j)---(i)---(k)
    // console.log('i,j,k', i, j , k)

    var pt_i = contour[ i ];
    var pt_j = contour[ j ];
    var pt_k = contour[ k ];

    contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

  }

  var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

  for ( h = 0, hl = holes.length; h < hl; h ++ ) {

    ahole = holes[ h ];

    oneHoleMovements = [];

    for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

      if ( j === il ) j = 0;
      if ( k === il ) k = 0;

      //  (j)---(i)---(k)
      oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

    }

    holesMovements.push( oneHoleMovements );
    verticesMovements = verticesMovements.concat( oneHoleMovements );

  }


  // Loop bevelSegments, 1 for the front, 1 for the back

  for ( b = 0; b < bevelSegments; b ++ ) {
  //for ( b = bevelSegments; b > 0; b -- ) {

    t = b / bevelSegments;
    z = bevelThickness * ( 1 - t );

    //z = bevelThickness * t;
    bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved
    //bs = bevelSize * t ; // linear

    // contract shape

    for ( i = 0, il = contour.length; i < il; i ++ ) {

      vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

      v( vert.x, vert.y,  - z );

    }

    // expand holes

    for ( h = 0, hl = holes.length; h < hl; h++ ) {

      ahole = holes[ h ];
      oneHoleMovements = holesMovements[ h ];

      for ( i = 0, il = ahole.length; i < il; i++ ) {

        vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

        v( vert.x, vert.y,  -z );

      }

    }

  }

  bs = bevelSize;

  // Back facing vertices

  for ( i = 0; i < vlen; i ++ ) {

    vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

    if ( !extrudeByPath ) {

      v( vert.x, vert.y, 0 );

    } else {

      // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

      normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);
      binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);

      position2.copy( extrudePts[0] ).add(normal).add(binormal);

      v( position2.x, position2.y, position2.z );

    }

  }

  // Add stepped vertices...
  // Including front facing vertices

  var s;

  for ( s = 1; s <= steps; s ++ ) {

    for ( i = 0; i < vlen; i ++ ) {

      vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

      if ( !extrudeByPath ) {

        v( vert.x, vert.y, amount / steps * s );

      } else {

        // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

        normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );
        binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );

        position2.copy( extrudePts[s] ).add( normal ).add( binormal );

        v( position2.x, position2.y, position2.z );

      }

    }

  }


  // Add bevel segments planes

  //for ( b = 1; b <= bevelSegments; b ++ ) {
  for ( b = bevelSegments - 1; b >= 0; b -- ) {

    t = b / bevelSegments;
    z = bevelThickness * ( 1 - t );
    //bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
    bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;

    // contract shape

    for ( i = 0, il = contour.length; i < il; i ++ ) {

      vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
      v( vert.x, vert.y,  amount + z );

    }

    // expand holes

    for ( h = 0, hl = holes.length; h < hl; h ++ ) {

      ahole = holes[ h ];
      oneHoleMovements = holesMovements[ h ];

      for ( i = 0, il = ahole.length; i < il; i ++ ) {

        vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

        if ( !extrudeByPath ) {

          v( vert.x, vert.y,  amount + z );

        } else {

          v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

        }

      }

    }

  }

  /* Faces */

  // Top and bottom faces

  buildLidFaces();

  // Sides faces

  buildSideFaces();


  /////  Internal functions

  function buildLidFaces() {

    if ( bevelEnabled ) {

      var layer = 0 ; // steps + 1
      var offset = vlen * layer;

      // Bottom faces

      for ( i = 0; i < flen; i ++ ) {

        face = faces[ i ];
        f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );

      }

      layer = steps + bevelSegments * 2;
      offset = vlen * layer;

      // Top faces

      for ( i = 0; i < flen; i ++ ) {

        face = faces[ i ];
        f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );

      }

    } else {

      // Bottom faces

      for ( i = 0; i < flen; i++ ) {

        face = faces[ i ];
        f3( face[ 2 ], face[ 1 ], face[ 0 ], true );

      }

      // Top faces

      for ( i = 0; i < flen; i ++ ) {

        face = faces[ i ];
        f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );

      }
    }

  }

  // Create faces for the z-sides of the shape

  function buildSideFaces() {

    var layeroffset = 0;
    sidewalls( contour, layeroffset );
    layeroffset += contour.length;

    for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

      ahole = holes[ h ];
      sidewalls( ahole, layeroffset );

      //, true
      layeroffset += ahole.length;

    }

  }

  function sidewalls( contour, layeroffset ) {

    var j, k;
    i = contour.length;

    while ( --i >= 0 ) {

      j = i;
      k = i - 1;
      if ( k < 0 ) k = contour.length - 1;

      //console.log('b', i,j, i-1, k,vertices.length);

      var s = 0, sl = steps  + bevelSegments * 2;

      for ( s = 0; s < sl; s ++ ) {

        var slen1 = vlen * s;
        var slen2 = vlen * ( s + 1 );

        var a = layeroffset + j + slen1,
          b = layeroffset + k + slen1,
          c = layeroffset + k + slen2,
          d = layeroffset + j + slen2;

        f4( a, b, c, d, contour, s, sl, j, k );

      }
    }

  }


  function v( x, y, z ) {

    scope.vertices.push( new THREE.Vector3( x, y, z ) );

  }

  function f3( a, b, c, isBottom ) {

    a += shapesOffset;
    b += shapesOffset;
    c += shapesOffset;

    // normal, color, material
    scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );

    var uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );

    scope.faceVertexUvs[ 0 ].push( uvs );

  }

  function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

    a += shapesOffset;
    b += shapesOffset;
    c += shapesOffset;
    d += shapesOffset;

    scope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );
    scope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );

    var uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,
                                        stepIndex, stepsLength, contourIndex1, contourIndex2 );

    scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
    scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

  }

};

THREE.ExtrudeGeometry.WorldUVGenerator = {

  generateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {
    var ax = geometry.vertices[ indexA ].x,
      ay = geometry.vertices[ indexA ].y,

      bx = geometry.vertices[ indexB ].x,
      by = geometry.vertices[ indexB ].y,

      cx = geometry.vertices[ indexC ].x,
      cy = geometry.vertices[ indexC ].y;

    return [
      new THREE.Vector2( ax, ay ),
      new THREE.Vector2( bx, by ),
      new THREE.Vector2( cx, cy )
    ];

  },

  generateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {

    return this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );

  },

  generateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,
                                indexA, indexB, indexC, indexD, stepIndex, stepsLength,
                                contourIndex1, contourIndex2 ) {

    var ax = geometry.vertices[ indexA ].x,
      ay = geometry.vertices[ indexA ].y,
      az = geometry.vertices[ indexA ].z,

      bx = geometry.vertices[ indexB ].x,
      by = geometry.vertices[ indexB ].y,
      bz = geometry.vertices[ indexB ].z,

      cx = geometry.vertices[ indexC ].x,
      cy = geometry.vertices[ indexC ].y,
      cz = geometry.vertices[ indexC ].z,

      dx = geometry.vertices[ indexD ].x,
      dy = geometry.vertices[ indexD ].y,
      dz = geometry.vertices[ indexD ].z;

    if ( Math.abs( ay - by ) < 0.01 ) {
      return [
        new THREE.Vector2( ax, 1 - az ),
        new THREE.Vector2( bx, 1 - bz ),
        new THREE.Vector2( cx, 1 - cz ),
        new THREE.Vector2( dx, 1 - dz )
      ];
    } else {
      return [
        new THREE.Vector2( ay, 1 - az ),
        new THREE.Vector2( by, 1 - bz ),
        new THREE.Vector2( cy, 1 - cz ),
        new THREE.Vector2( dy, 1 - dz )
      ];
    }
  }
};

THREE.ExtrudeGeometry.__v1 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2();

/**
 * @author jonobr1 / http://jonobr1.com
 *
 * Creates a one-sided polygonal geometry from a path shape. Similar to
 * ExtrudeGeometry.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
 *
 *  material: <int> // material index for front and back faces
 *  uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ShapeGeometry = function ( shapes, options ) {

  THREE.Geometry.call( this );

  if ( shapes instanceof Array === false ) shapes = [ shapes ];

  this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

  this.addShapeList( shapes, options );

  this.computeFaceNormals();

};

THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * Add an array of shapes to THREE.ShapeGeometry.
 */
THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

  for ( var i = 0, l = shapes.length; i < l; i++ ) {

    this.addShape( shapes[ i ], options );

  }

  return this;

};

/**
 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
 */
THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

  if ( options === undefined ) options = {};
  var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

  var material = options.material;
  var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

  var shapebb = this.shapebb;

  //

  var i, l, hole, s;

  var shapesOffset = this.vertices.length;
  var shapePoints = shape.extractPoints( curveSegments );

  var vertices = shapePoints.shape;
  var holes = shapePoints.holes;

  var reverse = !THREE.Shape.Utils.isClockWise( vertices );

  if ( reverse ) {

    vertices = vertices.reverse();

    // Maybe we should also check if holes are in the opposite direction, just to be safe...

    for ( i = 0, l = holes.length; i < l; i++ ) {

      hole = holes[ i ];

      if ( THREE.Shape.Utils.isClockWise( hole ) ) {

        holes[ i ] = hole.reverse();

      }

    }

    reverse = false;

  }

  var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );

  // Vertices

  var contour = vertices;

  for ( i = 0, l = holes.length; i < l; i++ ) {

    hole = holes[ i ];
    vertices = vertices.concat( hole );

  }

  //

  var vert, vlen = vertices.length;
  var face, flen = faces.length;
  var cont, clen = contour.length;

  for ( i = 0; i < vlen; i++ ) {

    vert = vertices[ i ];

    this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

  }

  for ( i = 0; i < flen; i++ ) {

    face = faces[ i ];

    var a = face[ 0 ] + shapesOffset;
    var b = face[ 1 ] + shapesOffset;
    var c = face[ 2 ] + shapesOffset;

    this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
    this.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );

  }

};

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://exocortex.com
 */

// points - to create a closed torus, one must use a set of points 
//    like so: [ a, b, c, d, a ], see first is the same as last.
// segments - the number of circumference segments to create
// phiStart - the starting radian
// phiLength - the radian (0 to 2*PI) range of the lathed section
//    2*pi is a closed lathe, less than 2PI is a portion.
THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

  THREE.Geometry.call( this );

  segments = segments || 12;
  phiStart = phiStart || 0;
  phiLength = phiLength || 2 * Math.PI;

  var inversePointLength = 1.0 / ( points.length - 1 );
  var inverseSegments = 1.0 / segments;

  for ( var i = 0, il = segments; i <= il; i ++ ) {

    var phi = phiStart + i * inverseSegments * phiLength;

    var c = Math.cos( phi ),
      s = Math.sin( phi );

    for ( var j = 0, jl = points.length; j < jl; j ++ ) {

      var pt = points[ j ];

      var vertex = new THREE.Vector3();

      vertex.x = c * pt.x - s * pt.y;
      vertex.y = s * pt.x + c * pt.y;
      vertex.z = pt.z;

      this.vertices.push( vertex );

    }

  }

  var np = points.length;

  for ( var i = 0, il = segments; i < il; i ++ ) {

    for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {

      var base = j + np * i;
      var a = base;
      var b = base + np;
      var c = base + 1 + np;
      var d = base + 1;

      var u0 = i * inverseSegments;
      var v0 = j * inversePointLength;
      var u1 = u0 + inverseSegments;
      var v1 = v0 + inversePointLength;

      this.faces.push( new THREE.Face3( a, b, d ) );

      this.faceVertexUvs[ 0 ].push( [

        new THREE.Vector2( u0, v0 ),
        new THREE.Vector2( u1, v0 ),
        new THREE.Vector2( u0, v1 )

      ] );

      this.faces.push( new THREE.Face3( b, c, d ) );

      this.faceVertexUvs[ 0 ].push( [

        new THREE.Vector2( u1, v0 ),
        new THREE.Vector2( u1, v1 ),
        new THREE.Vector2( u0, v1 )

      ] );


    }

  }

  this.mergeVertices();
  this.computeFaceNormals();
  this.computeVertexNormals();

};

THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
 */

THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

  THREE.Geometry.call( this );

  this.parameters = {
    width: width,
    height: height,
    widthSegments: widthSegments,
    heightSegments: heightSegments
  };

  var ix, iz;
  var width_half = width / 2;
  var height_half = height / 2;

  var gridX = widthSegments || 1;
  var gridZ = heightSegments || 1;

  var gridX1 = gridX + 1;
  var gridZ1 = gridZ + 1;

  var segment_width = width / gridX;
  var segment_height = height / gridZ;

  var normal = new THREE.Vector3( 0, 0, 1 );

  for ( iz = 0; iz < gridZ1; iz ++ ) {

    var y = iz * segment_height - height_half;

    for ( ix = 0; ix < gridX1; ix ++ ) {

      var x = ix * segment_width - width_half;

      this.vertices.push( new THREE.Vector3( x, - y, 0 ) );

    }

  }

  for ( iz = 0; iz < gridZ; iz ++ ) {

    for ( ix = 0; ix < gridX; ix ++ ) {

      var a = ix + gridX1 * iz;
      var b = ix + gridX1 * ( iz + 1 );
      var c = ( ix + 1 ) + gridX1 * ( iz + 1 );
      var d = ( ix + 1 ) + gridX1 * iz;

      var uva = new THREE.Vector2( ix / gridX, 1 - iz / gridZ );
      var uvb = new THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ );
      var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ );
      var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ );

      var face = new THREE.Face3( a, b, d );
      face.normal.copy( normal );
      face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );

      this.faces.push( face );
      this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

      face = new THREE.Face3( b, c, d );
      face.normal.copy( normal );
      face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );

      this.faces.push( face );
      this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

    }

  }

};

THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author Kaleb Murphy
 */

THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

  THREE.Geometry.call( this );

  innerRadius = innerRadius || 0;
  outerRadius = outerRadius || 50;

  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

  thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
  phiSegments = phiSegments !== undefined ? Math.max( 3, phiSegments ) : 8;

  var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );

  for ( i = 0; i <= phiSegments; i ++ ) { // concentric circles inside ring

    for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle

      var vertex = new THREE.Vector3();
      var segment = thetaStart + o / thetaSegments * thetaLength;

      vertex.x = radius * Math.cos( segment );
      vertex.y = radius * Math.sin( segment );

      this.vertices.push( vertex );
      uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );
    }

    radius += radiusStep;

  }

  var n = new THREE.Vector3( 0, 0, 1 );

  for ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring

    var thetaSegment = i * thetaSegments;

    for ( o = 0; o <= thetaSegments; o ++ ) { // number of segments per circle

      var segment = o + thetaSegment;

      var v1 = segment + i;
      var v2 = segment + thetaSegments + i;
      var v3 = segment + thetaSegments + 1 + i;

      this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
      this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

      v1 = segment + i;
      v2 = segment + thetaSegments + 1 + i;
      v3 = segment + 1 + i;

      this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
      this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

    }
  }

  this.computeFaceNormals();

  this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

  THREE.Geometry.call( this );

  this.parameters = {
    radius: radius,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    phiStart: phiStart,
    phiLength: phiLength,
    thetaStart: thetaStart,
    thetaLength: thetaLength 
  };

  radius = radius || 50;

  widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
  heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

  phiStart = phiStart !== undefined ? phiStart : 0;
  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

  var x, y, vertices = [], uvs = [];

  for ( y = 0; y <= heightSegments; y ++ ) {

    var verticesRow = [];
    var uvsRow = [];

    for ( x = 0; x <= widthSegments; x ++ ) {

      var u = x / widthSegments;
      var v = y / heightSegments;

      var vertex = new THREE.Vector3();
      vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
      vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
      vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

      this.vertices.push( vertex );

      verticesRow.push( this.vertices.length - 1 );
      uvsRow.push( new THREE.Vector2( u, 1 - v ) );

    }

    vertices.push( verticesRow );
    uvs.push( uvsRow );

  }

  for ( y = 0; y < heightSegments; y ++ ) {

    for ( x = 0; x < widthSegments; x ++ ) {

      var v1 = vertices[ y ][ x + 1 ];
      var v2 = vertices[ y ][ x ];
      var v3 = vertices[ y + 1 ][ x ];
      var v4 = vertices[ y + 1 ][ x + 1 ];

      var n1 = this.vertices[ v1 ].clone().normalize();
      var n2 = this.vertices[ v2 ].clone().normalize();
      var n3 = this.vertices[ v3 ].clone().normalize();
      var n4 = this.vertices[ v4 ].clone().normalize();

      var uv1 = uvs[ y ][ x + 1 ].clone();
      var uv2 = uvs[ y ][ x ].clone();
      var uv3 = uvs[ y + 1 ][ x ].clone();
      var uv4 = uvs[ y + 1 ][ x + 1 ].clone();

      if ( Math.abs( this.vertices[ v1 ].y ) === radius ) {

        uv1.x = ( uv1.x + uv2.x ) / 2;
        this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );
        this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );

      } else if ( Math.abs( this.vertices[ v3 ].y ) === radius ) {

        uv3.x = ( uv3.x + uv4.x ) / 2;
        this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
        this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

      } else {

        this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
        this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

        this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
        this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

      }

    }

  }

  this.computeFaceNormals();

  this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For creating 3D text geometry in three.js
 *
 * Text = 3D Text
 *
 * parameters = {
 *  size:       <float>,  // size of the text
 *  height:     <float>,  // thickness to extrude text
 *  curveSegments:  <int>,    // number of points on the curves
 *
 *  font:       <string>,   // font name
 *  weight:     <string>,   // font weight (normal, bold)
 *  style:      <string>,   // font style  (normal, italics)
 *
 *  bevelEnabled: <bool>,     // turn on bevel
 *  bevelThickness: <float>,    // how deep into text bevel goes
 *  bevelSize:    <float>,    // how far from text outline is bevel
 *  }
 *
 */

/*  Usage Examples

  // TextGeometry wrapper

  var text3d = new TextGeometry( text, options );

  // Complete manner

  var textShapes = THREE.FontUtils.generateShapes( text, options );
  var text3d = new ExtrudeGeometry( textShapes, options );

*/


THREE.TextGeometry = function ( text, parameters ) {

  parameters = parameters || {};

  var textShapes = THREE.FontUtils.generateShapes( text, parameters );

  // translate parameters to ExtrudeGeometry API

  parameters.amount = parameters.height !== undefined ? parameters.height : 50;

  // defaults

  if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
  if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
  if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

  THREE.ExtrudeGeometry.call( this, textShapes, parameters );

};

THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
 */

THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

  THREE.Geometry.call( this );

  this.parameters = {
    radius: radius,
    tube: tube,
    radialSegments: radialSegments,
    tubularSegments: tubularSegments,
    arc: arc
  };

  radius = radius || 100;
  tube = tube || 40;
  radialSegments = radialSegments || 8;
  tubularSegments = tubularSegments || 6;
  arc = arc || Math.PI * 2;

  var center = new THREE.Vector3(), uvs = [], normals = [];

  for ( var j = 0; j <= radialSegments; j ++ ) {

    for ( var i = 0; i <= tubularSegments; i ++ ) {

      var u = i / tubularSegments * arc;
      var v = j / radialSegments * Math.PI * 2;

      center.x = radius * Math.cos( u );
      center.y = radius * Math.sin( u );

      var vertex = new THREE.Vector3();
      vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
      vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
      vertex.z = tube * Math.sin( v );

      this.vertices.push( vertex );

      uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
      normals.push( vertex.clone().sub( center ).normalize() );

    }

  }

  for ( var j = 1; j <= radialSegments; j ++ ) {

    for ( var i = 1; i <= tubularSegments; i ++ ) {

      var a = ( tubularSegments + 1 ) * j + i - 1;
      var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
      var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
      var d = ( tubularSegments + 1 ) * j + i;

      var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
      this.faces.push( face );
      this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );

      face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
      this.faces.push( face );
      this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );

    }

  }

  this.computeFaceNormals();

};

THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author oosmoxiecode
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
 */

THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

  THREE.Geometry.call( this );

  this.parameters = {
    radius: radius,
    tube: tube,
    radialSegments: radialSegments,
    tubularSegments: tubularSegments,
    p: p,
    q: q,
    heightScale: heightScale
  };

  radius = radius || 100;
  tube = tube || 40;
  radialSegments = radialSegments || 64;
  tubularSegments = tubularSegments || 8;
  p = p || 2;
  q = q || 3;
  heightScale = heightScale || 1;
  
  var grid = new Array( radialSegments );
  var tang = new THREE.Vector3();
  var n = new THREE.Vector3();
  var bitan = new THREE.Vector3();

  for ( var i = 0; i < radialSegments; ++ i ) {

    grid[ i ] = new Array( tubularSegments );
    var u = i / radialSegments * 2 * p * Math.PI;
    var p1 = getPos( u, q, p, radius, heightScale );
    var p2 = getPos( u + 0.01, q, p, radius, heightScale );
    tang.subVectors( p2, p1 );
    n.addVectors( p2, p1 );

    bitan.crossVectors( tang, n );
    n.crossVectors( bitan, tang );
    bitan.normalize();
    n.normalize();

    for ( var j = 0; j < tubularSegments; ++ j ) {

      var v = j / tubularSegments * 2 * Math.PI;
      var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
      var cy = tube * Math.sin( v );

      var pos = new THREE.Vector3();
      pos.x = p1.x + cx * n.x + cy * bitan.x;
      pos.y = p1.y + cx * n.y + cy * bitan.y;
      pos.z = p1.z + cx * n.z + cy * bitan.z;

      grid[ i ][ j ] = this.vertices.push( pos ) - 1;

    }

  }

  for ( var i = 0; i < radialSegments; ++ i ) {

    for ( var j = 0; j < tubularSegments; ++ j ) {

      var ip = ( i + 1 ) % radialSegments;
      var jp = ( j + 1 ) % tubularSegments;

      var a = grid[ i ][ j ];
      var b = grid[ ip ][ j ];
      var c = grid[ ip ][ jp ];
      var d = grid[ i ][ jp ];

      var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
      var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
      var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
      var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );

      this.faces.push( new THREE.Face3( a, b, d ) );
      this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

      this.faces.push( new THREE.Face3( b, c, d ) );
      this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

    }
  }

  this.computeFaceNormals();
  this.computeVertexNormals();

  function getPos( u, in_q, in_p, radius, heightScale ) {

    var cu = Math.cos( u );
    var su = Math.sin( u );
    var quOverP = in_q / in_p * u;
    var cs = Math.cos( quOverP );

    var tx = radius * ( 2 + cs ) * 0.5 * cu;
    var ty = radius * ( 2 + cs ) * su * 0.5;
    var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

    return new THREE.Vector3( tx, ty, tz );

  }

};

THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 *
 * Modified from the TorusKnotGeometry by @oosmoxiecode
 *
 * Creates a tube which extrudes along a 3d spline
 *
 * Uses parallel transport frames as described in
 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
 */

THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed ) {

  THREE.Geometry.call( this );

  this.parameters = {
    path: path,
    segments: segments,
    radius: radius,
    radialSegments: radialSegments,
    closed: closed
  };

  segments = segments || 64;
  radius = radius || 1;
  radialSegments = radialSegments || 8;
  closed = closed || false;

  var grid = [];

  var scope = this,

    tangent,
    normal,
    binormal,

    numpoints = segments + 1,

    x, y, z,
    tx, ty, tz,
    u, v,

    cx, cy,
    pos, pos2 = new THREE.Vector3(),
    i, j,
    ip, jp,
    a, b, c, d,
    uva, uvb, uvc, uvd;

  var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
    tangents = frames.tangents,
    normals = frames.normals,
    binormals = frames.binormals;

  // proxy internals
  this.tangents = tangents;
  this.normals = normals;
  this.binormals = binormals;

  function vert( x, y, z ) {

    return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

  }

  // consruct the grid

  for ( i = 0; i < numpoints; i++ ) {

    grid[ i ] = [];

    u = i / ( numpoints - 1 );

    pos = path.getPointAt( u );

    tangent = tangents[ i ];
    normal = normals[ i ];
    binormal = binormals[ i ];

    for ( j = 0; j < radialSegments; j++ ) {

      v = j / radialSegments * 2 * Math.PI;

      cx = -radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
      cy = radius * Math.sin( v );

      pos2.copy( pos );
      pos2.x += cx * normal.x + cy * binormal.x;
      pos2.y += cx * normal.y + cy * binormal.y;
      pos2.z += cx * normal.z + cy * binormal.z;

      grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

    }
  }


  // construct the mesh

  for ( i = 0; i < segments; i++ ) {

    for ( j = 0; j < radialSegments; j++ ) {

      ip = ( closed ) ? (i + 1) % segments : i + 1;
      jp = (j + 1) % radialSegments;

      a = grid[ i ][ j ];   // *** NOT NECESSARILY PLANAR ! ***
      b = grid[ ip ][ j ];
      c = grid[ ip ][ jp ];
      d = grid[ i ][ jp ];

      uva = new THREE.Vector2( i / segments, j / radialSegments );
      uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
      uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
      uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

      this.faces.push( new THREE.Face3( a, b, d ) );
      this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

      this.faces.push( new THREE.Face3( b, c, d ) );
      this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

    }
  }

  this.computeFaceNormals();
  this.computeVertexNormals();

};

THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );


// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

  var tangent = new THREE.Vector3(),
    normal = new THREE.Vector3(),
    binormal = new THREE.Vector3(),

    tangents = [],
    normals = [],
    binormals = [],

    vec = new THREE.Vector3(),
    mat = new THREE.Matrix4(),

    numpoints = segments + 1,
    theta,
    epsilon = 0.0001,
    smallest,

    tx, ty, tz,
    i, u, v;


  // expose internals
  this.tangents = tangents;
  this.normals = normals;
  this.binormals = binormals;

  // compute the tangent vectors for each segment on the path

  for ( i = 0; i < numpoints; i++ ) {

    u = i / ( numpoints - 1 );

    tangents[ i ] = path.getTangentAt( u );
    tangents[ i ].normalize();

  }

  initialNormal3();

  function initialNormal1(lastBinormal) {
    // fixed start binormal. Has dangers of 0 vectors
    normals[ 0 ] = new THREE.Vector3();
    binormals[ 0 ] = new THREE.Vector3();
    if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
    normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
    binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
  }

  function initialNormal2() {

    // This uses the Frenet-Serret formula for deriving binormal
    var t2 = path.getTangentAt( epsilon );

    normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
    binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

    normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
    binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

  }

  function initialNormal3() {
    // select an initial normal vector perpenicular to the first tangent vector,
    // and in the direction of the smallest tangent xyz component

    normals[ 0 ] = new THREE.Vector3();
    binormals[ 0 ] = new THREE.Vector3();
    smallest = Number.MAX_VALUE;
    tx = Math.abs( tangents[ 0 ].x );
    ty = Math.abs( tangents[ 0 ].y );
    tz = Math.abs( tangents[ 0 ].z );

    if ( tx <= smallest ) {
      smallest = tx;
      normal.set( 1, 0, 0 );
    }

    if ( ty <= smallest ) {
      smallest = ty;
      normal.set( 0, 1, 0 );
    }

    if ( tz <= smallest ) {
      normal.set( 0, 0, 1 );
    }

    vec.crossVectors( tangents[ 0 ], normal ).normalize();

    normals[ 0 ].crossVectors( tangents[ 0 ], vec );
    binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
  }


  // compute the slowly-varying normal and binormal vectors for each segment on the path

  for ( i = 1; i < numpoints; i++ ) {

    normals[ i ] = normals[ i-1 ].clone();

    binormals[ i ] = binormals[ i-1 ].clone();

    vec.crossVectors( tangents[ i-1 ], tangents[ i ] );

    if ( vec.length() > epsilon ) {

      vec.normalize();

      theta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), -1, 1 ) ); // clamp for floating pt errors

      normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

    }

    binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

  }


  // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

  if ( closed ) {

    theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), -1, 1 ) );
    theta /= ( numpoints - 1 );

    if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {

      theta = -theta;

    }

    for ( i = 1; i < numpoints; i++ ) {

      // twist a little...
      normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
      binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

    }

  }
};

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

  THREE.Geometry.call( this );

  radius = radius || 1;
  detail = detail || 0;

  var that = this;

  for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

    prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

  }

  var midpoints = [], p = this.vertices;

  var faces = [];

  for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

    var v1 = p[ indices[ i     ] ];
    var v2 = p[ indices[ i + 1 ] ];
    var v3 = p[ indices[ i + 2 ] ];

    faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

  }

  var centroid = new THREE.Vector3();

  for ( var i = 0, l = faces.length; i < l; i ++ ) {

    subdivide( faces[ i ], detail );

  }


  // Handle case when face straddles the seam

  for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

    var uvs = this.faceVertexUvs[ 0 ][ i ];

    var x0 = uvs[ 0 ].x;
    var x1 = uvs[ 1 ].x;
    var x2 = uvs[ 2 ].x;

    var max = Math.max( x0, Math.max( x1, x2 ) );
    var min = Math.min( x0, Math.min( x1, x2 ) );

    if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary

      if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
      if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
      if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

    }

  }


  // Apply radius

  for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

    this.vertices[ i ].multiplyScalar( radius );

  }


  // Merge vertices

  this.mergeVertices();

  this.computeFaceNormals();

  this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


  // Project vector onto sphere's surface

  function prepare( vector ) {

    var vertex = vector.normalize().clone();
    vertex.index = that.vertices.push( vertex ) - 1;

    // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

    var u = azimuth( vector ) / 2 / Math.PI + 0.5;
    var v = inclination( vector ) / Math.PI + 0.5;
    vertex.uv = new THREE.Vector2( u, 1 - v );

    return vertex;

  }


  // Approximate a curved face with recursively sub-divided triangles.

  function make( v1, v2, v3 ) {

    var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
    that.faces.push( face );

    centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

    var azi = azimuth( centroid );

    that.faceVertexUvs[ 0 ].push( [
      correctUV( v1.uv, v1, azi ),
      correctUV( v2.uv, v2, azi ),
      correctUV( v3.uv, v3, azi )
    ] );

  }


  // Analytically subdivide a face to the required detail level.

  function subdivide( face, detail ) {

    var cols = Math.pow(2, detail);
    var cells = Math.pow(4, detail);
    var a = prepare( that.vertices[ face.a ] );
    var b = prepare( that.vertices[ face.b ] );
    var c = prepare( that.vertices[ face.c ] );
    var v = [];

    // Construct all of the vertices for this subdivision.

    for ( var i = 0 ; i <= cols; i ++ ) {

      v[ i ] = [];

      var aj = prepare( a.clone().lerp( c, i / cols ) );
      var bj = prepare( b.clone().lerp( c, i / cols ) );
      var rows = cols - i;

      for ( var j = 0; j <= rows; j ++) {

        if ( j == 0 && i == cols ) {

          v[ i ][ j ] = aj;

        } else {

          v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

        }

      }

    }

    // Construct all of the faces.

    for ( var i = 0; i < cols ; i ++ ) {

      for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {

        var k = Math.floor( j / 2 );

        if ( j % 2 == 0 ) {

          make(
            v[ i ][ k + 1],
            v[ i + 1 ][ k ],
            v[ i ][ k ]
          );

        } else {

          make(
            v[ i ][ k + 1 ],
            v[ i + 1][ k + 1],
            v[ i + 1 ][ k ]
          );

        }

      }

    }

  }


  // Angle around the Y axis, counter-clockwise when looking from above.

  function azimuth( vector ) {

    return Math.atan2( vector.z, -vector.x );

  }


  // Angle above the XZ plane.

  function inclination( vector ) {

    return Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

  }


  // Texture fixing helper. Spheres have some odd behaviours.

  function correctUV( uv, vector, azimuth ) {

    if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
    if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
    return uv.clone();

  }


};

THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.IcosahedronGeometry = function ( radius, detail ) {

  this.parameters = {
    radius: radius,
    detail: detail
  };

  var t = ( 1 + Math.sqrt( 5 ) ) / 2;

  var vertices = [
    -1,  t,  0,    1,  t,  0,   -1, -t,  0,    1, -t,  0,
     0, -1,  t,    0,  1,  t,    0, -1, -t,    0,  1, -t,
     t,  0, -1,    t,  0,  1,   -t,  0, -1,   -t,  0,  1
  ];

  var indices = [
     0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
     1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
     3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
     4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
  ];

  THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

};

THREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.OctahedronGeometry = function ( radius, detail ) {

  this.parameters = {
    radius: radius,
    detail: detail
  };

  var vertices = [
    1, 0, 0,   -1, 0, 0,    0, 1, 0,    0,-1, 0,    0, 0, 1,    0, 0,-1
  ];

  var indices = [
    0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
  ];

  THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
};

THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.TetrahedronGeometry = function ( radius, detail ) {

  var vertices = [
     1,  1,  1,   -1, -1,  1,   -1,  1, -1,    1, -1, -1
  ];

  var indices = [
     2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
  ];

  THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

};

THREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author zz85 / https://github.com/zz85
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 *
 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
 *
 */

THREE.ParametricGeometry = function ( func, slices, stacks ) {

  THREE.Geometry.call( this );

  var verts = this.vertices;
  var faces = this.faces;
  var uvs = this.faceVertexUvs[ 0 ];

  var i, il, j, p;
  var u, v;

  var stackCount = stacks + 1;
  var sliceCount = slices + 1;

  for ( i = 0; i <= stacks; i ++ ) {

    v = i / stacks;

    for ( j = 0; j <= slices; j ++ ) {

      u = j / slices;

      p = func( u, v );
      verts.push( p );

    }
  }

  var a, b, c, d;
  var uva, uvb, uvc, uvd;

  for ( i = 0; i < stacks; i ++ ) {

    for ( j = 0; j < slices; j ++ ) {

      a = i * sliceCount + j;
      b = i * sliceCount + j + 1;
      c = (i + 1) * sliceCount + j + 1;
      d = (i + 1) * sliceCount + j;

      uva = new THREE.Vector2( j / slices, i / stacks );
      uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
      uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
      uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

      faces.push( new THREE.Face3( a, b, d ) );
      uvs.push( [ uva, uvb, uvd ] );

      faces.push( new THREE.Face3( b, c, d ) );
      uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

    }

  }

  // console.log(this);

  // magic bullet
  // var diff = this.mergeVertices();
  // console.log('removed ', diff, ' vertices by merging');

  this.computeFaceNormals();
  this.computeVertexNormals();

};

THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AxisHelper = function ( size ) {

  size = size || 1;

  var geometry = new THREE.Geometry();

  geometry.vertices.push(
    new THREE.Vector3(), new THREE.Vector3( size, 0, 0 ),
    new THREE.Vector3(), new THREE.Vector3( 0, size, 0 ),
    new THREE.Vector3(), new THREE.Vector3( 0, 0, size )
  );

  geometry.colors.push(
    new THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),
    new THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),
    new THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )
  );

  var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

  THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://exocortex.com
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */

THREE.ArrowHelper = function ( dir, origin, length, color, headLength, headWidth ) {

  // dir is assumed to be normalized

  THREE.Object3D.call( this );

  if ( color === undefined ) color = 0xffff00;
  if ( length === undefined ) length = 1;
  if ( headLength === undefined ) headLength = 0.2 * length;
  if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  this.position = origin;

  var lineGeometry = new THREE.Geometry();
  lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
  lineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );

  this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
  this.line.matrixAutoUpdate = false;
  this.add( this.line );

  var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
  coneGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );

  this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
  this.cone.matrixAutoUpdate = false;
  this.add( this.cone );

  this.setDirection( dir );
  this.setLength( length, headLength, headWidth );

};

THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.ArrowHelper.prototype.setDirection = function () {

  var axis = new THREE.Vector3();
  var radians;

  return function ( dir ) {

    // dir is assumed to be normalized

    if ( dir.y > 0.99999 ) {

      this.quaternion.set( 0, 0, 0, 1 );

    } else if ( dir.y < - 0.99999 ) {

      this.quaternion.set( 1, 0, 0, 0 );

    } else {

      axis.set( dir.z, 0, - dir.x ).normalize();

      radians = Math.acos( dir.y );

      this.quaternion.setFromAxisAngle( axis, radians );

    }

  };

}();

THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

  if ( headLength === undefined ) headLength = 0.2 * length;
  if ( headWidth === undefined ) headWidth = 0.2 * headLength;

  this.line.scale.set( 1, length, 1 );
  this.line.updateMatrix();

  this.cone.scale.set( headWidth, headLength, headWidth );
  this.cone.position.y = length;
  this.cone.updateMatrix();

};

THREE.ArrowHelper.prototype.setColor = function ( color ) {

  this.line.material.color.set( color );
  this.cone.material.color.set( color );

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BoxHelper = function ( object ) {

  //   5____4
  // 1/___0/|
  // | 6__|_7
  // 2/___3/

  var vertices = [
    new THREE.Vector3(   1,   1,   1 ),
    new THREE.Vector3( - 1,   1,   1 ),
    new THREE.Vector3( - 1, - 1,   1 ),
    new THREE.Vector3(   1, - 1,   1 ),

    new THREE.Vector3(   1,   1, - 1 ),
    new THREE.Vector3( - 1,   1, - 1 ),
    new THREE.Vector3( - 1, - 1, - 1 ),
    new THREE.Vector3(   1, - 1, - 1 )
  ];

  this.vertices = vertices;

  // TODO: Wouldn't be nice if Line had .segments?

  var geometry = new THREE.Geometry();
  geometry.vertices.push(
    vertices[ 0 ], vertices[ 1 ],
    vertices[ 1 ], vertices[ 2 ],
    vertices[ 2 ], vertices[ 3 ],
    vertices[ 3 ], vertices[ 0 ],

    vertices[ 4 ], vertices[ 5 ],
    vertices[ 5 ], vertices[ 6 ],
    vertices[ 6 ], vertices[ 7 ],
    vertices[ 7 ], vertices[ 4 ],

    vertices[ 0 ], vertices[ 4 ],
    vertices[ 1 ], vertices[ 5 ],
    vertices[ 2 ], vertices[ 6 ],
    vertices[ 3 ], vertices[ 7 ]
  );

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );

  if ( object !== undefined ) {

    this.update( object );

  }

};

THREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );

THREE.BoxHelper.prototype.update = function ( object ) {

  var geometry = object.geometry;

  if ( geometry.boundingBox === null ) {

    geometry.computeBoundingBox();

  }

  var min = geometry.boundingBox.min;
  var max = geometry.boundingBox.max;
  var vertices = this.vertices;

  vertices[ 0 ].set( max.x, max.y, max.z );
  vertices[ 1 ].set( min.x, max.y, max.z );
  vertices[ 2 ].set( min.x, min.y, max.z );
  vertices[ 3 ].set( max.x, min.y, max.z );
  vertices[ 4 ].set( max.x, max.y, min.z );
  vertices[ 5 ].set( min.x, max.y, min.z );
  vertices[ 6 ].set( min.x, min.y, min.z );
  vertices[ 7 ].set( max.x, min.y, min.z );

  this.geometry.computeBoundingSphere();
  this.geometry.verticesNeedUpdate = true;

  this.matrixAutoUpdate = false;
  this.matrixWorld = object.matrixWorld;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 */

// a helper to show the world-axis-aligned bounding box for an object

THREE.BoundingBoxHelper = function ( object, hex ) {

  var color = ( hex !== undefined ) ? hex : 0x888888;

  this.object = object;

  this.box = new THREE.Box3();

  THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

};

THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.BoundingBoxHelper.prototype.update = function () {

  this.box.setFromObject( this.object );

  this.box.size( this.scale );

  this.box.center( this.position );

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *  - shows frustum, line of sight and up of the camera
 *  - suitable for fast updates
 *  - based on frustum visualization in lightgl.js shadowmap example
 *    http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

THREE.CameraHelper = function ( camera ) {

  var geometry = new THREE.Geometry();
  var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

  var pointMap = {};

  // colors

  var hexFrustum = 0xffaa00;
  var hexCone = 0xff0000;
  var hexUp = 0x00aaff;
  var hexTarget = 0xffffff;
  var hexCross = 0x333333;

  // near

  addLine( "n1", "n2", hexFrustum );
  addLine( "n2", "n4", hexFrustum );
  addLine( "n4", "n3", hexFrustum );
  addLine( "n3", "n1", hexFrustum );

  // far

  addLine( "f1", "f2", hexFrustum );
  addLine( "f2", "f4", hexFrustum );
  addLine( "f4", "f3", hexFrustum );
  addLine( "f3", "f1", hexFrustum );

  // sides

  addLine( "n1", "f1", hexFrustum );
  addLine( "n2", "f2", hexFrustum );
  addLine( "n3", "f3", hexFrustum );
  addLine( "n4", "f4", hexFrustum );

  // cone

  addLine( "p", "n1", hexCone );
  addLine( "p", "n2", hexCone );
  addLine( "p", "n3", hexCone );
  addLine( "p", "n4", hexCone );

  // up

  addLine( "u1", "u2", hexUp );
  addLine( "u2", "u3", hexUp );
  addLine( "u3", "u1", hexUp );

  // target

  addLine( "c", "t", hexTarget );
  addLine( "p", "c", hexCross );

  // cross

  addLine( "cn1", "cn2", hexCross );
  addLine( "cn3", "cn4", hexCross );

  addLine( "cf1", "cf2", hexCross );
  addLine( "cf3", "cf4", hexCross );

  function addLine( a, b, hex ) {

    addPoint( a, hex );
    addPoint( b, hex );

  }

  function addPoint( id, hex ) {

    geometry.vertices.push( new THREE.Vector3() );
    geometry.colors.push( new THREE.Color( hex ) );

    if ( pointMap[ id ] === undefined ) {

      pointMap[ id ] = [];

    }

    pointMap[ id ].push( geometry.vertices.length - 1 );

  }

  THREE.Line.call( this, geometry, material, THREE.LinePieces );

  this.camera = camera;
  this.matrixWorld = camera.matrixWorld;
  this.matrixAutoUpdate = false;

  this.pointMap = pointMap;

  this.update();

};

THREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );

THREE.CameraHelper.prototype.update = function () {

  var vector = new THREE.Vector3();
  var camera = new THREE.Camera();
  var projector = new THREE.Projector();

  return function () {

    var scope = this;

    var w = 1, h = 1;

    // we need just camera projection matrix
    // world matrix must be identity

    camera.projectionMatrix.copy( this.camera.projectionMatrix );

    // center / target

    setPoint( "c", 0, 0, -1 );
    setPoint( "t", 0, 0,  1 );

    // near

    setPoint( "n1", -w, -h, -1 );
    setPoint( "n2",  w, -h, -1 );
    setPoint( "n3", -w,  h, -1 );
    setPoint( "n4",  w,  h, -1 );

    // far

    setPoint( "f1", -w, -h, 1 );
    setPoint( "f2",  w, -h, 1 );
    setPoint( "f3", -w,  h, 1 );
    setPoint( "f4",  w,  h, 1 );

    // up

    setPoint( "u1",  w * 0.7, h * 1.1, -1 );
    setPoint( "u2", -w * 0.7, h * 1.1, -1 );
    setPoint( "u3",        0, h * 2,   -1 );

    // cross

    setPoint( "cf1", -w,  0, 1 );
    setPoint( "cf2",  w,  0, 1 );
    setPoint( "cf3",  0, -h, 1 );
    setPoint( "cf4",  0,  h, 1 );

    setPoint( "cn1", -w,  0, -1 );
    setPoint( "cn2",  w,  0, -1 );
    setPoint( "cn3",  0, -h, -1 );
    setPoint( "cn4",  0,  h, -1 );

    function setPoint( point, x, y, z ) {

      vector.set( x, y, z );
      projector.unprojectVector( vector, camera );

      var points = scope.pointMap[ point ];

      if ( points !== undefined ) {

        for ( var i = 0, il = points.length; i < il; i ++ ) {

          scope.geometry.vertices[ points[ i ] ].copy( vector );

        }

      }

    }

    this.geometry.verticesNeedUpdate = true;

  };

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.DirectionalLightHelper = function ( light, size ) {

  THREE.Object3D.call( this );

  this.light = light;
  this.light.updateMatrixWorld();

  this.matrixWorld = light.matrixWorld;
  this.matrixAutoUpdate = false;

  size = size || 1;

  var geometry = new THREE.Geometry();
  geometry.vertices.push(
    new THREE.Vector3( - size,   size, 0 ),
    new THREE.Vector3(   size,   size, 0 ),
    new THREE.Vector3(   size, - size, 0 ),
    new THREE.Vector3( - size, - size, 0 ),
    new THREE.Vector3( - size,   size, 0 )
  );

  var material = new THREE.LineBasicMaterial( { fog: false } );
  material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  this.lightPlane = new THREE.Line( geometry, material );
  this.add( this.lightPlane );

  geometry = new THREE.Geometry();
  geometry.vertices.push(
    new THREE.Vector3(),
    new THREE.Vector3()
  );

  material = new THREE.LineBasicMaterial( { fog: false } );
  material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  this.targetLine = new THREE.Line( geometry, material );
  this.add( this.targetLine );

  this.update();

};

THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.DirectionalLightHelper.prototype.dispose = function () {
  
  this.lightPlane.geometry.dispose();
  this.lightPlane.material.dispose();
  this.targetLine.geometry.dispose();
  this.targetLine.material.dispose();
};

THREE.DirectionalLightHelper.prototype.update = function () {

  var v1 = new THREE.Vector3();
  var v2 = new THREE.Vector3();
  var v3 = new THREE.Vector3();

  return function () {

    v1.setFromMatrixPosition( this.light.matrixWorld );
    v2.setFromMatrixPosition( this.light.target.matrixWorld );
    v3.subVectors( v2, v1 );

    this.lightPlane.lookAt( v3 );
    this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

    this.targetLine.geometry.vertices[ 1 ].copy( v3 );
    this.targetLine.geometry.verticesNeedUpdate = true;
    this.targetLine.material.color.copy( this.lightPlane.material.color );

  }

}();


/**
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.EdgesHelper = function ( object, hex ) {

  var color = ( hex !== undefined ) ? hex : 0xffffff;

  var edge = [ 0, 0 ], hash = {};
  var sortFunction = function ( a, b ) { return a - b };

  var keys = [ 'a', 'b', 'c' ];
  var geometry = new THREE.BufferGeometry();

  var geometry2 = object.geometry.clone();

  geometry2.mergeVertices();
  geometry2.computeFaceNormals();

  var vertices = geometry2.vertices;
  var faces = geometry2.faces;
  var numEdges = 0;

  for ( var i = 0, l = faces.length; i < l; i ++ ) {

    var face = faces[ i ];

    for ( var j = 0; j < 3; j ++ ) {

      edge[ 0 ] = face[ keys[ j ] ];
      edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
      edge.sort( sortFunction );

      var key = edge.toString();

      if ( hash[ key ] === undefined ) {

        hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
        numEdges ++;

      } else {

        hash[ key ].face2 = i;

      }

    }

  }

  geometry.addAttribute( 'position', new THREE.Float32Attribute( numEdges * 2, 3 ) );

  var coords = geometry.attributes.position.array;

  var index = 0;

  for ( var key in hash ) {

    var h = hash[ key ];

    if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) < 0.9999 ) { // hardwired const OK

      var vertex = vertices[ h.vert1 ];
      coords[ index ++ ] = vertex.x;
      coords[ index ++ ] = vertex.y;
      coords[ index ++ ] = vertex.z;

      vertex = vertices[ h.vert2 ];
      coords[ index ++ ] = vertex.x;
      coords[ index ++ ] = vertex.y;
      coords[ index ++ ] = vertex.z;

    }

  }

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

  this.matrixAutoUpdate = false;
  this.matrixWorld = object.matrixWorld;

};

THREE.EdgesHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

  this.object = object;

  this.size = ( size !== undefined ) ? size : 1;

  var color = ( hex !== undefined ) ? hex : 0xffff00;

  var width = ( linewidth !== undefined ) ? linewidth : 1;

  var geometry = new THREE.Geometry();

  var faces = this.object.geometry.faces;

  for ( var i = 0, l = faces.length; i < l; i ++ ) {

    geometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );

  }

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

  this.matrixAutoUpdate = false;

  this.normalMatrix = new THREE.Matrix3();

  this.update();

};

THREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.FaceNormalsHelper.prototype.update = function () {

  var vertices = this.geometry.vertices;

  var object = this.object;
  var objectVertices = object.geometry.vertices;
  var objectFaces = object.geometry.faces;
  var objectWorldMatrix = object.matrixWorld;

  object.updateMatrixWorld( true );

  this.normalMatrix.getNormalMatrix( objectWorldMatrix );

  for ( var i = 0, i2 = 0, l = objectFaces.length; i < l; i ++, i2 += 2 ) {

    var face = objectFaces[ i ];

    vertices[ i2 ].copy( objectVertices[ face.a ] )
      .add( objectVertices[ face.b ] )
      .add( objectVertices[ face.c ] )
      .divideScalar( 3 )
      .applyMatrix4( objectWorldMatrix );

    vertices[ i2 + 1 ].copy( face.normal )
      .applyMatrix3( this.normalMatrix )
      .normalize()
      .multiplyScalar( this.size )
      .add( vertices[ i2 ] );

  }

  this.geometry.verticesNeedUpdate = true;

  return this;

};


/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GridHelper = function ( size, step ) {

  var geometry = new THREE.Geometry();
  var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

  this.color1 = new THREE.Color( 0x444444 );
  this.color2 = new THREE.Color( 0x888888 );

  for ( var i = - size; i <= size; i += step ) {

    geometry.vertices.push(
      new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
      new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
    );

    var color = i === 0 ? this.color1 : this.color2;

    geometry.colors.push( color, color, color, color );

  }

  THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.GridHelper.prototype = Object.create( THREE.Line.prototype );

THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {

  this.color1.set( colorCenterLine );
  this.color2.set( colorGrid );

  this.geometry.colorsNeedUpdate = true;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {

  THREE.Object3D.call( this );

  this.light = light;
  this.light.updateMatrixWorld();

  this.matrixWorld = light.matrixWorld;
  this.matrixAutoUpdate = false;

  this.colors = [ new THREE.Color(), new THREE.Color() ];

  var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
  geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

  for ( var i = 0, il = 8; i < il; i ++ ) {

    geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

  }

  var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

  this.lightSphere = new THREE.Mesh( geometry, material );
  this.add( this.lightSphere );

  this.update();

};

THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.HemisphereLightHelper.prototype.dispose = function () {
  this.lightSphere.geometry.dispose();
  this.lightSphere.material.dispose();
};

THREE.HemisphereLightHelper.prototype.update = function () {

  var vector = new THREE.Vector3();

  return function () {

    this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
    this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

    this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
    this.lightSphere.geometry.colorsNeedUpdate = true;

  }

}();


/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLightHelper = function ( light, sphereSize ) {

  this.light = light;
  this.light.updateMatrixWorld();

  var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
  var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
  material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  THREE.Mesh.call( this, geometry, material );

  this.matrixWorld = this.light.matrixWorld;
  this.matrixAutoUpdate = false;

  /*
  var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
  var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

  this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
  this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

  var d = light.distance;

  if ( d === 0.0 ) {

    this.lightDistance.visible = false;

  } else {

    this.lightDistance.scale.set( d, d, d );

  }

  this.add( this.lightDistance );
  */

};

THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.PointLightHelper.prototype.dispose = function () {
  
  this.geometry.dispose();
  this.material.dispose();
};

THREE.PointLightHelper.prototype.update = function () {

  this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  /*
  var d = this.light.distance;

  if ( d === 0.0 ) {

    this.lightDistance.visible = false;

  } else {

    this.lightDistance.visible = true;
    this.lightDistance.scale.set( d, d, d );

  }
  */

};


/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.SkeletonHelper = function ( object ) {

  var skeleton = object.skeleton;

  var geometry = new THREE.Geometry();

  for ( var i = 0; i < skeleton.bones.length; i ++ ) {

    var bone = skeleton.bones[ i ];

    if ( bone.parent instanceof THREE.Bone ) {

      geometry.vertices.push( new THREE.Vector3() );
      geometry.vertices.push( new THREE.Vector3() );
      geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
      geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

    }

  }

  var material = new THREE.LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, transparent: true } );

  THREE.Line.call( this, geometry, material, THREE.LinePieces );

  this.skeleton = skeleton;

  this.matrixWorld = object.matrixWorld;
  this.matrixAutoUpdate = false;

  this.update();

};


THREE.SkeletonHelper.prototype = Object.create( THREE.Line.prototype );

THREE.SkeletonHelper.prototype.update = function () {

  var geometry = this.geometry;

  var j = 0;

  for ( var i = 0; i < this.skeleton.bones.length; i ++ ) {

    var bone = this.skeleton.bones[ i ];

    if ( bone.parent instanceof THREE.Bone ) {

      geometry.vertices[ j ].setFromMatrixPosition( bone.skinMatrix );
      geometry.vertices[ j + 1 ].setFromMatrixPosition( bone.parent.skinMatrix );

      j += 2;

    }

  }

  geometry.verticesNeedUpdate = true;

  geometry.computeBoundingSphere();

};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.SpotLightHelper = function ( light ) {

  THREE.Object3D.call( this );

  this.light = light;
  this.light.updateMatrixWorld();

  this.matrixWorld = light.matrixWorld;
  this.matrixAutoUpdate = false;

  var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );

  geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, -0.5, 0 ) );
  geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

  var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
  
  this.cone = new THREE.Mesh( geometry, material );
  this.add( this.cone );

  this.update();

};

THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.SpotLightHelper.prototype.dispose = function () {
  this.cone.geometry.dispose();
  this.cone.material.dispose();
};

THREE.SpotLightHelper.prototype.update = function () {

  var vector = new THREE.Vector3();
  var vector2 = new THREE.Vector3();

  return function () {

    var coneLength = this.light.distance ? this.light.distance : 10000;
    var coneWidth = coneLength * Math.tan( this.light.angle );

    this.cone.scale.set( coneWidth, coneWidth, coneLength );

    vector.setFromMatrixPosition( this.light.matrixWorld );
    vector2.setFromMatrixPosition( this.light.target.matrixWorld );

    this.cone.lookAt( vector2.sub( vector ) );

    this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

  };

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

  this.object = object;

  this.size = ( size !== undefined ) ? size : 1;

  var color = ( hex !== undefined ) ? hex : 0xff0000;

  var width = ( linewidth !== undefined ) ? linewidth : 1;

  var geometry = new THREE.Geometry();

  var vertices = object.geometry.vertices;

  var faces = object.geometry.faces;

  for ( var i = 0, l = faces.length; i < l; i ++ ) {

    var face = faces[ i ];

    for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

      geometry.vertices.push( new THREE.Vector3() );
      geometry.vertices.push( new THREE.Vector3() );

    }

  }

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

  this.matrixAutoUpdate = false;

  this.normalMatrix = new THREE.Matrix3();

  this.update();

};

THREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexNormalsHelper.prototype.update = ( function ( object ) {

  var v1 = new THREE.Vector3();

  return function( object ) {

    var keys = [ 'a', 'b', 'c', 'd' ];

    this.object.updateMatrixWorld( true );

    this.normalMatrix.getNormalMatrix( this.object.matrixWorld );

    var vertices = this.geometry.vertices;

    var verts = this.object.geometry.vertices;

    var faces = this.object.geometry.faces;

    var worldMatrix = this.object.matrixWorld;

    var idx = 0;

    for ( var i = 0, l = faces.length; i < l; i ++ ) {

      var face = faces[ i ];

      for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

        var vertexId = face[ keys[ j ] ];
        var vertex = verts[ vertexId ];

        var normal = face.vertexNormals[ j ];

        vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

        v1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );

        v1.add( vertices[ idx ] );
        idx = idx + 1;

        vertices[ idx ].copy( v1 );
        idx = idx + 1;

      }

    }

    this.geometry.verticesNeedUpdate = true;

    return this;

  }

}());

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {

  this.object = object;

  this.size = ( size !== undefined ) ? size : 1;

  var color = ( hex !== undefined ) ? hex : 0x0000ff;

  var width = ( linewidth !== undefined ) ? linewidth : 1;

  var geometry = new THREE.Geometry();

  var vertices = object.geometry.vertices;

  var faces = object.geometry.faces;

  for ( var i = 0, l = faces.length; i < l; i ++ ) {

    var face = faces[ i ];

    for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

      geometry.vertices.push( new THREE.Vector3() );
      geometry.vertices.push( new THREE.Vector3() );

    }

  }

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

  this.matrixAutoUpdate = false;

  this.update();

};

THREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexTangentsHelper.prototype.update = ( function ( object ) {

  var v1 = new THREE.Vector3();

  return function( object ) {

    var keys = [ 'a', 'b', 'c', 'd' ];

    this.object.updateMatrixWorld( true );

    var vertices = this.geometry.vertices;

    var verts = this.object.geometry.vertices;

    var faces = this.object.geometry.faces;

    var worldMatrix = this.object.matrixWorld;

    var idx = 0;

    for ( var i = 0, l = faces.length; i < l; i ++ ) {

      var face = faces[ i ];

      for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

        var vertexId = face[ keys[ j ] ];
        var vertex = verts[ vertexId ];

        var tangent = face.vertexTangents[ j ];

        vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

        v1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );

        v1.add( vertices[ idx ] );
        idx = idx + 1;

        vertices[ idx ].copy( v1 );
        idx = idx + 1;

      }

    }

    this.geometry.verticesNeedUpdate = true;

    return this;

  }

}());

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.WireframeHelper = function ( object, hex ) {

  var color = ( hex !== undefined ) ? hex : 0xffffff;

  var edge = [ 0, 0 ], hash = {};
  var sortFunction = function ( a, b ) { return a - b };

  var keys = [ 'a', 'b', 'c' ];
  var geometry = new THREE.BufferGeometry();

  if ( object.geometry instanceof THREE.Geometry ) {

    var vertices = object.geometry.vertices;
    var faces = object.geometry.faces;
    var numEdges = 0;

    // allocate maximal size
    var edges = new Uint32Array( 6 * faces.length );

    for ( var i = 0, l = faces.length; i < l; i ++ ) {

      var face = faces[ i ];

      for ( var j = 0; j < 3; j ++ ) {

        edge[ 0 ] = face[ keys[ j ] ];
        edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
        edge.sort( sortFunction );

        var key = edge.toString();

        if ( hash[ key ] === undefined ) {

          edges[ 2 * numEdges ] = edge[ 0 ];
          edges[ 2 * numEdges + 1 ] = edge[ 1 ];
          hash[ key ] = true;
          numEdges ++;

        }

      }

    }

    geometry.addAttribute( 'position', new THREE.Float32Attribute( numEdges * 2, 3 ) );

    var coords = geometry.attributes.position.array;

    for ( var i = 0, l = numEdges; i < l; i ++ ) {

      for ( var j = 0; j < 2; j ++ ) {

        var vertex = vertices[ edges [ 2 * i + j] ];

        var index = 6 * i + 3 * j;
        coords[ index + 0 ] = vertex.x;
        coords[ index + 1 ] = vertex.y;
        coords[ index + 2 ] = vertex.z;

      }

    }

  } else if ( object.geometry instanceof THREE.BufferGeometry && object.geometry.attributes.index !== undefined ) { // indexed BufferGeometry

    var vertices = object.geometry.attributes.position.array;
    var indices = object.geometry.attributes.index.array;
    var offsets = object.geometry.offsets;
    var numEdges = 0;

    // allocate maximal size
    var edges = new Uint32Array( 2 * indices.length );

    for ( var o = 0, ol = offsets.length; o < ol; ++ o ) {

      var start = offsets[ o ].start;
      var count = offsets[ o ].count;
      var index = offsets[ o ].index;

      for ( var i = start, il = start + count; i < il; i += 3 ) {

        for ( var j = 0; j < 3; j ++ ) {

          edge[ 0 ] = index + indices[ i + j ];
          edge[ 1 ] = index + indices[ i + ( j + 1 ) % 3 ];
          edge.sort( sortFunction );

          var key = edge.toString();

          if ( hash[ key ] === undefined ) {

            edges[ 2 * numEdges ] = edge[ 0 ];
            edges[ 2 * numEdges + 1 ] = edge[ 1 ];
            hash[ key ] = true;
            numEdges ++;

          }

        }

      }

    }

    geometry.addAttribute( 'position', new THREE.Float32Attribute( numEdges * 2, 3 ) );

    var coords = geometry.attributes.position.array;

    for ( var i = 0, l = numEdges; i < l; i ++ ) {

      for ( var j = 0; j < 2; j ++ ) {

        var index = 6 * i + 3 * j;
        var index2 = 3 * edges[ 2 * i + j];
        coords[ index + 0 ] = vertices[ index2 ];
        coords[ index + 1 ] = vertices[ index2 + 1 ];
        coords[ index + 2 ] = vertices[ index2 + 2 ];

      }

    }

  } else if ( object.geometry instanceof THREE.BufferGeometry ) { // non-indexed BufferGeometry

    var vertices = object.geometry.attributes.position.array;
    var numEdges = vertices.length / 3;
    var numTris = numEdges / 3;

    geometry.addAttribute( 'position', new THREE.Float32Attribute( numEdges * 2, 3 ) );

    var coords = geometry.attributes.position.array;

    for ( var i = 0, l = numTris; i < l; i ++ ) {

      for ( var j = 0; j < 3; j ++ ) {

        var index = 18 * i + 6 * j;

        var index1 = 9 * i + 3 * j;
        coords[ index + 0 ] = vertices[ index1 ];
        coords[ index + 1 ] = vertices[ index1 + 1 ];
        coords[ index + 2 ] = vertices[ index1 + 2 ];

        var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
        coords[ index + 3 ] = vertices[ index2 ];
        coords[ index + 4 ] = vertices[ index2 + 1 ];
        coords[ index + 5 ] = vertices[ index2 + 2 ];

      }

    }

  }

  THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

  this.matrixAutoUpdate = false;
  this.matrixWorld = object.matrixWorld;

};

THREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ImmediateRenderObject = function () {

  THREE.Object3D.call( this );

  this.render = function ( renderCallback ) { };

};

THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlare = function ( texture, size, distance, blending, color ) {

  THREE.Object3D.call( this );

  this.lensFlares = [];

  this.positionScreen = new THREE.Vector3();
  this.customUpdateCallback = undefined;

  if( texture !== undefined ) {

    this.add( texture, size, distance, blending, color );

  }

};

THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );


/*
 * Add: adds another flare
 */

THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

  if( size === undefined ) size = -1;
  if( distance === undefined ) distance = 0;
  if( opacity === undefined ) opacity = 1;
  if( color === undefined ) color = new THREE.Color( 0xffffff );
  if( blending === undefined ) blending = THREE.NormalBlending;

  distance = Math.min( distance, Math.max( 0, distance ) );

  this.lensFlares.push( { texture: texture,       // THREE.Texture
                        size: size,         // size in pixels (-1 = use texture.width)
                        distance: distance,     // distance (0-1) from light source (0=at light source)
                        x: 0, y: 0, z: 0,     // screen position (-1 => 1) z = 0 is ontop z = 1 is back
                        scale: 1,           // scale
                        rotation: 1,        // rotation
                        opacity: opacity,     // opacity
              color: color,       // color
                        blending: blending } );   // blending

};


/*
 * Update lens flares update positions on all flares based on the screen position
 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
 */

THREE.LensFlare.prototype.updateLensFlares = function () {

  var f, fl = this.lensFlares.length;
  var flare;
  var vecX = -this.positionScreen.x * 2;
  var vecY = -this.positionScreen.y * 2;

  for( f = 0; f < fl; f ++ ) {

    flare = this.lensFlares[ f ];

    flare.x = this.positionScreen.x + vecX * flare.distance;
    flare.y = this.positionScreen.y + vecY * flare.distance;

    flare.wantedRotation = flare.x * Math.PI * 0.25;
    flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

  }

};













/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphBlendMesh = function( geometry, material ) {

  THREE.Mesh.call( this, geometry, material );

  this.animationsMap = {};
  this.animationsList = [];

  // prepare default animation
  // (all frames played together in 1 second)

  var numFrames = this.geometry.morphTargets.length;

  var name = "__default";

  var startFrame = 0;
  var endFrame = numFrames - 1;

  var fps = numFrames / 1;

  this.createAnimation( name, startFrame, endFrame, fps );
  this.setAnimationWeight( name, 1 );

};

THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

  var animation = {

    startFrame: start,
    endFrame: end,

    length: end - start + 1,

    fps: fps,
    duration: ( end - start ) / fps,

    lastFrame: 0,
    currentFrame: 0,

    active: false,

    time: 0,
    direction: 1,
    weight: 1,

    directionBackwards: false,
    mirroredLoop: false

  };

  this.animationsMap[ name ] = animation;
  this.animationsList.push( animation );

};

THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

  var pattern = /([a-z]+)(\d+)/;

  var firstAnimation, frameRanges = {};

  var geometry = this.geometry;

  for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

    var morph = geometry.morphTargets[ i ];
    var chunks = morph.name.match( pattern );

    if ( chunks && chunks.length > 1 ) {

      var name = chunks[ 1 ];
      var num = chunks[ 2 ];

      if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };

      var range = frameRanges[ name ];

      if ( i < range.start ) range.start = i;
      if ( i > range.end ) range.end = i;

      if ( ! firstAnimation ) firstAnimation = name;

    }

  }

  for ( var name in frameRanges ) {

    var range = frameRanges[ name ];
    this.createAnimation( name, range.start, range.end, fps );

  }

  this.firstAnimation = firstAnimation;

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.direction = 1;
    animation.directionBackwards = false;

  }

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.direction = -1;
    animation.directionBackwards = true;

  }

};

THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.fps = fps;
    animation.duration = ( animation.end - animation.start ) / animation.fps;

  }

};

THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.duration = duration;
    animation.fps = ( animation.end - animation.start ) / animation.duration;

  }

};

THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.weight = weight;

  }

};

THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.time = time;

  }

};

THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

  var time = 0;

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    time = animation.time;

  }

  return time;

};

THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

  var duration = -1;

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    duration = animation.duration;

  }

  return duration;

};

THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.time = 0;
    animation.active = true;

  } else {

    console.warn( "animation[" + name + "] undefined" );

  }

};

THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

  var animation = this.animationsMap[ name ];

  if ( animation ) {

    animation.active = false;

  }

};

THREE.MorphBlendMesh.prototype.update = function ( delta ) {

  for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

    var animation = this.animationsList[ i ];

    if ( ! animation.active ) continue;

    var frameTime = animation.duration / animation.length;

    animation.time += animation.direction * delta;

    if ( animation.mirroredLoop ) {

      if ( animation.time > animation.duration || animation.time < 0 ) {

        animation.direction *= -1;

        if ( animation.time > animation.duration ) {

          animation.time = animation.duration;
          animation.directionBackwards = true;

        }

        if ( animation.time < 0 ) {

          animation.time = 0;
          animation.directionBackwards = false;

        }

      }

    } else {

      animation.time = animation.time % animation.duration;

      if ( animation.time < 0 ) animation.time += animation.duration;

    }

    var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
    var weight = animation.weight;

    if ( keyframe !== animation.currentFrame ) {

      this.morphTargetInfluences[ animation.lastFrame ] = 0;
      this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

      this.morphTargetInfluences[ keyframe ] = 0;

      animation.lastFrame = animation.currentFrame;
      animation.currentFrame = keyframe;

    }

    var mix = ( animation.time % frameTime ) / frameTime;

    if ( animation.directionBackwards ) mix = 1 - mix;

    this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
    this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

  }

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlarePlugin = function () {

  var _gl, _renderer, _precision, _lensFlare = {};

  this.init = function ( renderer ) {

    _gl = renderer.context;
    _renderer = renderer;

    _precision = renderer.getPrecision();

    _lensFlare.vertices = new Float32Array( 8 + 8 );
    _lensFlare.faces = new Uint16Array( 6 );

    var i = 0;
    _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1; // vertex
    _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;  // uv... etc.

    _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
    _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;

    _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
    _lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;

    _lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
    _lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;

    i = 0;
    _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
    _lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;

    // buffers

    _lensFlare.vertexBuffer     = _gl.createBuffer();
    _lensFlare.elementBuffer    = _gl.createBuffer();

    _gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
    _gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );

    _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );
    _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );

    // textures

    _lensFlare.tempTexture      = _gl.createTexture();
    _lensFlare.occlusionTexture = _gl.createTexture();

    _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
    _gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

    _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
    _gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
    _gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

    if ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {

      _lensFlare.hasVertexTexture = false;
      _lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlare" ], _precision );

    } else {

      _lensFlare.hasVertexTexture = true;
      _lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlareVertexTexture" ], _precision );

    }

    _lensFlare.attributes = {};
    _lensFlare.uniforms = {};

    _lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, "position" );
    _lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, "uv" );

    _lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, "renderType" );
    _lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, "map" );
    _lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, "occlusionMap" );
    _lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, "opacity" );
    _lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, "color" );
    _lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, "scale" );
    _lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, "rotation" );
    _lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, "screenPosition" );

  };


  /*
   * Render lens flares
   * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
   *         reads these back and calculates occlusion.
   *         Then _lensFlare.update_lensFlares() is called to re-position and
   *         update transparency of flares. Then they are rendered.
   *
   */

  this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

    var flares = scene.__webglFlares,
      nFlares = flares.length;

    if ( ! nFlares ) return;

    var tempPosition = new THREE.Vector3();

    var invAspect = viewportHeight / viewportWidth,
      halfViewportWidth = viewportWidth * 0.5,
      halfViewportHeight = viewportHeight * 0.5;

    var size = 16 / viewportHeight,
      scale = new THREE.Vector2( size * invAspect, size );

    var screenPosition = new THREE.Vector3( 1, 1, 0 ),
      screenPositionPixels = new THREE.Vector2( 1, 1 );

    var uniforms = _lensFlare.uniforms,
      attributes = _lensFlare.attributes;

    // set _lensFlare program and reset blending

    _gl.useProgram( _lensFlare.program );

    _gl.enableVertexAttribArray( _lensFlare.attributes.vertex );
    _gl.enableVertexAttribArray( _lensFlare.attributes.uv );

    // loop through all lens flares to update their occlusion and positions
    // setup gl and common used attribs/unforms

    _gl.uniform1i( uniforms.occlusionMap, 0 );
    _gl.uniform1i( uniforms.map, 1 );

    _gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
    _gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );
    _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

    _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );

    _gl.disable( _gl.CULL_FACE );
    _gl.depthMask( false );

    var i, j, jl, flare, sprite;

    for ( i = 0; i < nFlares; i ++ ) {

      size = 16 / viewportHeight;
      scale.set( size * invAspect, size );

      // calc object screen position

      flare = flares[ i ];

      tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );

      tempPosition.applyMatrix4( camera.matrixWorldInverse );
      tempPosition.applyProjection( camera.projectionMatrix );

      // setup arrays for gl programs

      screenPosition.copy( tempPosition )

      screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
      screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

      // screen cull

      if ( _lensFlare.hasVertexTexture || (
        screenPositionPixels.x > 0 &&
        screenPositionPixels.x < viewportWidth &&
        screenPositionPixels.y > 0 &&
        screenPositionPixels.y < viewportHeight ) ) {

        // save current RGB to temp texture

        _gl.activeTexture( _gl.TEXTURE1 );
        _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
        _gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


        // render pink quad

        _gl.uniform1i( uniforms.renderType, 0 );
        _gl.uniform2f( uniforms.scale, scale.x, scale.y );
        _gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

        _gl.disable( _gl.BLEND );
        _gl.enable( _gl.DEPTH_TEST );

        _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


        // copy result to occlusionMap

        _gl.activeTexture( _gl.TEXTURE0 );
        _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
        _gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


        // restore graphics

        _gl.uniform1i( uniforms.renderType, 1 );
        _gl.disable( _gl.DEPTH_TEST );

        _gl.activeTexture( _gl.TEXTURE1 );
        _gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
        _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


        // update object positions

        flare.positionScreen.copy( screenPosition )

        if ( flare.customUpdateCallback ) {

          flare.customUpdateCallback( flare );

        } else {

          flare.updateLensFlares();

        }

        // render flares

        _gl.uniform1i( uniforms.renderType, 2 );
        _gl.enable( _gl.BLEND );

        for ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

          sprite = flare.lensFlares[ j ];

          if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

            screenPosition.x = sprite.x;
            screenPosition.y = sprite.y;
            screenPosition.z = sprite.z;

            size = sprite.size * sprite.scale / viewportHeight;

            scale.x = size * invAspect;
            scale.y = size;

            _gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
            _gl.uniform2f( uniforms.scale, scale.x, scale.y );
            _gl.uniform1f( uniforms.rotation, sprite.rotation );

            _gl.uniform1f( uniforms.opacity, sprite.opacity );
            _gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

            _renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
            _renderer.setTexture( sprite.texture, 1 );

            _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

          }

        }

      }

    }

    // restore gl

    _gl.enable( _gl.CULL_FACE );
    _gl.enable( _gl.DEPTH_TEST );
    _gl.depthMask( true );

  };

  function createProgram ( shader, precision ) {

    var program = _gl.createProgram();

    var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );
    var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );

    var prefix = "precision " + precision + " float;\n";

    _gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
    _gl.shaderSource( vertexShader, prefix + shader.vertexShader );

    _gl.compileShader( fragmentShader );
    _gl.compileShader( vertexShader );

    _gl.attachShader( program, fragmentShader );
    _gl.attachShader( program, vertexShader );

    _gl.linkProgram( program );

    return program;

  };

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ShadowMapPlugin = function () {

  var _gl,
  _renderer,
  _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

  _frustum = new THREE.Frustum(),
  _projScreenMatrix = new THREE.Matrix4(),

  _min = new THREE.Vector3(),
  _max = new THREE.Vector3(),

  _matrixPosition = new THREE.Vector3();

  this.init = function ( renderer ) {

    _gl = renderer.context;
    _renderer = renderer;

    var depthShader = THREE.ShaderLib[ "depthRGBA" ];
    var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

    _depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
    _depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
    _depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
    _depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

    _depthMaterial._shadowPass = true;
    _depthMaterialMorph._shadowPass = true;
    _depthMaterialSkin._shadowPass = true;
    _depthMaterialMorphSkin._shadowPass = true;

  };

  this.render = function ( scene, camera ) {

    if ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;

    this.update( scene, camera );

  };

  this.update = function ( scene, camera ) {

    var i, il, j, jl, n,

    shadowMap, shadowMatrix, shadowCamera,
    program, buffer, material,
    webglObject, object, light,
    renderList,

    lights = [],
    k = 0,

    fog = null;

    // set GL state for depth map

    _gl.clearColor( 1, 1, 1, 1 );
    _gl.disable( _gl.BLEND );

    _gl.enable( _gl.CULL_FACE );
    _gl.frontFace( _gl.CCW );

    if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

      _gl.cullFace( _gl.FRONT );

    } else {

      _gl.cullFace( _gl.BACK );

    }

    _renderer.setDepthTest( true );

    // preprocess lights
    //  - skip lights that are not casting shadows
    //  - create virtual lights for cascaded shadow maps

    for ( i = 0, il = scene.__lights.length; i < il; i ++ ) {

      light = scene.__lights[ i ];

      if ( ! light.castShadow ) continue;

      if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {

        for ( n = 0; n < light.shadowCascadeCount; n ++ ) {

          var virtualLight;

          if ( ! light.shadowCascadeArray[ n ] ) {

            virtualLight = createVirtualLight( light, n );
            virtualLight.originalCamera = camera;

            var gyro = new THREE.Gyroscope();
            gyro.position.copy( light.shadowCascadeOffset );

            gyro.add( virtualLight );
            gyro.add( virtualLight.target );

            camera.add( gyro );

            light.shadowCascadeArray[ n ] = virtualLight;

            console.log( "Created virtualLight", virtualLight );

          } else {

            virtualLight = light.shadowCascadeArray[ n ];

          }

          updateVirtualLight( light, n );

          lights[ k ] = virtualLight;
          k ++;

        }

      } else {

        lights[ k ] = light;
        k ++;

      }

    }

    // render depth map

    for ( i = 0, il = lights.length; i < il; i ++ ) {

      light = lights[ i ];

      if ( ! light.shadowMap ) {

        var shadowFilter = THREE.LinearFilter;

        if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {

          shadowFilter = THREE.NearestFilter;

        }

        var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };

        light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );
        light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );

        light.shadowMatrix = new THREE.Matrix4();

      }

      if ( ! light.shadowCamera ) {

        if ( light instanceof THREE.SpotLight ) {

          light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );

        } else if ( light instanceof THREE.DirectionalLight ) {

          light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );

        } else {

          console.error( "Unsupported light type for shadow" );
          continue;

        }

        scene.add( light.shadowCamera );

        if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

      }

      if ( light.shadowCameraVisible && ! light.cameraHelper ) {

        light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );
        light.shadowCamera.add( light.cameraHelper );

      }

      if ( light.isVirtual && virtualLight.originalCamera == camera ) {

        updateShadowCamera( camera, light );

      }

      shadowMap = light.shadowMap;
      shadowMatrix = light.shadowMatrix;
      shadowCamera = light.shadowCamera;

      shadowCamera.position.setFromMatrixPosition( light.matrixWorld );
      _matrixPosition.setFromMatrixPosition( light.target.matrixWorld );
      shadowCamera.lookAt( _matrixPosition );
      shadowCamera.updateMatrixWorld();

      shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

      if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;
      if ( light.shadowCameraVisible ) light.cameraHelper.update();

      // compute shadow matrix

      shadowMatrix.set( 0.5, 0.0, 0.0, 0.5,
                0.0, 0.5, 0.0, 0.5,
                0.0, 0.0, 0.5, 0.5,
                0.0, 0.0, 0.0, 1.0 );

      shadowMatrix.multiply( shadowCamera.projectionMatrix );
      shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

      // update camera matrices and frustum

      _projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
      _frustum.setFromMatrix( _projScreenMatrix );

      // render shadow map

      _renderer.setRenderTarget( shadowMap );
      _renderer.clear();

      // set object matrices & frustum culling

      renderList = scene.__webglObjects;

      for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

        webglObject = renderList[ j ];
        object = webglObject.object;

        webglObject.render = false;

        if ( object.visible && object.castShadow ) {

          if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

            object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

            webglObject.render = true;

          }

        }

      }

      // render regular objects

      var objectMaterial, useMorphing, useSkinning;

      for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

        webglObject = renderList[ j ];

        if ( webglObject.render ) {

          object = webglObject.object;
          buffer = webglObject.buffer;

          // culling is overriden globally for all objects
          // while rendering depth map

          // need to deal with MeshFaceMaterial somehow
          // in that case just use the first of material.materials for now
          // (proper solution would require to break objects by materials
          //  similarly to regular rendering and then set corresponding
          //  depth materials per each chunk instead of just once per object)

          objectMaterial = getObjectMaterial( object );

          useMorphing = object.geometry.morphTargets !== undefined && object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
          useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

          if ( object.customDepthMaterial ) {

            material = object.customDepthMaterial;

          } else if ( useSkinning ) {

            material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

          } else if ( useMorphing ) {

            material = _depthMaterialMorph;

          } else {

            material = _depthMaterial;

          }

          _renderer.setMaterialFaces( objectMaterial );

          if ( buffer instanceof THREE.BufferGeometry ) {

            _renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );

          } else {

            _renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );

          }

        }

      }

      // set matrices and render immediate objects

      renderList = scene.__webglObjectsImmediate;

      for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

        webglObject = renderList[ j ];
        object = webglObject.object;

        if ( object.visible && object.castShadow ) {

          object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

          _renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );

        }

      }

    }

    // restore GL state

    var clearColor = _renderer.getClearColor(),
    clearAlpha = _renderer.getClearAlpha();

    _gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
    _gl.enable( _gl.BLEND );

    if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

      _gl.cullFace( _gl.BACK );

    }

  };

  function createVirtualLight( light, cascade ) {

    var virtualLight = new THREE.DirectionalLight();

    virtualLight.isVirtual = true;

    virtualLight.onlyShadow = true;
    virtualLight.castShadow = true;

    virtualLight.shadowCameraNear = light.shadowCameraNear;
    virtualLight.shadowCameraFar = light.shadowCameraFar;

    virtualLight.shadowCameraLeft = light.shadowCameraLeft;
    virtualLight.shadowCameraRight = light.shadowCameraRight;
    virtualLight.shadowCameraBottom = light.shadowCameraBottom;
    virtualLight.shadowCameraTop = light.shadowCameraTop;

    virtualLight.shadowCameraVisible = light.shadowCameraVisible;

    virtualLight.shadowDarkness = light.shadowDarkness;

    virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
    virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];
    virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];

    virtualLight.pointsWorld = [];
    virtualLight.pointsFrustum = [];

    var pointsWorld = virtualLight.pointsWorld,
      pointsFrustum = virtualLight.pointsFrustum;

    for ( var i = 0; i < 8; i ++ ) {

      pointsWorld[ i ] = new THREE.Vector3();
      pointsFrustum[ i ] = new THREE.Vector3();

    }

    var nearZ = light.shadowCascadeNearZ[ cascade ];
    var farZ = light.shadowCascadeFarZ[ cascade ];

    pointsFrustum[ 0 ].set( -1, -1, nearZ );
    pointsFrustum[ 1 ].set(  1, -1, nearZ );
    pointsFrustum[ 2 ].set( -1,  1, nearZ );
    pointsFrustum[ 3 ].set(  1,  1, nearZ );

    pointsFrustum[ 4 ].set( -1, -1, farZ );
    pointsFrustum[ 5 ].set(  1, -1, farZ );
    pointsFrustum[ 6 ].set( -1,  1, farZ );
    pointsFrustum[ 7 ].set(  1,  1, farZ );

    return virtualLight;

  }

  // Synchronize virtual light with the original light

  function updateVirtualLight( light, cascade ) {

    var virtualLight = light.shadowCascadeArray[ cascade ];

    virtualLight.position.copy( light.position );
    virtualLight.target.position.copy( light.target.position );
    virtualLight.lookAt( virtualLight.target );

    virtualLight.shadowCameraVisible = light.shadowCameraVisible;
    virtualLight.shadowDarkness = light.shadowDarkness;

    virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];

    var nearZ = light.shadowCascadeNearZ[ cascade ];
    var farZ = light.shadowCascadeFarZ[ cascade ];

    var pointsFrustum = virtualLight.pointsFrustum;

    pointsFrustum[ 0 ].z = nearZ;
    pointsFrustum[ 1 ].z = nearZ;
    pointsFrustum[ 2 ].z = nearZ;
    pointsFrustum[ 3 ].z = nearZ;

    pointsFrustum[ 4 ].z = farZ;
    pointsFrustum[ 5 ].z = farZ;
    pointsFrustum[ 6 ].z = farZ;
    pointsFrustum[ 7 ].z = farZ;

  }

  // Fit shadow camera's ortho frustum to camera frustum

  function updateShadowCamera( camera, light ) {

    var shadowCamera = light.shadowCamera,
      pointsFrustum = light.pointsFrustum,
      pointsWorld = light.pointsWorld;

    _min.set( Infinity, Infinity, Infinity );
    _max.set( -Infinity, -Infinity, -Infinity );

    for ( var i = 0; i < 8; i ++ ) {

      var p = pointsWorld[ i ];

      p.copy( pointsFrustum[ i ] );
      THREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );

      p.applyMatrix4( shadowCamera.matrixWorldInverse );

      if ( p.x < _min.x ) _min.x = p.x;
      if ( p.x > _max.x ) _max.x = p.x;

      if ( p.y < _min.y ) _min.y = p.y;
      if ( p.y > _max.y ) _max.y = p.y;

      if ( p.z < _min.z ) _min.z = p.z;
      if ( p.z > _max.z ) _max.z = p.z;

    }

    shadowCamera.left = _min.x;
    shadowCamera.right = _max.x;
    shadowCamera.top = _max.y;
    shadowCamera.bottom = _min.y;

    // can't really fit near/far
    //shadowCamera.near = _min.z;
    //shadowCamera.far = _max.z;

    shadowCamera.updateProjectionMatrix();

  }

  // For the moment just ignore objects that have multiple materials with different animation methods
  // Only the first material will be taken into account for deciding which depth material to use for shadow maps

  function getObjectMaterial( object ) {

    return object.material instanceof THREE.MeshFaceMaterial
      ? object.material.materials[ 0 ]
      : object.material;

  };

};

THREE.ShadowMapPlugin.__projector = new THREE.Projector();

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpritePlugin = function () {

  var _gl, _renderer, _texture;

  var vertices, faces, vertexBuffer, elementBuffer;
  var program, attributes, uniforms;

  this.init = function ( renderer ) {

    _gl = renderer.context;
    _renderer = renderer;

    vertices = new Float32Array( [
      - 0.5, - 0.5, 0, 0, 
        0.5, - 0.5, 1, 0,
        0.5,   0.5, 1, 1,
      - 0.5,   0.5, 0, 1
    ] );

    faces = new Uint16Array( [
      0, 1, 2,
      0, 2, 3
    ] );

    vertexBuffer  = _gl.createBuffer();
    elementBuffer = _gl.createBuffer();

    _gl.bindBuffer( _gl.ARRAY_BUFFER, vertexBuffer );
    _gl.bufferData( _gl.ARRAY_BUFFER, vertices, _gl.STATIC_DRAW );

    _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
    _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faces, _gl.STATIC_DRAW );

    program = createProgram();

    attributes = {
      position:     _gl.getAttribLocation ( program, 'position' ),
      uv:         _gl.getAttribLocation ( program, 'uv' )
    };

    uniforms = {
      uvOffset:     _gl.getUniformLocation( program, 'uvOffset' ),
      uvScale:      _gl.getUniformLocation( program, 'uvScale' ),

      rotation:     _gl.getUniformLocation( program, 'rotation' ),
      scale:        _gl.getUniformLocation( program, 'scale' ),

      color:        _gl.getUniformLocation( program, 'color' ),
      map:        _gl.getUniformLocation( program, 'map' ),
      opacity:      _gl.getUniformLocation( program, 'opacity' ),

      modelViewMatrix:  _gl.getUniformLocation( program, 'modelViewMatrix' ),
      projectionMatrix: _gl.getUniformLocation( program, 'projectionMatrix' ),

      fogType:      _gl.getUniformLocation( program, 'fogType' ),
      fogDensity:     _gl.getUniformLocation( program, 'fogDensity' ),
      fogNear:      _gl.getUniformLocation( program, 'fogNear' ),
      fogFar:       _gl.getUniformLocation( program, 'fogFar' ),
      fogColor:     _gl.getUniformLocation( program, 'fogColor' ),

      alphaTest:      _gl.getUniformLocation( program, 'alphaTest' )
    };

    var canvas = document.createElement( 'canvas' );
    canvas.width = 8;
    canvas.height = 8;

    var context = canvas.getContext( '2d' );
    context.fillStyle = '#ffffff';
    context.fillRect( 0, 0, canvas.width, canvas.height );

    _texture = new THREE.Texture( canvas );
    _texture.needsUpdate = true;

  };

  this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

    var sprites = scene.__webglSprites,
      nSprites = sprites.length;

    if ( ! nSprites ) return;

    // setup gl

    _gl.useProgram( program );

    _gl.enableVertexAttribArray( attributes.position );
    _gl.enableVertexAttribArray( attributes.uv );

    _gl.disable( _gl.CULL_FACE );
    _gl.enable( _gl.BLEND );

    _gl.bindBuffer( _gl.ARRAY_BUFFER, vertexBuffer );
    _gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );
    _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

    _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

    _gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

    _gl.activeTexture( _gl.TEXTURE0 );
    _gl.uniform1i( uniforms.map, 0 );

    var oldFogType = 0;
    var sceneFogType = 0;
    var fog = scene.fog;

    if ( fog ) {

      _gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

      if ( fog instanceof THREE.Fog ) {

        _gl.uniform1f( uniforms.fogNear, fog.near );
        _gl.uniform1f( uniforms.fogFar, fog.far );

        _gl.uniform1i( uniforms.fogType, 1 );
        oldFogType = 1;
        sceneFogType = 1;

      } else if ( fog instanceof THREE.FogExp2 ) {

        _gl.uniform1f( uniforms.fogDensity, fog.density );

        _gl.uniform1i( uniforms.fogType, 2 );
        oldFogType = 2;
        sceneFogType = 2;

      }

    } else {

      _gl.uniform1i( uniforms.fogType, 0 );
      oldFogType = 0;
      sceneFogType = 0;

    }


    // update positions and sort

    var i, sprite, material, fogType, scale = [];

    for( i = 0; i < nSprites; i ++ ) {

      sprite = sprites[ i ];
      material = sprite.material;

      if ( sprite.visible === false ) continue;

      sprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
      sprite.z = - sprite._modelViewMatrix.elements[ 14 ];

    }

    sprites.sort( painterSortStable );

    // render all sprites

    for( i = 0; i < nSprites; i ++ ) {

      sprite = sprites[ i ];

      if ( sprite.visible === false ) continue;

      material = sprite.material;

      _gl.uniform1f( uniforms.alphaTest, material.alphaTest );
      _gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );

      scale[ 0 ] = sprite.scale.x;
      scale[ 1 ] = sprite.scale.y;

      if ( scene.fog && material.fog ) {

        fogType = sceneFogType;

      } else {

        fogType = 0;

      }

      if ( oldFogType !== fogType ) {

        _gl.uniform1i( uniforms.fogType, fogType );
        oldFogType = fogType;

      }

      if ( material.map !== null ) {

        _gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
        _gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

      } else {

        _gl.uniform2f( uniforms.uvOffset, 0, 0 );
        _gl.uniform2f( uniforms.uvScale, 1, 1 );

      }

      _gl.uniform1f( uniforms.opacity, material.opacity );
      _gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

      _gl.uniform1f( uniforms.rotation, material.rotation );
      _gl.uniform2fv( uniforms.scale, scale );

      _renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
      _renderer.setDepthTest( material.depthTest );
      _renderer.setDepthWrite( material.depthWrite );

      if ( material.map && material.map.image && material.map.image.width ) {

        _renderer.setTexture( material.map, 0 );

      } else {

        _renderer.setTexture( _texture, 0 );

      }

      _gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

    }

    // restore gl

    _gl.enable( _gl.CULL_FACE );

  };

  function createProgram () {

    var program = _gl.createProgram();

    var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );
    var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );

    _gl.shaderSource( vertexShader, [

      'precision ' + _renderer.getPrecision() + ' float;',

      'uniform mat4 modelViewMatrix;',
      'uniform mat4 projectionMatrix;',
      'uniform float rotation;',
      'uniform vec2 scale;',
      'uniform vec2 uvOffset;',
      'uniform vec2 uvScale;',

      'attribute vec2 position;',
      'attribute vec2 uv;',

      'varying vec2 vUV;',

      'void main() {',

        'vUV = uvOffset + uv * uvScale;',

        'vec2 alignedPosition = position * scale;',

        'vec2 rotatedPosition;',
        'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
        'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

        'vec4 finalPosition;',

        'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
        'finalPosition.xy += rotatedPosition;',
        'finalPosition = projectionMatrix * finalPosition;',

        'gl_Position = finalPosition;',

      '}'

    ].join( '\n' ) );

    _gl.shaderSource( fragmentShader, [

      'precision ' + _renderer.getPrecision() + ' float;',

      'uniform vec3 color;',
      'uniform sampler2D map;',
      'uniform float opacity;',

      'uniform int fogType;',
      'uniform vec3 fogColor;',
      'uniform float fogDensity;',
      'uniform float fogNear;',
      'uniform float fogFar;',
      'uniform float alphaTest;',

      'varying vec2 vUV;',

      'void main() {',

        'vec4 texture = texture2D( map, vUV );',

        'if ( texture.a < alphaTest ) discard;',

        'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

        'if ( fogType > 0 ) {',

          'float depth = gl_FragCoord.z / gl_FragCoord.w;',
          'float fogFactor = 0.0;',

          'if ( fogType == 1 ) {',

            'fogFactor = smoothstep( fogNear, fogFar, depth );',

          '} else {',

            'const float LOG2 = 1.442695;',
            'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
            'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

          '}',

          'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

        '}',

      '}'

    ].join( '\n' ) );

    _gl.compileShader( vertexShader );
    _gl.compileShader( fragmentShader );

    _gl.attachShader( program, vertexShader );
    _gl.attachShader( program, fragmentShader );

    _gl.linkProgram( program );

    return program;

  };

  function painterSortStable ( a, b ) {

    if ( a.z !== b.z ) {

      return b.z - a.z;

    } else {

      return b.id - a.id;

    }

  };

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DepthPassPlugin = function () {

  this.enabled = false;
  this.renderTarget = null;

  var _gl,
  _renderer,
  _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

  _frustum = new THREE.Frustum(),
  _projScreenMatrix = new THREE.Matrix4();

  this.init = function ( renderer ) {

    _gl = renderer.context;
    _renderer = renderer;

    var depthShader = THREE.ShaderLib[ "depthRGBA" ];
    var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

    _depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
    _depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
    _depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
    _depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

    _depthMaterial._shadowPass = true;
    _depthMaterialMorph._shadowPass = true;
    _depthMaterialSkin._shadowPass = true;
    _depthMaterialMorphSkin._shadowPass = true;

  };

  this.render = function ( scene, camera ) {

    if ( ! this.enabled ) return;

    this.update( scene, camera );

  };

  this.update = function ( scene, camera ) {

    var i, il, j, jl, n,

    program, buffer, material,
    webglObject, object, light,
    renderList,

    fog = null;

    // set GL state for depth map

    _gl.clearColor( 1, 1, 1, 1 );
    _gl.disable( _gl.BLEND );

    _renderer.setDepthTest( true );

    // update scene

    if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

    // update camera matrices and frustum

    camera.matrixWorldInverse.getInverse( camera.matrixWorld );

    _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
    _frustum.setFromMatrix( _projScreenMatrix );

    // render depth map

    _renderer.setRenderTarget( this.renderTarget );
    _renderer.clear();

    // set object matrices & frustum culling

    renderList = scene.__webglObjects;

    for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

      webglObject = renderList[ j ];
      object = webglObject.object;

      webglObject.render = false;

      if ( object.visible ) {

        if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.intersectsObject( object ) ) {

          object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );

          webglObject.render = true;

        }

      }

    }

    // render regular objects

    var objectMaterial, useMorphing, useSkinning;

    for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

      webglObject = renderList[ j ];

      if ( webglObject.render ) {

        object = webglObject.object;
        buffer = webglObject.buffer;

        // todo: create proper depth material for particles

        if ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;

        objectMaterial = getObjectMaterial( object );

        if ( objectMaterial ) _renderer.setMaterialFaces( object.material );

        useMorphing = object.geometry.morphTargets !== undefined && object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
        useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

        if ( object.customDepthMaterial ) {

          material = object.customDepthMaterial;

        } else if ( useSkinning ) {

          material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

        } else if ( useMorphing ) {

          material = _depthMaterialMorph;

        } else {

          material = _depthMaterial;

        }

        if ( buffer instanceof THREE.BufferGeometry ) {

          _renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );

        } else {

          _renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );

        }

      }

    }

    // set matrices and render immediate objects

    renderList = scene.__webglObjectsImmediate;

    for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

      webglObject = renderList[ j ];
      object = webglObject.object;

      if ( object.visible ) {

        object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );

        _renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );

      }

    }

    // restore GL state

    var clearColor = _renderer.getClearColor(),
    clearAlpha = _renderer.getClearAlpha();

    _gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
    _gl.enable( _gl.BLEND );

  };

  // For the moment just ignore objects that have multiple materials with different animation methods
  // Only the first material will be taken into account for deciding which depth material to use

  function getObjectMaterial( object ) {

    return object.material instanceof THREE.MeshFaceMaterial
      ? object.material.materials[ 0 ]
      : object.material;

  };

};


/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.ShaderFlares = {

  'lensFlareVertexTexture': {

    vertexShader: [

      "uniform lowp int renderType;",

      "uniform vec3 screenPosition;",
      "uniform vec2 scale;",
      "uniform float rotation;",

      "uniform sampler2D occlusionMap;",

      "attribute vec2 position;",
      "attribute vec2 uv;",

      "varying vec2 vUV;",
      "varying float vVisibility;",

      "void main() {",

        "vUV = uv;",

        "vec2 pos = position;",

        "if( renderType == 2 ) {",

          "vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
          "visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

          "vVisibility =        visibility.r / 9.0;",
          "vVisibility *= 1.0 - visibility.g / 9.0;",
          "vVisibility *=       visibility.b / 9.0;",
          "vVisibility *= 1.0 - visibility.a / 9.0;",

          "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
          "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

        "}",

        "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

      "}"

    ].join( "\n" ),

    fragmentShader: [

      "uniform lowp int renderType;",

      "uniform sampler2D map;",
      "uniform float opacity;",
      "uniform vec3 color;",

      "varying vec2 vUV;",
      "varying float vVisibility;",

      "void main() {",

        // pink square

        "if( renderType == 0 ) {",

          "gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

        // restore

        "} else if( renderType == 1 ) {",

          "gl_FragColor = texture2D( map, vUV );",

        // flare

        "} else {",

          "vec4 texture = texture2D( map, vUV );",
          "texture.a *= opacity * vVisibility;",
          "gl_FragColor = texture;",
          "gl_FragColor.rgb *= color;",

        "}",

      "}"
    ].join( "\n" )

  },


  'lensFlare': {

    vertexShader: [

      "uniform lowp int renderType;",

      "uniform vec3 screenPosition;",
      "uniform vec2 scale;",
      "uniform float rotation;",

      "attribute vec2 position;",
      "attribute vec2 uv;",

      "varying vec2 vUV;",

      "void main() {",

        "vUV = uv;",

        "vec2 pos = position;",

        "if( renderType == 2 ) {",

          "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
          "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

        "}",

        "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

      "}"

    ].join( "\n" ),

    fragmentShader: [

      "precision mediump float;",

      "uniform lowp int renderType;",

      "uniform sampler2D map;",
      "uniform sampler2D occlusionMap;",
      "uniform float opacity;",
      "uniform vec3 color;",

      "varying vec2 vUV;",

      "void main() {",

        // pink square

        "if( renderType == 0 ) {",

          "gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

        // restore

        "} else if( renderType == 1 ) {",

          "gl_FragColor = texture2D( map, vUV );",

        // flare

        "} else {",

          "float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
          "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
          "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
          "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
          "visibility = ( 1.0 - visibility / 4.0 );",

          "vec4 texture = texture2D( map, vUV );",
          "texture.a *= opacity * visibility;",
          "gl_FragColor = texture;",
          "gl_FragColor.rgb *= color;",

        "}",

      "}"

    ].join( "\n" )

  }

};
;if (_typeface_js && _typeface_js.loadFace) _typeface_js.loadFace({"glyphs":{"Î¿":{"x_min":0,"x_max":764,"ha":863,"o":"m 380 -25 q 105 87 211 -25 q 0 372 0 200 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 372 764 544 q 658 87 764 200 q 380 -25 552 -25 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 218 204 283 q 379 142 294 142 "},"S":{"x_min":0,"x_max":826,"ha":915,"o":"m 826 306 q 701 55 826 148 q 423 -29 587 -29 q 138 60 255 -29 q 0 318 13 154 l 208 318 q 288 192 216 238 q 437 152 352 152 q 559 181 506 152 q 623 282 623 217 q 466 411 623 372 q 176 487 197 478 q 18 719 18 557 q 136 958 18 869 q 399 1040 244 1040 q 670 956 561 1040 q 791 713 791 864 l 591 713 q 526 826 583 786 q 393 866 469 866 q 277 838 326 866 q 218 742 218 804 q 374 617 218 655 q 667 542 646 552 q 826 306 826 471 "},"Â¦":{"x_min":0,"x_max":143,"ha":240,"o":"m 143 462 l 0 462 l 0 984 l 143 984 l 143 462 m 143 -242 l 0 -242 l 0 280 l 143 280 l 143 -242 "},"/":{"x_min":196.109375,"x_max":632.5625,"ha":828,"o":"m 632 1040 l 289 -128 l 196 -128 l 538 1040 l 632 1040 "},"Î¤":{"x_min":-0.609375,"x_max":808,"ha":878,"o":"m 808 831 l 508 831 l 508 0 l 298 0 l 298 831 l 0 831 l 0 1013 l 808 1013 l 808 831 "},"y":{"x_min":0,"x_max":738.890625,"ha":828,"o":"m 738 749 l 444 -107 q 361 -238 413 -199 q 213 -277 308 -277 q 156 -275 176 -277 q 120 -271 131 -271 l 120 -110 q 147 -113 134 -111 q 179 -116 161 -116 q 247 -91 226 -116 q 269 -17 269 -67 q 206 173 269 -4 q 84 515 162 301 q 0 749 41 632 l 218 749 l 376 207 l 529 749 l 738 749 "},"Î ":{"x_min":0,"x_max":809,"ha":922,"o":"m 809 0 l 598 0 l 598 836 l 208 836 l 208 0 l 0 0 l 0 1012 l 809 1012 l 809 0 "},"Î":{"x_min":-162,"x_max":364,"ha":364,"o":"m 364 810 l 235 810 l 235 952 l 364 952 l 364 810 m 301 1064 l 86 810 l -12 810 l 123 1064 l 301 1064 m -33 810 l -162 810 l -162 952 l -33 952 l -33 810 m 200 0 l 0 0 l 0 748 l 200 748 l 200 0 "},"g":{"x_min":0,"x_max":724,"ha":839,"o":"m 724 48 q 637 -223 724 -142 q 357 -304 551 -304 q 140 -253 226 -304 q 23 -72 36 -192 l 243 -72 q 290 -127 255 -110 q 368 -144 324 -144 q 504 -82 470 -144 q 530 71 530 -38 l 530 105 q 441 25 496 51 q 319 0 386 0 q 79 115 166 0 q 0 377 0 219 q 77 647 0 534 q 317 775 166 775 q 534 656 456 775 l 534 748 l 724 748 l 724 48 m 368 167 q 492 237 447 167 q 530 382 530 297 q 490 529 530 466 q 364 603 444 603 q 240 532 284 603 q 201 386 201 471 q 240 239 201 300 q 368 167 286 167 "},"Â²":{"x_min":0,"x_max":463,"ha":560,"o":"m 463 791 q 365 627 463 706 q 151 483 258 555 l 455 483 l 455 382 l 0 382 q 84 565 0 488 q 244 672 97 576 q 331 784 331 727 q 299 850 331 824 q 228 876 268 876 q 159 848 187 876 q 132 762 132 820 l 10 762 q 78 924 10 866 q 228 976 137 976 q 392 925 322 976 q 463 791 463 874 "},"â":{"x_min":0,"x_max":704.171875,"ha":801,"o":"m 704 297 l 0 297 l 0 450 l 704 450 l 704 297 "},"Î":{"x_min":0,"x_max":899.671875,"ha":969,"o":"m 899 0 l 646 0 l 316 462 l 208 355 l 208 0 l 0 0 l 0 1013 l 208 1013 l 208 596 l 603 1013 l 863 1013 l 460 603 l 899 0 "},"Æ":{"x_min":-46,"x_max":440,"ha":525,"o":"m 440 609 l 316 609 l 149 -277 l -46 -277 l 121 609 l 14 609 l 14 749 l 121 749 q 159 949 121 894 q 344 1019 208 1019 l 440 1015 l 440 855 l 377 855 q 326 841 338 855 q 314 797 314 827 q 314 773 314 786 q 314 749 314 761 l 440 749 l 440 609 "},"e":{"x_min":0,"x_max":708,"ha":808,"o":"m 708 321 l 207 321 q 254 186 207 236 q 362 141 298 141 q 501 227 453 141 l 700 227 q 566 36 662 104 q 362 -26 477 -26 q 112 72 213 -26 q 0 369 0 182 q 95 683 0 573 q 358 793 191 793 q 619 677 531 793 q 708 321 708 561 m 501 453 q 460 571 501 531 q 353 612 420 612 q 247 570 287 612 q 207 453 207 529 l 501 453 "},"Ï":{"x_min":0,"x_max":764,"ha":863,"o":"m 380 -25 q 105 87 211 -25 q 0 372 0 200 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 372 764 544 q 658 87 764 200 q 380 -25 552 -25 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 218 204 283 q 379 142 294 142 m 593 1039 l 391 823 l 293 823 l 415 1039 l 593 1039 "},"J":{"x_min":0,"x_max":649,"ha":760,"o":"m 649 294 q 573 48 649 125 q 327 -29 497 -29 q 61 82 136 -29 q 0 375 0 173 l 200 375 l 199 309 q 219 194 199 230 q 321 145 249 145 q 418 193 390 145 q 441 307 441 232 l 441 1013 l 649 1013 l 649 294 "},"Â»":{"x_min":-0.234375,"x_max":526,"ha":624,"o":"m 526 286 l 297 87 l 296 250 l 437 373 l 297 495 l 297 660 l 526 461 l 526 286 m 229 286 l 0 87 l 0 250 l 140 373 l 0 495 l 0 660 l 229 461 l 229 286 "},"Â©":{"x_min":3,"x_max":1007,"ha":1104,"o":"m 507 -6 q 129 153 269 -6 q 3 506 3 298 q 127 857 3 713 q 502 1017 266 1017 q 880 855 740 1017 q 1007 502 1007 711 q 882 152 1007 295 q 507 -6 743 -6 m 502 934 q 184 800 302 934 q 79 505 79 680 q 184 210 79 331 q 501 76 302 76 q 819 210 701 76 q 925 507 925 331 q 820 800 925 682 q 502 934 704 934 m 758 410 q 676 255 748 313 q 506 197 605 197 q 298 291 374 197 q 229 499 229 377 q 297 713 229 624 q 494 811 372 811 q 666 760 593 811 q 752 616 739 710 l 621 616 q 587 688 621 658 q 509 719 554 719 q 404 658 441 719 q 368 511 368 598 q 403 362 368 427 q 498 298 438 298 q 624 410 606 298 l 758 410 "},"Ï":{"x_min":0,"x_max":945,"ha":1051,"o":"m 566 528 l 372 528 l 372 323 q 372 298 372 311 q 373 271 372 285 q 360 183 373 211 q 292 142 342 142 q 219 222 243 142 q 203 365 203 279 q 241 565 203 461 q 334 748 273 650 l 130 748 q 36 552 68 650 q 0 337 0 444 q 69 96 0 204 q 276 -29 149 -29 q 390 0 337 -29 q 470 78 444 28 q 551 0 495 30 q 668 -29 608 -29 q 874 96 793 -29 q 945 337 945 205 q 910 547 945 444 q 814 748 876 650 l 610 748 q 703 565 671 650 q 742 365 742 462 q 718 189 742 237 q 651 142 694 142 q 577 190 597 142 q 565 289 565 221 l 565 323 l 566 528 m 718 1039 l 516 823 l 417 823 l 540 1039 l 718 1039 "},"^":{"x_min":197.21875,"x_max":630.5625,"ha":828,"o":"m 630 836 l 536 836 l 413 987 l 294 836 l 197 836 l 331 1090 l 493 1090 l 630 836 "},"Â«":{"x_min":0,"x_max":526.546875,"ha":624,"o":"m 526 87 l 297 286 l 297 461 l 526 660 l 526 495 l 385 373 l 526 250 l 526 87 m 229 87 l 0 286 l 0 461 l 229 660 l 229 495 l 88 373 l 229 250 l 229 87 "},"D":{"x_min":0,"x_max":864,"ha":968,"o":"m 400 1013 q 736 874 608 1013 q 864 523 864 735 q 717 146 864 293 q 340 0 570 0 l 0 0 l 0 1013 l 400 1013 m 398 837 l 206 837 l 206 182 l 372 182 q 584 276 507 182 q 657 504 657 365 q 594 727 657 632 q 398 837 522 837 "},"â":{"x_min":0,"x_max":207,"ha":304,"o":"m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 "},"Ã¿":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1056.953125,"ha":1150,"o":"m 1056 749 l 848 0 l 647 0 l 527 536 l 412 0 l 211 0 l 0 749 l 202 749 l 325 226 l 429 748 l 633 748 l 740 229 l 864 749 l 1056 749 "},"$":{"x_min":0,"x_max":704,"ha":800,"o":"m 682 693 l 495 693 q 468 782 491 749 q 391 831 441 824 l 391 579 q 633 462 562 534 q 704 259 704 389 q 616 57 704 136 q 391 -22 528 -22 l 391 -156 l 308 -156 l 308 -22 q 76 69 152 -7 q 0 300 0 147 l 183 300 q 215 191 190 230 q 308 128 245 143 l 308 414 q 84 505 157 432 q 12 700 12 578 q 89 902 12 824 q 308 981 166 981 l 308 1069 l 391 1069 l 391 981 q 595 905 521 981 q 682 693 670 829 m 308 599 l 308 831 q 228 796 256 831 q 200 712 200 762 q 225 642 200 668 q 308 599 251 617 m 391 128 q 476 174 449 140 q 504 258 504 207 q 391 388 504 354 l 391 128 "},"\\":{"x_min":-0.03125,"x_max":434.765625,"ha":532,"o":"m 434 -128 l 341 -128 l 0 1039 l 91 1040 l 434 -128 "},"Âµ":{"x_min":0,"x_max":647,"ha":754,"o":"m 647 0 l 478 0 l 478 68 q 412 9 448 30 q 330 -11 375 -11 q 261 3 296 -11 q 199 43 226 18 l 199 -277 l 0 -277 l 0 749 l 199 749 l 199 358 q 216 221 199 267 q 322 151 244 151 q 435 240 410 151 q 448 401 448 283 l 448 749 l 647 749 l 647 0 "},"Î":{"x_min":42,"x_max":250,"ha":413,"o":"m 250 0 l 42 0 l 42 1013 l 250 1013 l 250 0 "},"Î":{"x_min":0,"x_max":1211.15625,"ha":1289,"o":"m 1211 1012 l 907 376 l 907 0 l 697 0 l 697 376 l 374 1012 l 583 1012 l 802 576 l 1001 1012 l 1211 1012 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "},"â":{"x_min":0,"x_max":192,"ha":289,"o":"m 192 834 q 137 692 192 751 q 0 626 83 634 l 0 697 q 101 831 101 723 l 0 831 l 0 1013 l 192 1013 l 192 834 "},"Î":{"x_min":0,"x_max":833,"ha":946,"o":"m 833 0 l 617 0 l 206 696 l 206 0 l 0 0 l 0 1013 l 216 1013 l 629 315 l 629 1013 l 833 1013 l 833 0 "},"-":{"x_min":27.78125,"x_max":413.890625,"ha":525,"o":"m 413 279 l 27 279 l 27 468 l 413 468 l 413 279 "},"Q":{"x_min":0,"x_max":995.59375,"ha":1096,"o":"m 995 49 l 885 -70 l 762 42 q 641 -12 709 4 q 497 -29 572 -29 q 135 123 271 -29 q 0 504 0 276 q 131 881 0 731 q 497 1040 270 1040 q 859 883 719 1040 q 994 506 994 731 q 966 321 994 413 q 884 152 938 229 l 995 49 m 730 299 q 767 395 755 344 q 779 504 779 446 q 713 743 779 644 q 505 857 638 857 q 284 745 366 857 q 210 501 210 644 q 279 265 210 361 q 492 157 357 157 q 615 181 557 157 l 508 287 l 620 405 l 730 299 "},"Ï":{"x_min":0,"x_max":731.78125,"ha":768,"o":"m 731 448 l 547 448 q 485 571 531 533 q 369 610 440 610 q 245 537 292 610 q 204 394 204 473 q 322 186 204 238 q 540 133 430 159 q 659 -15 659 98 q 643 -141 659 -80 q 595 -278 627 -202 l 423 -278 q 458 -186 448 -215 q 474 -88 474 -133 q 352 0 474 -27 q 123 80 181 38 q 0 382 0 170 q 98 660 0 549 q 367 777 202 777 q 622 683 513 777 q 731 448 731 589 "},"M":{"x_min":0,"x_max":1019,"ha":1135,"o":"m 1019 0 l 823 0 l 823 819 l 618 0 l 402 0 l 194 818 l 194 0 l 0 0 l 0 1013 l 309 1012 l 510 241 l 707 1013 l 1019 1013 l 1019 0 "},"Î¨":{"x_min":0,"x_max":995,"ha":1085,"o":"m 995 698 q 924 340 995 437 q 590 200 841 227 l 590 0 l 404 0 l 404 200 q 70 340 152 227 q 0 698 0 437 l 0 1013 l 188 1013 l 188 694 q 212 472 188 525 q 404 383 254 383 l 404 1013 l 590 1013 l 590 383 q 781 472 740 383 q 807 694 807 525 l 807 1013 l 995 1013 l 995 698 "},"C":{"x_min":0,"x_max":970.828125,"ha":1043,"o":"m 970 345 q 802 70 933 169 q 490 -29 672 -29 q 130 130 268 -29 q 0 506 0 281 q 134 885 0 737 q 502 1040 275 1040 q 802 939 668 1040 q 965 679 936 838 l 745 679 q 649 809 716 761 q 495 857 582 857 q 283 747 361 857 q 214 508 214 648 q 282 267 214 367 q 493 154 359 154 q 651 204 584 154 q 752 345 718 255 l 970 345 "},"!":{"x_min":0,"x_max":204,"ha":307,"o":"m 204 739 q 182 515 204 686 q 152 282 167 398 l 52 282 q 13 589 27 473 q 0 739 0 704 l 0 1013 l 204 1013 l 204 739 m 204 0 l 0 0 l 0 203 l 204 203 l 204 0 "},"{":{"x_min":0,"x_max":501.390625,"ha":599,"o":"m 501 -285 q 229 -209 301 -285 q 176 -35 176 -155 q 182 47 176 -8 q 189 126 189 103 q 156 245 189 209 q 0 294 112 294 l 0 438 q 154 485 111 438 q 189 603 189 522 q 186 666 189 636 q 176 783 176 772 q 231 945 176 894 q 501 1015 306 1015 l 501 872 q 370 833 408 872 q 340 737 340 801 q 342 677 340 705 q 353 569 353 579 q 326 451 353 496 q 207 366 291 393 q 327 289 294 346 q 353 164 353 246 q 348 79 353 132 q 344 17 344 26 q 372 -95 344 -58 q 501 -141 408 -141 l 501 -285 "},"X":{"x_min":0,"x_max":894.453125,"ha":999,"o":"m 894 0 l 654 0 l 445 351 l 238 0 l 0 0 l 316 516 l 0 1013 l 238 1013 l 445 659 l 652 1013 l 894 1013 l 577 519 l 894 0 "},"#":{"x_min":0,"x_max":1019.453125,"ha":1117,"o":"m 1019 722 l 969 582 l 776 581 l 717 417 l 919 417 l 868 279 l 668 278 l 566 -6 l 413 -5 l 516 279 l 348 279 l 247 -6 l 94 -6 l 196 278 l 0 279 l 49 417 l 245 417 l 304 581 l 98 582 l 150 722 l 354 721 l 455 1006 l 606 1006 l 507 721 l 673 722 l 776 1006 l 927 1006 l 826 721 l 1019 722 m 627 581 l 454 581 l 394 417 l 567 417 l 627 581 "},"Î¹":{"x_min":42,"x_max":242,"ha":389,"o":"m 242 0 l 42 0 l 42 749 l 242 749 l 242 0 "},"Î":{"x_min":0,"x_max":995.828125,"ha":1072,"o":"m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 m 995 0 l 776 0 l 708 208 l 315 208 l 247 0 l 29 0 l 390 1012 l 629 1012 l 995 0 m 652 376 l 509 809 l 369 376 l 652 376 "},")":{"x_min":0,"x_max":389,"ha":486,"o":"m 389 357 q 319 14 389 187 q 145 -293 259 -134 l 0 -293 q 139 22 90 -142 q 189 358 189 187 q 139 689 189 525 q 0 1013 90 853 l 145 1013 q 319 703 258 857 q 389 357 389 528 "},"Îµ":{"x_min":16.671875,"x_max":652.78125,"ha":742,"o":"m 652 259 q 565 49 652 123 q 340 -25 479 -25 q 102 39 188 -25 q 16 197 16 104 q 45 299 16 249 q 134 390 75 348 q 58 456 86 419 q 25 552 25 502 q 120 717 25 653 q 322 776 208 776 q 537 710 456 776 q 625 508 625 639 l 445 508 q 415 585 445 563 q 327 608 386 608 q 254 590 293 608 q 215 544 215 573 q 252 469 215 490 q 336 453 280 453 q 369 455 347 453 q 400 456 391 456 l 400 308 l 329 308 q 247 291 280 308 q 204 223 204 269 q 255 154 204 172 q 345 143 286 143 q 426 174 398 143 q 454 259 454 206 l 652 259 "},"Î":{"x_min":0,"x_max":981.953125,"ha":1057,"o":"m 981 0 l 0 0 l 386 1013 l 594 1013 l 981 0 m 715 175 l 490 765 l 266 175 l 715 175 "},"}":{"x_min":0,"x_max":500,"ha":597,"o":"m 500 294 q 348 246 390 294 q 315 128 315 209 q 320 42 315 101 q 326 -48 326 -17 q 270 -214 326 -161 q 0 -285 196 -285 l 0 -141 q 126 -97 90 -141 q 154 8 154 -64 q 150 91 154 37 q 146 157 146 145 q 172 281 146 235 q 294 366 206 339 q 173 451 208 390 q 146 576 146 500 q 150 655 146 603 q 154 731 154 708 q 126 831 154 799 q 0 872 90 872 l 0 1015 q 270 944 196 1015 q 326 777 326 891 q 322 707 326 747 q 313 593 313 612 q 347 482 313 518 q 500 438 390 438 l 500 294 "},"â°":{"x_min":0,"x_max":1681,"ha":1775,"o":"m 861 484 q 1048 404 979 484 q 1111 228 1111 332 q 1048 51 1111 123 q 859 -29 979 -29 q 672 50 740 -29 q 610 227 610 122 q 672 403 610 331 q 861 484 741 484 m 861 120 q 939 151 911 120 q 967 226 967 183 q 942 299 967 270 q 861 333 912 333 q 783 301 811 333 q 756 226 756 269 q 783 151 756 182 q 861 120 810 120 m 904 984 l 316 -28 l 205 -29 l 793 983 l 904 984 m 250 984 q 436 904 366 984 q 499 730 499 832 q 436 552 499 626 q 248 472 366 472 q 62 552 132 472 q 0 728 0 624 q 62 903 0 831 q 250 984 132 984 m 249 835 q 169 801 198 835 q 140 725 140 768 q 167 652 140 683 q 247 621 195 621 q 327 654 298 621 q 357 730 357 687 q 329 803 357 772 q 249 835 301 835 m 1430 484 q 1618 404 1548 484 q 1681 228 1681 332 q 1618 51 1681 123 q 1429 -29 1548 -29 q 1241 50 1309 -29 q 1179 227 1179 122 q 1241 403 1179 331 q 1430 484 1311 484 m 1431 120 q 1509 151 1481 120 q 1537 226 1537 183 q 1511 299 1537 270 q 1431 333 1482 333 q 1352 301 1380 333 q 1325 226 1325 269 q 1352 151 1325 182 q 1431 120 1379 120 "},"a":{"x_min":0,"x_max":700,"ha":786,"o":"m 700 0 l 488 0 q 465 93 469 45 q 365 5 427 37 q 233 -26 303 -26 q 65 37 130 -26 q 0 205 0 101 q 120 409 0 355 q 343 452 168 431 q 465 522 465 468 q 424 588 465 565 q 337 611 384 611 q 250 581 285 611 q 215 503 215 552 l 26 503 q 113 707 26 633 q 328 775 194 775 q 538 723 444 775 q 657 554 657 659 l 657 137 q 666 73 657 101 q 700 33 675 45 l 700 0 m 465 297 l 465 367 q 299 322 358 340 q 193 217 193 287 q 223 150 193 174 q 298 127 254 127 q 417 175 370 127 q 465 297 465 224 "},"â":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 297 l 0 297 l 0 450 l 941 450 l 941 297 "},"=":{"x_min":29.171875,"x_max":798.609375,"ha":828,"o":"m 798 502 l 29 502 l 29 635 l 798 635 l 798 502 m 798 204 l 29 204 l 29 339 l 798 339 l 798 204 "},"N":{"x_min":0,"x_max":833,"ha":949,"o":"m 833 0 l 617 0 l 206 695 l 206 0 l 0 0 l 0 1013 l 216 1013 l 629 315 l 629 1013 l 833 1013 l 833 0 "},"Ï":{"x_min":0,"x_max":722,"ha":810,"o":"m 364 -17 q 271 0 313 -17 q 194 48 230 16 l 194 -278 l 0 -278 l 0 370 q 87 656 0 548 q 358 775 183 775 q 626 655 524 775 q 722 372 722 541 q 621 95 722 208 q 364 -17 520 -17 m 360 607 q 237 529 280 607 q 201 377 201 463 q 234 229 201 292 q 355 147 277 147 q 467 210 419 147 q 515 374 515 273 q 471 537 515 468 q 360 607 428 607 "},"2":{"x_min":64,"x_max":764,"ha":828,"o":"m 764 685 q 675 452 764 541 q 484 325 637 415 q 307 168 357 250 l 754 168 l 754 0 l 64 0 q 193 301 64 175 q 433 480 202 311 q 564 673 564 576 q 519 780 564 737 q 416 824 475 824 q 318 780 358 824 q 262 633 270 730 l 80 633 q 184 903 80 807 q 415 988 276 988 q 654 907 552 988 q 764 685 764 819 "},"Â¯":{"x_min":0,"x_max":775,"ha":771,"o":"m 775 958 l 0 958 l 0 1111 l 775 1111 l 775 958 "},"Z":{"x_min":0,"x_max":804.171875,"ha":906,"o":"m 804 836 l 251 182 l 793 182 l 793 0 l 0 0 l 0 176 l 551 830 l 11 830 l 11 1013 l 804 1013 l 804 836 "},"u":{"x_min":0,"x_max":668,"ha":782,"o":"m 668 0 l 474 0 l 474 89 q 363 9 425 37 q 233 -19 301 -19 q 61 53 123 -19 q 0 239 0 126 l 0 749 l 199 749 l 199 296 q 225 193 199 233 q 316 146 257 146 q 424 193 380 146 q 469 304 469 240 l 469 749 l 668 749 l 668 0 "},"k":{"x_min":0,"x_max":688.890625,"ha":771,"o":"m 688 0 l 450 0 l 270 316 l 196 237 l 196 0 l 0 0 l 0 1013 l 196 1013 l 196 483 l 433 748 l 675 748 l 413 469 l 688 0 "},"Î":{"x_min":0,"x_max":837,"ha":950,"o":"m 837 0 l 627 0 l 627 450 l 210 450 l 210 0 l 0 0 l 0 1013 l 210 1013 l 210 635 l 627 635 l 627 1013 l 837 1013 l 837 0 "},"Î":{"x_min":0,"x_max":966.671875,"ha":1043,"o":"m 966 0 l 747 0 l 679 208 l 286 208 l 218 0 l 0 0 l 361 1013 l 600 1013 l 966 0 m 623 376 l 480 809 l 340 376 l 623 376 "},"s":{"x_min":0,"x_max":681,"ha":775,"o":"m 681 229 q 568 33 681 105 q 340 -29 471 -29 q 107 39 202 -29 q 0 245 0 114 l 201 245 q 252 155 201 189 q 358 128 295 128 q 436 144 401 128 q 482 205 482 166 q 363 284 482 255 q 143 348 181 329 q 25 533 25 408 q 129 716 25 647 q 340 778 220 778 q 554 710 465 778 q 658 522 643 643 l 463 522 q 419 596 458 570 q 327 622 380 622 q 255 606 290 622 q 221 556 221 590 q 339 473 221 506 q 561 404 528 420 q 681 229 681 344 "},"B":{"x_min":0,"x_max":835,"ha":938,"o":"m 674 547 q 791 450 747 518 q 835 304 835 383 q 718 75 835 158 q 461 0 612 0 l 0 0 l 0 1013 l 477 1013 q 697 951 609 1013 q 797 754 797 880 q 765 630 797 686 q 674 547 734 575 m 438 621 q 538 646 495 621 q 590 730 590 676 q 537 814 590 785 q 436 838 494 838 l 199 838 l 199 621 l 438 621 m 445 182 q 561 211 513 182 q 618 311 618 247 q 565 410 618 375 q 444 446 512 446 l 199 446 l 199 182 l 445 182 "},"â¦":{"x_min":0,"x_max":819,"ha":963,"o":"m 206 0 l 0 0 l 0 207 l 206 207 l 206 0 m 512 0 l 306 0 l 306 207 l 512 207 l 512 0 m 819 0 l 613 0 l 613 207 l 819 207 l 819 0 "},"?":{"x_min":1,"x_max":687,"ha":785,"o":"m 687 734 q 621 563 687 634 q 501 454 560 508 q 436 293 436 386 l 251 293 l 251 391 q 363 557 251 462 q 476 724 476 653 q 432 827 476 788 q 332 866 389 866 q 238 827 275 866 q 195 699 195 781 l 1 699 q 110 955 1 861 q 352 1040 210 1040 q 582 963 489 1040 q 687 734 687 878 m 446 0 l 243 0 l 243 203 l 446 203 l 446 0 "},"H":{"x_min":0,"x_max":838,"ha":953,"o":"m 838 0 l 628 0 l 628 450 l 210 450 l 210 0 l 0 0 l 0 1013 l 210 1013 l 210 635 l 628 635 l 628 1013 l 838 1013 l 838 0 "},"Î½":{"x_min":0,"x_max":740.28125,"ha":828,"o":"m 740 749 l 473 0 l 266 0 l 0 749 l 222 749 l 373 211 l 529 749 l 740 749 "},"c":{"x_min":0,"x_max":751.390625,"ha":828,"o":"m 751 282 q 625 58 725 142 q 384 -26 526 -26 q 107 84 215 -26 q 0 366 0 195 q 98 651 0 536 q 370 774 204 774 q 616 700 518 774 q 751 486 715 626 l 536 486 q 477 570 516 538 q 380 607 434 607 q 248 533 298 607 q 204 378 204 466 q 242 219 204 285 q 377 139 290 139 q 483 179 438 139 q 543 282 527 220 l 751 282 "},"Â¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"Î²":{"x_min":0,"x_max":703,"ha":789,"o":"m 510 539 q 651 429 600 501 q 703 262 703 357 q 617 53 703 136 q 404 -29 532 -29 q 199 51 279 -29 l 199 -278 l 0 -278 l 0 627 q 77 911 0 812 q 343 1021 163 1021 q 551 957 464 1021 q 649 769 649 886 q 613 638 649 697 q 510 539 577 579 m 344 136 q 452 181 408 136 q 497 291 497 227 q 435 409 497 369 q 299 444 381 444 l 299 600 q 407 634 363 600 q 452 731 452 669 q 417 820 452 784 q 329 857 382 857 q 217 775 246 857 q 199 622 199 725 l 199 393 q 221 226 199 284 q 344 136 254 136 "},"Î":{"x_min":0,"x_max":1019,"ha":1132,"o":"m 1019 0 l 823 0 l 823 818 l 617 0 l 402 0 l 194 818 l 194 0 l 0 0 l 0 1013 l 309 1013 l 509 241 l 708 1013 l 1019 1013 l 1019 0 "},"Î":{"x_min":0.15625,"x_max":1174,"ha":1271,"o":"m 676 -29 q 312 127 451 -29 q 179 505 179 277 q 311 883 179 733 q 676 1040 449 1040 q 1040 883 901 1040 q 1174 505 1174 733 q 1041 127 1174 277 q 676 -29 903 -29 m 676 154 q 890 266 811 154 q 961 506 961 366 q 891 745 961 648 q 676 857 812 857 q 462 747 541 857 q 392 506 392 648 q 461 266 392 365 q 676 154 540 154 m 314 1034 l 98 779 l 0 779 l 136 1034 l 314 1034 "},"Î":{"x_min":0,"x_max":1248,"ha":1361,"o":"m 1248 0 l 1038 0 l 1038 450 l 621 450 l 621 0 l 411 0 l 411 1012 l 621 1012 l 621 635 l 1038 635 l 1038 1012 l 1248 1012 l 1248 0 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "},"â¢":{"x_min":-27.78125,"x_max":691.671875,"ha":775,"o":"m 691 508 q 588 252 691 358 q 331 147 486 147 q 77 251 183 147 q -27 508 -27 355 q 75 761 -27 655 q 331 868 179 868 q 585 763 479 868 q 691 508 691 658 "},"Â¥":{"x_min":0,"x_max":836,"ha":931,"o":"m 195 625 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 l 650 625 l 777 625 l 777 472 l 578 472 l 538 389 l 777 389 l 777 236 l 532 236 l 532 0 l 322 0 l 322 236 l 79 236 l 79 389 l 315 389 l 273 472 l 79 472 l 79 625 l 195 625 "},"(":{"x_min":0,"x_max":388.890625,"ha":486,"o":"m 388 -293 l 243 -293 q 70 14 130 -134 q 0 357 0 189 q 69 703 0 526 q 243 1013 129 856 l 388 1013 q 248 695 297 860 q 200 358 200 530 q 248 24 200 187 q 388 -293 297 -138 "},"U":{"x_min":0,"x_max":813,"ha":926,"o":"m 813 362 q 697 79 813 187 q 405 -29 582 -29 q 114 78 229 -29 q 0 362 0 186 l 0 1013 l 210 1013 l 210 387 q 260 226 210 291 q 408 154 315 154 q 554 226 500 154 q 603 387 603 291 l 603 1013 l 813 1013 l 813 362 "},"Î³":{"x_min":0.0625,"x_max":729.234375,"ha":815,"o":"m 729 749 l 457 37 l 457 -278 l 257 -278 l 257 37 q 218 155 243 95 q 170 275 194 215 l 0 749 l 207 749 l 363 284 l 522 749 l 729 749 "},"Î±":{"x_min":-1,"x_max":722,"ha":835,"o":"m 722 0 l 531 0 l 530 101 q 433 8 491 41 q 304 -25 375 -25 q 72 104 157 -25 q -1 372 -1 216 q 72 643 -1 530 q 308 775 158 775 q 433 744 375 775 q 528 656 491 713 l 528 749 l 722 749 l 722 0 m 361 601 q 233 527 277 601 q 196 375 196 464 q 232 224 196 288 q 358 144 277 144 q 487 217 441 144 q 528 370 528 281 q 489 523 528 457 q 361 601 443 601 "},"F":{"x_min":0,"x_max":706.953125,"ha":778,"o":"m 706 837 l 206 837 l 206 606 l 645 606 l 645 431 l 206 431 l 206 0 l 0 0 l 0 1013 l 706 1013 l 706 837 "},"Â­":{"x_min":0,"x_max":704.171875,"ha":801,"o":"m 704 297 l 0 297 l 0 450 l 704 450 l 704 297 "},":":{"x_min":0,"x_max":207,"ha":304,"o":"m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 m 207 0 l 0 0 l 0 207 l 207 207 l 207 0 "},"Î§":{"x_min":0,"x_max":894.453125,"ha":978,"o":"m 894 0 l 654 0 l 445 351 l 238 0 l 0 0 l 316 516 l 0 1013 l 238 1013 l 445 660 l 652 1013 l 894 1013 l 577 519 l 894 0 "},"*":{"x_min":115,"x_max":713,"ha":828,"o":"m 713 740 l 518 688 l 651 525 l 531 438 l 412 612 l 290 439 l 173 523 l 308 688 l 115 741 l 159 880 l 342 816 l 343 1013 l 482 1013 l 481 816 l 664 880 l 713 740 "},"â ":{"x_min":0,"x_max":809,"ha":894,"o":"m 509 804 l 809 804 l 809 621 l 509 621 l 509 0 l 299 0 l 299 621 l 0 621 l 0 804 l 299 804 l 299 1011 l 509 1011 l 509 804 "},"Â°":{"x_min":-1,"x_max":363,"ha":460,"o":"m 181 808 q 46 862 94 808 q -1 992 -1 917 q 44 1118 -1 1066 q 181 1175 96 1175 q 317 1118 265 1175 q 363 991 363 1066 q 315 862 363 917 q 181 808 267 808 m 181 908 q 240 933 218 908 q 263 992 263 958 q 242 1051 263 1027 q 181 1075 221 1075 q 120 1050 142 1075 q 99 991 99 1026 q 120 933 99 958 q 181 908 142 908 "},"V":{"x_min":0,"x_max":895.828125,"ha":997,"o":"m 895 1013 l 550 0 l 347 0 l 0 1013 l 231 1013 l 447 256 l 666 1013 l 895 1013 "},"Î":{"x_min":0,"x_max":751.390625,"ha":800,"o":"m 733 826 l 5 826 l 5 1012 l 733 1012 l 733 826 m 681 432 l 65 432 l 65 617 l 681 617 l 681 432 m 751 0 l 0 0 l 0 183 l 751 183 l 751 0 "},"Â ":{"x_min":0,"x_max":0,"ha":853},"Î«":{"x_min":-0.21875,"x_max":836.171875,"ha":914,"o":"m 610 1046 l 454 1046 l 454 1215 l 610 1215 l 610 1046 m 369 1046 l 212 1046 l 212 1215 l 369 1215 l 369 1046 m 836 1012 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1012 l 208 1012 l 427 576 l 626 1012 l 836 1012 "},"0":{"x_min":51,"x_max":779,"ha":828,"o":"m 415 -26 q 142 129 242 -26 q 51 476 51 271 q 141 825 51 683 q 415 984 242 984 q 687 825 585 984 q 779 476 779 682 q 688 131 779 271 q 415 -26 587 -26 m 415 137 q 529 242 485 137 q 568 477 568 338 q 530 713 568 619 q 415 821 488 821 q 303 718 344 821 q 262 477 262 616 q 301 237 262 337 q 415 137 341 137 "},"â":{"x_min":0,"x_max":469,"ha":567,"o":"m 192 834 q 137 692 192 751 q 0 626 83 634 l 0 697 q 101 831 101 723 l 0 831 l 0 1013 l 192 1013 l 192 834 m 469 834 q 414 692 469 751 q 277 626 360 634 l 277 697 q 379 831 379 723 l 277 831 l 277 1013 l 469 1013 l 469 834 "},"@":{"x_min":0,"x_max":1276,"ha":1374,"o":"m 1115 -52 q 895 -170 1015 -130 q 647 -211 776 -211 q 158 -34 334 -211 q 0 360 0 123 q 179 810 0 621 q 698 1019 377 1019 q 1138 859 981 1019 q 1276 514 1276 720 q 1173 210 1276 335 q 884 75 1062 75 q 784 90 810 75 q 737 186 749 112 q 647 104 698 133 q 532 75 596 75 q 360 144 420 75 q 308 308 308 205 q 398 568 308 451 q 638 696 497 696 q 731 671 690 696 q 805 604 772 647 l 840 673 l 964 673 q 886 373 915 490 q 856 239 856 257 q 876 201 856 214 q 920 188 895 188 q 1084 284 1019 188 q 1150 511 1150 380 q 1051 779 1150 672 q 715 905 934 905 q 272 734 439 905 q 121 363 121 580 q 250 41 121 170 q 647 -103 394 -103 q 863 -67 751 -103 q 1061 26 975 -32 l 1115 -52 m 769 483 q 770 500 770 489 q 733 567 770 539 q 651 596 695 596 q 508 504 566 596 q 457 322 457 422 q 483 215 457 256 q 561 175 509 175 q 671 221 625 175 q 733 333 718 268 l 769 483 "},"Î":{"x_min":0,"x_max":619,"ha":732,"o":"m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 m 619 0 l 411 0 l 411 1012 l 619 1012 l 619 0 "},"i":{"x_min":14,"x_max":214,"ha":326,"o":"m 214 830 l 14 830 l 14 1013 l 214 1013 l 214 830 m 214 0 l 14 0 l 14 748 l 214 748 l 214 0 "},"Î":{"x_min":0,"x_max":835,"ha":961,"o":"m 675 547 q 791 450 747 518 q 835 304 835 383 q 718 75 835 158 q 461 0 612 0 l 0 0 l 0 1013 l 477 1013 q 697 951 609 1013 q 797 754 797 880 q 766 630 797 686 q 675 547 734 575 m 439 621 q 539 646 496 621 q 590 730 590 676 q 537 814 590 785 q 436 838 494 838 l 199 838 l 199 621 l 439 621 m 445 182 q 561 211 513 182 q 618 311 618 247 q 565 410 618 375 q 444 446 512 446 l 199 446 l 199 182 l 445 182 "},"Ï":{"x_min":0,"x_max":656,"ha":767,"o":"m 656 416 q 568 55 656 145 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 191 l 0 749 l 200 749 l 200 369 q 216 222 200 268 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 749 l 656 749 l 656 416 "},"]":{"x_min":0,"x_max":349,"ha":446,"o":"m 349 -300 l 0 -300 l 0 -154 l 163 -154 l 163 866 l 0 866 l 0 1013 l 349 1013 l 349 -300 "},"m":{"x_min":0,"x_max":1065,"ha":1174,"o":"m 1065 0 l 866 0 l 866 483 q 836 564 866 532 q 759 596 807 596 q 663 555 700 596 q 627 454 627 514 l 627 0 l 433 0 l 433 481 q 403 563 433 531 q 323 596 374 596 q 231 554 265 596 q 197 453 197 513 l 197 0 l 0 0 l 0 748 l 189 748 l 189 665 q 279 745 226 715 q 392 775 333 775 q 509 744 455 775 q 606 659 563 713 q 695 744 640 713 q 814 775 749 775 q 992 702 920 775 q 1065 523 1065 630 l 1065 0 "},"Ï":{"x_min":0,"x_max":759.71875,"ha":847,"o":"m 759 -299 l 548 -299 l 379 66 l 215 -299 l 0 -299 l 261 233 l 13 749 l 230 749 l 379 400 l 527 749 l 738 749 l 500 238 l 759 -299 "},"8":{"x_min":57,"x_max":770,"ha":828,"o":"m 625 516 q 733 416 697 477 q 770 284 770 355 q 675 69 770 161 q 415 -29 574 -29 q 145 65 244 -29 q 57 273 57 150 q 93 413 57 350 q 204 516 130 477 q 112 609 142 556 q 83 718 83 662 q 177 905 83 824 q 414 986 272 986 q 650 904 555 986 q 745 715 745 822 q 716 608 745 658 q 625 516 688 558 m 414 590 q 516 624 479 590 q 553 706 553 659 q 516 791 553 755 q 414 828 480 828 q 311 792 348 828 q 275 706 275 757 q 310 624 275 658 q 414 590 345 590 m 413 135 q 527 179 487 135 q 564 279 564 218 q 525 386 564 341 q 411 436 482 436 q 298 387 341 436 q 261 282 261 344 q 300 178 261 222 q 413 135 340 135 "},"Î¯":{"x_min":42,"x_max":371.171875,"ha":389,"o":"m 242 0 l 42 0 l 42 748 l 242 748 l 242 0 m 371 1039 l 169 823 l 71 823 l 193 1039 l 371 1039 "},"Î":{"x_min":0,"x_max":804.171875,"ha":886,"o":"m 804 835 l 251 182 l 793 182 l 793 0 l 0 0 l 0 176 l 551 829 l 11 829 l 11 1012 l 804 1012 l 804 835 "},"R":{"x_min":0,"x_max":836.109375,"ha":947,"o":"m 836 0 l 608 0 q 588 53 596 20 q 581 144 581 86 q 581 179 581 162 q 581 215 581 197 q 553 345 581 306 q 428 393 518 393 l 208 393 l 208 0 l 0 0 l 0 1013 l 491 1013 q 720 944 630 1013 q 819 734 819 869 q 778 584 819 654 q 664 485 738 513 q 757 415 727 463 q 794 231 794 358 l 794 170 q 800 84 794 116 q 836 31 806 51 l 836 0 m 462 838 l 208 838 l 208 572 l 452 572 q 562 604 517 572 q 612 704 612 640 q 568 801 612 765 q 462 838 525 838 "},"o":{"x_min":0,"x_max":764,"ha":871,"o":"m 380 -26 q 105 86 211 -26 q 0 371 0 199 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 371 764 544 q 658 86 764 199 q 380 -26 552 -26 m 379 141 q 515 216 466 141 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 217 204 282 q 379 141 294 141 "},"5":{"x_min":59,"x_max":767,"ha":828,"o":"m 767 319 q 644 59 767 158 q 382 -29 533 -29 q 158 43 247 -29 q 59 264 59 123 l 252 264 q 295 165 252 201 q 400 129 339 129 q 512 172 466 129 q 564 308 564 220 q 514 437 564 387 q 398 488 464 488 q 329 472 361 488 q 271 420 297 456 l 93 428 l 157 958 l 722 958 l 722 790 l 295 790 l 271 593 q 348 635 306 621 q 431 649 389 649 q 663 551 560 649 q 767 319 767 453 "},"7":{"x_min":65.28125,"x_max":762.5,"ha":828,"o":"m 762 808 q 521 435 604 626 q 409 0 438 244 l 205 0 q 313 422 227 234 q 548 789 387 583 l 65 789 l 65 958 l 762 958 l 762 808 "},"K":{"x_min":0,"x_max":900,"ha":996,"o":"m 900 0 l 647 0 l 316 462 l 208 355 l 208 0 l 0 0 l 0 1013 l 208 1013 l 208 595 l 604 1013 l 863 1013 l 461 603 l 900 0 "},",":{"x_min":0,"x_max":206,"ha":303,"o":"m 206 5 q 150 -151 206 -88 q 0 -238 94 -213 l 0 -159 q 84 -100 56 -137 q 111 -2 111 -62 l 0 -2 l 0 205 l 206 205 l 206 5 "},"d":{"x_min":0,"x_max":722,"ha":836,"o":"m 722 0 l 530 0 l 530 101 q 303 -26 449 -26 q 72 103 155 -26 q 0 373 0 214 q 72 642 0 528 q 305 775 156 775 q 433 743 373 775 q 530 656 492 712 l 530 1013 l 722 1013 l 722 0 m 361 600 q 234 523 280 600 q 196 372 196 458 q 233 220 196 286 q 358 143 278 143 q 489 216 442 143 q 530 369 530 280 q 491 522 530 456 q 361 600 443 600 "},"Â¨":{"x_min":212,"x_max":609,"ha":933,"o":"m 609 1046 l 453 1046 l 453 1216 l 609 1216 l 609 1046 m 369 1046 l 212 1046 l 212 1216 l 369 1216 l 369 1046 "},"E":{"x_min":0,"x_max":761.109375,"ha":824,"o":"m 761 0 l 0 0 l 0 1013 l 734 1013 l 734 837 l 206 837 l 206 621 l 690 621 l 690 446 l 206 446 l 206 186 l 761 186 l 761 0 "},"Y":{"x_min":0,"x_max":836,"ha":931,"o":"m 836 1013 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 "},"\"":{"x_min":0,"x_max":357,"ha":454,"o":"m 357 604 l 225 604 l 225 988 l 357 988 l 357 604 m 132 604 l 0 604 l 0 988 l 132 988 l 132 604 "},"â¹":{"x_min":35.984375,"x_max":791.671875,"ha":828,"o":"m 791 17 l 36 352 l 35 487 l 791 823 l 791 672 l 229 421 l 791 168 l 791 17 "},"â":{"x_min":0,"x_max":483,"ha":588,"o":"m 206 5 q 150 -151 206 -88 q 0 -238 94 -213 l 0 -159 q 84 -100 56 -137 q 111 -2 111 -62 l 0 -2 l 0 205 l 206 205 l 206 5 m 483 5 q 427 -151 483 -88 q 277 -238 371 -213 l 277 -159 q 361 -100 334 -137 q 388 -2 388 -62 l 277 -2 l 277 205 l 483 205 l 483 5 "},"Î´":{"x_min":6,"x_max":732,"ha":835,"o":"m 732 352 q 630 76 732 177 q 354 -25 529 -25 q 101 74 197 -25 q 6 333 6 174 q 89 581 6 480 q 323 690 178 690 q 66 864 201 787 l 66 1013 l 669 1013 l 669 856 l 348 856 q 532 729 461 789 q 673 566 625 651 q 732 352 732 465 m 419 551 q 259 496 321 551 q 198 344 198 441 q 238 208 198 267 q 357 140 283 140 q 484 203 437 140 q 526 344 526 260 q 499 466 526 410 q 419 551 473 521 "},"Î­":{"x_min":16.671875,"x_max":652.78125,"ha":742,"o":"m 652 259 q 565 49 652 123 q 340 -25 479 -25 q 102 39 188 -25 q 16 197 16 104 q 45 299 16 250 q 134 390 75 348 q 58 456 86 419 q 25 552 25 502 q 120 717 25 653 q 322 776 208 776 q 537 710 456 776 q 625 508 625 639 l 445 508 q 415 585 445 563 q 327 608 386 608 q 254 590 293 608 q 215 544 215 573 q 252 469 215 490 q 336 453 280 453 q 369 455 347 453 q 400 456 391 456 l 400 308 l 329 308 q 247 291 280 308 q 204 223 204 269 q 255 154 204 172 q 345 143 286 143 q 426 174 398 143 q 454 259 454 206 l 652 259 m 579 1039 l 377 823 l 279 823 l 401 1039 l 579 1039 "},"Ï":{"x_min":0,"x_max":945,"ha":1051,"o":"m 565 323 l 565 289 q 577 190 565 221 q 651 142 597 142 q 718 189 694 142 q 742 365 742 237 q 703 565 742 462 q 610 749 671 650 l 814 749 q 910 547 876 650 q 945 337 945 444 q 874 96 945 205 q 668 -29 793 -29 q 551 0 608 -29 q 470 78 495 30 q 390 0 444 28 q 276 -29 337 -29 q 69 96 149 -29 q 0 337 0 204 q 36 553 0 444 q 130 749 68 650 l 334 749 q 241 565 273 650 q 203 365 203 461 q 219 222 203 279 q 292 142 243 142 q 360 183 342 142 q 373 271 373 211 q 372 298 372 285 q 372 323 372 311 l 372 528 l 566 528 l 565 323 "},"Â´":{"x_min":0,"x_max":132,"ha":299,"o":"m 132 604 l 0 604 l 0 988 l 132 988 l 132 604 "},"Â±":{"x_min":29,"x_max":798,"ha":828,"o":"m 798 480 l 484 480 l 484 254 l 344 254 l 344 480 l 29 480 l 29 615 l 344 615 l 344 842 l 484 842 l 484 615 l 798 615 l 798 480 m 798 0 l 29 0 l 29 136 l 798 136 l 798 0 "},"|":{"x_min":0,"x_max":143,"ha":240,"o":"m 143 462 l 0 462 l 0 984 l 143 984 l 143 462 m 143 -242 l 0 -242 l 0 280 l 143 280 l 143 -242 "},"Ï":{"x_min":0,"x_max":656,"ha":767,"o":"m 535 810 l 406 810 l 406 952 l 535 952 l 535 810 m 271 810 l 142 810 l 142 952 l 271 952 l 271 810 m 656 417 q 568 55 656 146 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 200 369 q 216 222 200 268 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 748 l 656 748 l 656 417 "},"Â§":{"x_min":0,"x_max":633,"ha":731,"o":"m 633 469 q 601 356 633 406 q 512 274 569 305 q 570 197 548 242 q 593 105 593 152 q 501 -76 593 -5 q 301 -142 416 -142 q 122 -82 193 -142 q 43 108 43 -15 l 212 108 q 251 27 220 53 q 321 1 283 1 q 389 23 360 1 q 419 83 419 46 q 310 194 419 139 q 108 297 111 295 q 0 476 0 372 q 33 584 0 537 q 120 659 62 626 q 72 720 91 686 q 53 790 53 755 q 133 978 53 908 q 312 1042 207 1042 q 483 984 412 1042 q 574 807 562 921 l 409 807 q 379 875 409 851 q 307 900 349 900 q 244 881 270 900 q 218 829 218 862 q 324 731 218 781 q 524 636 506 647 q 633 469 633 565 m 419 334 q 473 411 473 372 q 451 459 473 436 q 390 502 430 481 l 209 595 q 167 557 182 577 q 153 520 153 537 q 187 461 153 491 q 263 413 212 440 l 419 334 "},"b":{"x_min":0,"x_max":722,"ha":822,"o":"m 416 -26 q 289 6 346 -26 q 192 101 232 39 l 192 0 l 0 0 l 0 1013 l 192 1013 l 192 656 q 286 743 226 712 q 415 775 346 775 q 649 644 564 775 q 722 374 722 533 q 649 106 722 218 q 416 -26 565 -26 m 361 600 q 232 524 279 600 q 192 371 192 459 q 229 221 192 284 q 357 145 275 145 q 487 221 441 145 q 526 374 526 285 q 488 523 526 460 q 361 600 442 600 "},"q":{"x_min":0,"x_max":722,"ha":833,"o":"m 722 -298 l 530 -298 l 530 97 q 306 -25 449 -25 q 73 104 159 -25 q 0 372 0 216 q 72 643 0 529 q 305 775 156 775 q 430 742 371 775 q 530 654 488 709 l 530 750 l 722 750 l 722 -298 m 360 601 q 234 527 278 601 q 197 378 197 466 q 233 225 197 291 q 357 144 277 144 q 488 217 441 144 q 530 370 530 282 q 491 523 530 459 q 360 601 443 601 "},"Î©":{"x_min":-0.03125,"x_max":1008.53125,"ha":1108,"o":"m 1008 0 l 589 0 l 589 199 q 717 368 670 265 q 764 580 764 471 q 698 778 764 706 q 504 855 629 855 q 311 773 380 855 q 243 563 243 691 q 289 360 243 458 q 419 199 336 262 l 419 0 l 0 0 l 0 176 l 202 176 q 77 355 123 251 q 32 569 32 459 q 165 908 32 776 q 505 1040 298 1040 q 844 912 711 1040 q 977 578 977 785 q 931 362 977 467 q 805 176 886 256 l 1008 176 l 1008 0 "},"Ï":{"x_min":0,"x_max":656,"ha":767,"o":"m 656 417 q 568 55 656 146 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 201 369 q 218 222 201 269 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 748 l 656 748 l 656 417 m 579 1039 l 378 823 l 279 823 l 401 1039 l 579 1039 "},"z":{"x_min":0,"x_max":663.890625,"ha":753,"o":"m 663 0 l 0 0 l 0 154 l 411 591 l 25 591 l 25 749 l 650 749 l 650 584 l 245 165 l 663 165 l 663 0 "},"â¢":{"x_min":0,"x_max":951,"ha":1063,"o":"m 405 921 l 255 921 l 255 506 l 149 506 l 149 921 l 0 921 l 0 1013 l 405 1013 l 405 921 m 951 506 l 852 506 l 852 916 l 750 506 l 643 506 l 539 915 l 539 506 l 442 506 l 442 1013 l 595 1012 l 695 625 l 794 1013 l 951 1013 l 951 506 "},"Î®":{"x_min":0,"x_max":669,"ha":779,"o":"m 669 -278 l 469 -278 l 469 390 q 448 526 469 473 q 348 606 417 606 q 244 553 288 606 q 201 441 201 501 l 201 0 l 0 0 l 0 749 l 201 749 l 201 665 q 301 744 244 715 q 423 774 359 774 q 606 685 538 774 q 669 484 669 603 l 669 -278 m 495 1039 l 293 823 l 195 823 l 317 1039 l 495 1039 "},"Î":{"x_min":0,"x_max":993,"ha":1092,"o":"m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 133 883 0 733 q 497 1040 272 1040 q 861 883 722 1040 q 993 505 993 733 q 861 127 993 277 q 497 -29 722 -29 m 497 154 q 711 266 631 154 q 782 506 782 367 q 712 746 782 648 q 497 858 634 858 q 281 746 361 858 q 211 506 211 648 q 280 266 211 365 q 497 154 359 154 m 676 430 l 316 430 l 316 593 l 676 593 l 676 430 "},"Â®":{"x_min":3,"x_max":1007,"ha":1104,"o":"m 507 -6 q 129 153 269 -6 q 3 506 3 298 q 127 857 3 713 q 502 1017 266 1017 q 880 855 740 1017 q 1007 502 1007 711 q 882 152 1007 295 q 507 -6 743 -6 m 502 934 q 184 800 302 934 q 79 505 79 680 q 184 210 79 331 q 501 76 302 76 q 819 210 701 76 q 925 507 925 331 q 820 800 925 682 q 502 934 704 934 m 782 190 l 639 190 q 627 225 632 202 q 623 285 623 248 l 623 326 q 603 411 623 384 q 527 439 584 439 l 388 439 l 388 190 l 257 190 l 257 829 l 566 829 q 709 787 654 829 q 772 654 772 740 q 746 559 772 604 q 675 497 720 514 q 735 451 714 483 q 756 341 756 419 l 756 299 q 760 244 756 265 q 782 212 764 223 l 782 190 m 546 718 l 388 718 l 388 552 l 541 552 q 612 572 584 552 q 641 635 641 593 q 614 695 641 672 q 546 718 587 718 "},"~":{"x_min":0,"x_max":851,"ha":949,"o":"m 851 968 q 795 750 851 831 q 599 656 730 656 q 406 744 506 656 q 259 832 305 832 q 162 775 193 832 q 139 656 139 730 l 0 656 q 58 871 0 787 q 251 968 124 968 q 442 879 341 968 q 596 791 544 791 q 691 849 663 791 q 712 968 712 892 l 851 968 "},"Î":{"x_min":0,"x_max":761.546875,"ha":824,"o":"m 761 0 l 0 0 l 0 1012 l 735 1012 l 735 836 l 206 836 l 206 621 l 690 621 l 690 446 l 206 446 l 206 186 l 761 186 l 761 0 "},"Â³":{"x_min":0,"x_max":467,"ha":564,"o":"m 467 555 q 393 413 467 466 q 229 365 325 365 q 70 413 134 365 q 0 565 0 467 l 123 565 q 163 484 131 512 q 229 461 190 461 q 299 486 269 461 q 329 553 329 512 q 281 627 329 607 q 187 641 248 641 l 187 722 q 268 737 237 722 q 312 804 312 758 q 285 859 312 837 q 224 882 259 882 q 165 858 189 882 q 135 783 140 834 l 12 783 q 86 930 20 878 q 230 976 145 976 q 379 931 314 976 q 444 813 444 887 q 423 744 444 773 q 365 695 402 716 q 439 640 412 676 q 467 555 467 605 "},"[":{"x_min":0,"x_max":347.21875,"ha":444,"o":"m 347 -300 l 0 -300 l 0 1013 l 347 1013 l 347 866 l 188 866 l 188 -154 l 347 -154 l 347 -300 "},"L":{"x_min":0,"x_max":704.171875,"ha":763,"o":"m 704 0 l 0 0 l 0 1013 l 208 1013 l 208 186 l 704 186 l 704 0 "},"Ï":{"x_min":0,"x_max":851.3125,"ha":940,"o":"m 851 594 l 712 594 q 761 369 761 485 q 658 83 761 191 q 379 -25 555 -25 q 104 87 208 -25 q 0 372 0 200 q 103 659 0 544 q 378 775 207 775 q 464 762 407 775 q 549 750 521 750 l 851 750 l 851 594 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 608 465 608 q 244 530 293 608 q 203 373 203 465 q 244 218 203 283 q 379 142 293 142 "},"Î¶":{"x_min":0,"x_max":622,"ha":701,"o":"m 622 -32 q 604 -158 622 -98 q 551 -278 587 -218 l 373 -278 q 426 -180 406 -229 q 446 -80 446 -131 q 421 -22 446 -37 q 354 -8 397 -8 q 316 -9 341 -8 q 280 -11 291 -11 q 75 69 150 -11 q 0 283 0 150 q 87 596 0 437 q 291 856 162 730 l 47 856 l 47 1013 l 592 1013 l 592 904 q 317 660 422 800 q 197 318 197 497 q 306 141 197 169 q 510 123 408 131 q 622 -32 622 102 "},"Î¸":{"x_min":0,"x_max":714,"ha":817,"o":"m 357 1022 q 633 833 534 1022 q 714 486 714 679 q 634 148 714 288 q 354 -25 536 -25 q 79 147 175 -25 q 0 481 0 288 q 79 831 0 679 q 357 1022 177 1022 m 510 590 q 475 763 510 687 q 351 862 430 862 q 233 763 272 862 q 204 590 204 689 l 510 590 m 510 440 l 204 440 q 233 251 204 337 q 355 131 274 131 q 478 248 434 131 q 510 440 510 337 "},"Î":{"x_min":0,"x_max":995,"ha":1092,"o":"m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 132 883 0 733 q 497 1040 270 1040 q 861 883 722 1040 q 995 505 995 733 q 862 127 995 277 q 497 -29 724 -29 m 497 154 q 711 266 632 154 q 781 506 781 365 q 711 745 781 647 q 497 857 632 857 q 283 747 361 857 q 213 506 213 647 q 282 266 213 365 q 497 154 361 154 "},"Î":{"x_min":0,"x_max":703.84375,"ha":742,"o":"m 703 836 l 208 836 l 208 0 l 0 0 l 0 1012 l 703 1012 l 703 836 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":0,"x_max":1111,"ha":1213,"o":"m 861 484 q 1048 404 979 484 q 1111 228 1111 332 q 1048 51 1111 123 q 859 -29 979 -29 q 672 50 740 -29 q 610 227 610 122 q 672 403 610 331 q 861 484 741 484 m 861 120 q 939 151 911 120 q 967 226 967 183 q 942 299 967 270 q 861 333 912 333 q 783 301 811 333 q 756 226 756 269 q 783 151 756 182 q 861 120 810 120 m 904 984 l 316 -28 l 205 -29 l 793 983 l 904 984 m 250 984 q 436 904 366 984 q 499 730 499 832 q 436 552 499 626 q 248 472 366 472 q 62 552 132 472 q 0 728 0 624 q 62 903 0 831 q 250 984 132 984 m 249 835 q 169 801 198 835 q 140 725 140 768 q 167 652 140 683 q 247 621 195 621 q 327 654 298 621 q 357 730 357 687 q 329 803 357 772 q 249 835 301 835 "},"P":{"x_min":0,"x_max":771,"ha":838,"o":"m 208 361 l 208 0 l 0 0 l 0 1013 l 450 1013 q 682 919 593 1013 q 771 682 771 826 q 687 452 771 544 q 466 361 604 361 l 208 361 m 421 837 l 208 837 l 208 544 l 410 544 q 525 579 480 544 q 571 683 571 615 q 527 792 571 747 q 421 837 484 837 "},"Î":{"x_min":0,"x_max":1172.546875,"ha":1235,"o":"m 1172 0 l 411 0 l 411 1012 l 1146 1012 l 1146 836 l 617 836 l 617 621 l 1101 621 l 1101 446 l 617 446 l 617 186 l 1172 186 l 1172 0 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "},"Î":{"x_min":0.4375,"x_max":1189.546875,"ha":1289,"o":"m 1189 0 l 770 0 l 770 199 q 897 369 849 263 q 945 580 945 474 q 879 778 945 706 q 685 855 810 855 q 492 773 561 855 q 424 563 424 691 q 470 360 424 458 q 600 199 517 262 l 600 0 l 180 0 l 180 176 l 383 176 q 258 355 304 251 q 213 569 213 459 q 346 908 213 776 q 686 1040 479 1040 q 1025 912 892 1040 q 1158 578 1158 785 q 1112 362 1158 467 q 986 176 1067 256 l 1189 176 l 1189 0 m 314 1092 l 99 837 l 0 837 l 136 1092 l 314 1092 "},"_":{"x_min":61.109375,"x_max":766.671875,"ha":828,"o":"m 766 -333 l 61 -333 l 61 -190 l 766 -190 l 766 -333 "},"Îª":{"x_min":-56,"x_max":342,"ha":503,"o":"m 342 1046 l 186 1046 l 186 1215 l 342 1215 l 342 1046 m 101 1046 l -56 1046 l -56 1215 l 101 1215 l 101 1046 m 249 0 l 41 0 l 41 1012 l 249 1012 l 249 0 "},"+":{"x_min":43,"x_max":784,"ha":828,"o":"m 784 353 l 483 353 l 483 0 l 343 0 l 343 353 l 43 353 l 43 489 l 343 489 l 343 840 l 483 840 l 483 489 l 784 489 l 784 353 "},"Â½":{"x_min":0,"x_max":1090,"ha":1188,"o":"m 1090 380 q 992 230 1090 301 q 779 101 886 165 q 822 94 784 95 q 924 93 859 93 l 951 93 l 973 93 l 992 93 l 1009 93 q 1046 93 1027 93 q 1085 93 1066 93 l 1085 0 l 650 0 l 654 38 q 815 233 665 137 q 965 376 965 330 q 936 436 965 412 q 869 461 908 461 q 806 435 831 461 q 774 354 780 409 l 659 354 q 724 505 659 451 q 870 554 783 554 q 1024 506 958 554 q 1090 380 1090 459 m 868 998 l 268 -28 l 154 -27 l 757 999 l 868 998 m 272 422 l 147 422 l 147 799 l 0 799 l 0 875 q 126 900 91 875 q 170 973 162 926 l 272 973 l 272 422 "},"Î¡":{"x_min":0,"x_max":771,"ha":838,"o":"m 208 361 l 208 0 l 0 0 l 0 1012 l 450 1012 q 682 919 593 1012 q 771 681 771 826 q 687 452 771 544 q 466 361 604 361 l 208 361 m 422 836 l 209 836 l 209 544 l 410 544 q 525 579 480 544 q 571 683 571 614 q 527 791 571 747 q 422 836 484 836 "},"'":{"x_min":0,"x_max":192,"ha":289,"o":"m 192 834 q 137 692 192 751 q 0 626 82 632 l 0 697 q 101 830 101 726 l 0 830 l 0 1013 l 192 1013 l 192 834 "},"Âª":{"x_min":0,"x_max":350,"ha":393,"o":"m 350 625 l 245 625 q 237 648 241 636 q 233 672 233 661 q 117 611 192 611 q 33 643 66 611 q 0 727 0 675 q 116 846 0 828 q 233 886 233 864 q 211 919 233 907 q 168 931 190 931 q 108 877 108 931 l 14 877 q 56 977 14 942 q 165 1013 98 1013 q 270 987 224 1013 q 329 903 329 955 l 329 694 q 332 661 329 675 q 350 641 336 648 l 350 625 m 233 774 l 233 809 q 151 786 180 796 q 97 733 97 768 q 111 700 97 712 q 149 689 126 689 q 210 713 187 689 q 233 774 233 737 "},"Î":{"x_min":57,"x_max":584,"ha":753,"o":"m 584 810 l 455 810 l 455 952 l 584 952 l 584 810 m 521 1064 l 305 810 l 207 810 l 343 1064 l 521 1064 m 186 810 l 57 810 l 57 952 l 186 952 l 186 810 "},"T":{"x_min":0,"x_max":809,"ha":894,"o":"m 809 831 l 509 831 l 509 0 l 299 0 l 299 831 l 0 831 l 0 1013 l 809 1013 l 809 831 "},"Î¦":{"x_min":0,"x_max":949,"ha":1032,"o":"m 566 0 l 385 0 l 385 121 q 111 230 222 121 q 0 508 0 340 q 112 775 0 669 q 385 892 219 875 l 385 1013 l 566 1013 l 566 892 q 836 776 732 875 q 949 507 949 671 q 838 231 949 341 q 566 121 728 121 l 566 0 m 566 285 q 701 352 650 285 q 753 508 753 419 q 703 658 753 597 q 566 729 653 720 l 566 285 m 385 285 l 385 729 q 245 661 297 717 q 193 516 193 604 q 246 356 193 427 q 385 285 300 285 "},"j":{"x_min":-45.828125,"x_max":242,"ha":361,"o":"m 242 830 l 42 830 l 42 1013 l 242 1013 l 242 830 m 242 -119 q 180 -267 242 -221 q 20 -308 127 -308 l -45 -308 l -45 -140 l -24 -140 q 25 -130 8 -140 q 42 -88 42 -120 l 42 748 l 242 748 l 242 -119 "},"Î£":{"x_min":0,"x_max":772.21875,"ha":849,"o":"m 772 0 l 0 0 l 0 140 l 368 526 l 18 862 l 18 1012 l 740 1012 l 740 836 l 315 836 l 619 523 l 298 175 l 772 175 l 772 0 "},"1":{"x_min":197.609375,"x_max":628,"ha":828,"o":"m 628 0 l 434 0 l 434 674 l 197 674 l 197 810 q 373 837 318 810 q 468 984 450 876 l 628 984 l 628 0 "},"âº":{"x_min":36.109375,"x_max":792,"ha":828,"o":"m 792 352 l 36 17 l 36 168 l 594 420 l 36 672 l 36 823 l 792 487 l 792 352 "},"<":{"x_min":35.984375,"x_max":791.671875,"ha":828,"o":"m 791 17 l 36 352 l 35 487 l 791 823 l 791 672 l 229 421 l 791 168 l 791 17 "},"Â£":{"x_min":0,"x_max":716.546875,"ha":814,"o":"m 716 38 q 603 -9 658 5 q 502 -24 548 -24 q 398 -10 451 -24 q 239 25 266 25 q 161 12 200 25 q 77 -29 122 0 l 0 113 q 110 211 81 174 q 151 315 151 259 q 117 440 151 365 l 0 440 l 0 515 l 73 515 q 35 610 52 560 q 15 710 15 671 q 119 910 15 831 q 349 984 216 984 q 570 910 480 984 q 693 668 674 826 l 501 668 q 455 791 501 746 q 353 830 414 830 q 256 795 298 830 q 215 705 215 760 q 249 583 215 655 q 283 515 266 548 l 479 515 l 479 440 l 309 440 q 316 394 313 413 q 319 355 319 374 q 287 241 319 291 q 188 135 263 205 q 262 160 225 152 q 332 168 298 168 q 455 151 368 168 q 523 143 500 143 q 588 152 558 143 q 654 189 617 162 l 716 38 "},"t":{"x_min":0,"x_max":412,"ha":511,"o":"m 412 -6 q 349 -8 391 -6 q 287 -11 307 -11 q 137 38 177 -11 q 97 203 97 87 l 97 609 l 0 609 l 0 749 l 97 749 l 97 951 l 297 951 l 297 749 l 412 749 l 412 609 l 297 609 l 297 191 q 315 152 297 162 q 366 143 334 143 q 389 143 378 143 q 412 143 400 143 l 412 -6 "},"Â¬":{"x_min":0,"x_max":704,"ha":801,"o":"m 704 93 l 551 93 l 551 297 l 0 297 l 0 450 l 704 450 l 704 93 "},"Î»":{"x_min":0,"x_max":701.390625,"ha":775,"o":"m 701 0 l 491 0 l 345 444 l 195 0 l 0 0 l 238 697 l 131 1013 l 334 1013 l 701 0 "},"W":{"x_min":0,"x_max":1291.671875,"ha":1399,"o":"m 1291 1013 l 1002 0 l 802 0 l 645 777 l 490 0 l 288 0 l 0 1013 l 215 1013 l 388 298 l 534 1012 l 757 1013 l 904 299 l 1076 1013 l 1291 1013 "},">":{"x_min":36.109375,"x_max":792,"ha":828,"o":"m 792 352 l 36 17 l 36 168 l 594 420 l 36 672 l 36 823 l 792 487 l 792 352 "},"v":{"x_min":0,"x_max":740.28125,"ha":828,"o":"m 740 749 l 473 0 l 266 0 l 0 749 l 222 749 l 373 211 l 529 749 l 740 749 "},"Ï":{"x_min":0.28125,"x_max":618.734375,"ha":699,"o":"m 618 593 l 409 593 l 409 0 l 210 0 l 210 593 l 0 593 l 0 749 l 618 749 l 618 593 "},"Î¾":{"x_min":0,"x_max":640,"ha":715,"o":"m 640 -14 q 619 -157 640 -84 q 563 -299 599 -230 l 399 -299 q 442 -194 433 -223 q 468 -85 468 -126 q 440 -25 468 -41 q 368 -10 412 -10 q 333 -11 355 -10 q 302 -13 311 -13 q 91 60 179 -13 q 0 259 0 138 q 56 426 0 354 q 201 530 109 493 q 106 594 144 553 q 65 699 65 642 q 94 787 65 747 q 169 856 123 828 l 22 856 l 22 1013 l 597 1013 l 597 856 l 497 857 q 345 840 398 857 q 257 736 257 812 q 366 614 257 642 q 552 602 416 602 l 552 446 l 513 446 q 313 425 379 446 q 199 284 199 389 q 312 162 199 184 q 524 136 418 148 q 640 -14 640 105 "},"&":{"x_min":-1,"x_max":910.109375,"ha":1007,"o":"m 910 -1 l 676 -1 l 607 83 q 291 -47 439 -47 q 50 100 135 -47 q -1 273 -1 190 q 51 431 -1 357 q 218 568 104 505 q 151 661 169 629 q 120 769 120 717 q 201 951 120 885 q 382 1013 276 1013 q 555 957 485 1013 q 635 789 635 894 q 584 644 635 709 q 468 539 548 597 l 615 359 q 664 527 654 440 l 844 527 q 725 223 824 359 l 910 -1 m 461 787 q 436 848 461 826 q 381 870 412 870 q 325 849 349 870 q 301 792 301 829 q 324 719 301 757 q 372 660 335 703 q 430 714 405 680 q 461 787 461 753 m 500 214 l 318 441 q 198 286 198 363 q 225 204 198 248 q 347 135 268 135 q 425 153 388 135 q 500 214 462 172 "},"Î":{"x_min":0,"x_max":894.453125,"ha":974,"o":"m 894 0 l 666 0 l 447 757 l 225 0 l 0 0 l 344 1013 l 547 1013 l 894 0 "},"I":{"x_min":41,"x_max":249,"ha":365,"o":"m 249 0 l 41 0 l 41 1013 l 249 1013 l 249 0 "},"G":{"x_min":0,"x_max":971,"ha":1057,"o":"m 971 -1 l 829 -1 l 805 118 q 479 -29 670 -29 q 126 133 261 -29 q 0 509 0 286 q 130 884 0 737 q 493 1040 268 1040 q 790 948 659 1040 q 961 698 920 857 l 736 698 q 643 813 709 769 q 500 857 578 857 q 285 746 364 857 q 213 504 213 644 q 285 263 213 361 q 505 154 365 154 q 667 217 598 154 q 761 374 736 280 l 548 374 l 548 548 l 971 548 l 971 -1 "},"Î°":{"x_min":0,"x_max":655,"ha":767,"o":"m 583 810 l 454 810 l 454 952 l 583 952 l 583 810 m 186 810 l 57 809 l 57 952 l 186 952 l 186 810 m 516 1039 l 315 823 l 216 823 l 338 1039 l 516 1039 m 655 417 q 567 55 655 146 q 326 -25 489 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 201 369 q 218 222 201 269 q 326 142 245 142 q 439 247 410 142 q 455 422 455 304 l 455 748 l 655 748 l 655 417 "},"`":{"x_min":0,"x_max":190,"ha":288,"o":"m 190 654 l 0 654 l 0 830 q 55 970 0 909 q 190 1040 110 1031 l 190 969 q 111 922 134 952 q 88 836 88 892 l 190 836 l 190 654 "},"Â·":{"x_min":0,"x_max":207,"ha":304,"o":"m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 "},"Î¥":{"x_min":-0.21875,"x_max":836.171875,"ha":914,"o":"m 836 1013 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 "},"r":{"x_min":0,"x_max":431.9375,"ha":513,"o":"m 431 564 q 269 536 320 564 q 200 395 200 498 l 200 0 l 0 0 l 0 748 l 183 748 l 183 618 q 285 731 224 694 q 431 768 345 768 l 431 564 "},"x":{"x_min":0,"x_max":738.890625,"ha":826,"o":"m 738 0 l 504 0 l 366 238 l 230 0 l 0 0 l 252 382 l 11 749 l 238 749 l 372 522 l 502 749 l 725 749 l 488 384 l 738 0 "},"Î¼":{"x_min":0,"x_max":647,"ha":754,"o":"m 647 0 l 477 0 l 477 68 q 411 9 448 30 q 330 -11 374 -11 q 261 3 295 -11 q 199 43 226 18 l 199 -278 l 0 -278 l 0 749 l 199 749 l 199 358 q 216 222 199 268 q 322 152 244 152 q 435 240 410 152 q 448 401 448 283 l 448 749 l 647 749 l 647 0 "},"h":{"x_min":0,"x_max":669,"ha":782,"o":"m 669 0 l 469 0 l 469 390 q 449 526 469 472 q 353 607 420 607 q 248 554 295 607 q 201 441 201 501 l 201 0 l 0 0 l 0 1013 l 201 1013 l 201 665 q 303 743 245 715 q 425 772 362 772 q 609 684 542 772 q 669 484 669 605 l 669 0 "},".":{"x_min":0,"x_max":206,"ha":303,"o":"m 206 0 l 0 0 l 0 207 l 206 207 l 206 0 "},"Ï":{"x_min":-1,"x_max":921,"ha":990,"o":"m 542 -278 l 367 -278 l 367 -22 q 99 92 200 -22 q -1 376 -1 206 q 72 627 -1 520 q 288 769 151 742 l 288 581 q 222 495 243 550 q 202 378 202 439 q 240 228 202 291 q 367 145 285 157 l 367 776 l 515 776 q 807 667 694 776 q 921 379 921 558 q 815 93 921 209 q 542 -22 709 -22 l 542 -278 m 542 145 q 672 225 625 145 q 713 381 713 291 q 671 536 713 470 q 542 611 624 611 l 542 145 "},";":{"x_min":0,"x_max":208,"ha":306,"o":"m 208 528 l 0 528 l 0 735 l 208 735 l 208 528 m 208 6 q 152 -151 208 -89 q 0 -238 96 -212 l 0 -158 q 87 -100 61 -136 q 113 0 113 -65 l 0 0 l 0 207 l 208 207 l 208 6 "},"f":{"x_min":0,"x_max":424,"ha":525,"o":"m 424 609 l 300 609 l 300 0 l 107 0 l 107 609 l 0 609 l 0 749 l 107 749 q 145 949 107 894 q 328 1019 193 1019 l 424 1015 l 424 855 l 362 855 q 312 841 324 855 q 300 797 300 827 q 300 773 300 786 q 300 749 300 761 l 424 749 l 424 609 "},"â":{"x_min":0,"x_max":468,"ha":567,"o":"m 190 631 l 0 631 l 0 807 q 55 947 0 885 q 190 1017 110 1010 l 190 947 q 88 813 88 921 l 190 813 l 190 631 m 468 631 l 278 631 l 278 807 q 333 947 278 885 q 468 1017 388 1010 l 468 947 q 366 813 366 921 l 468 813 l 468 631 "},"A":{"x_min":0,"x_max":966.671875,"ha":1069,"o":"m 966 0 l 747 0 l 679 208 l 286 208 l 218 0 l 0 0 l 361 1013 l 600 1013 l 966 0 m 623 376 l 480 810 l 340 376 l 623 376 "},"6":{"x_min":57,"x_max":771,"ha":828,"o":"m 744 734 l 544 734 q 500 802 533 776 q 425 828 466 828 q 315 769 359 828 q 264 571 264 701 q 451 638 343 638 q 691 537 602 638 q 771 315 771 449 q 683 79 771 176 q 420 -29 586 -29 q 134 123 227 -29 q 57 455 57 250 q 184 865 57 721 q 452 988 293 988 q 657 916 570 988 q 744 734 744 845 m 426 128 q 538 178 498 128 q 578 300 578 229 q 538 422 578 372 q 415 479 493 479 q 303 430 342 479 q 264 313 264 381 q 308 184 264 240 q 426 128 352 128 "},"â":{"x_min":0,"x_max":190,"ha":289,"o":"m 190 631 l 0 631 l 0 807 q 55 947 0 885 q 190 1017 110 1010 l 190 947 q 88 813 88 921 l 190 813 l 190 631 "},"Ï":{"x_min":-55,"x_max":337,"ha":389,"o":"m 337 810 l 208 810 l 208 952 l 337 952 l 337 810 m 74 810 l -55 810 l -55 952 l 74 952 l 74 810 m 242 0 l 42 0 l 42 748 l 242 748 l 242 0 "},"Ï":{"x_min":0.5,"x_max":838.890625,"ha":938,"o":"m 838 593 l 750 593 l 750 0 l 549 0 l 549 593 l 287 593 l 287 0 l 88 0 l 88 593 l 0 593 l 0 749 l 838 749 l 838 593 "},"Î¬":{"x_min":-1,"x_max":722,"ha":835,"o":"m 722 0 l 531 0 l 530 101 q 433 8 491 41 q 304 -25 375 -25 q 72 104 157 -25 q -1 372 -1 216 q 72 643 -1 530 q 308 775 158 775 q 433 744 375 775 q 528 656 491 713 l 528 749 l 722 749 l 722 0 m 361 601 q 233 527 277 601 q 196 375 196 464 q 232 224 196 288 q 358 144 277 144 q 487 217 441 144 q 528 370 528 281 q 489 523 528 457 q 361 601 443 601 m 579 1039 l 377 823 l 279 823 l 401 1039 l 579 1039 "},"O":{"x_min":0,"x_max":994,"ha":1094,"o":"m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 131 883 0 733 q 497 1040 270 1040 q 860 883 721 1040 q 994 505 994 733 q 862 127 994 277 q 497 -29 723 -29 m 497 154 q 710 266 631 154 q 780 506 780 365 q 710 745 780 647 q 497 857 631 857 q 283 747 361 857 q 213 506 213 647 q 282 266 213 365 q 497 154 361 154 "},"n":{"x_min":0,"x_max":669,"ha":782,"o":"m 669 0 l 469 0 l 469 452 q 442 553 469 513 q 352 601 412 601 q 245 553 290 601 q 200 441 200 505 l 200 0 l 0 0 l 0 748 l 194 748 l 194 659 q 289 744 230 713 q 416 775 349 775 q 600 700 531 775 q 669 509 669 626 l 669 0 "},"3":{"x_min":61,"x_max":767,"ha":828,"o":"m 767 290 q 653 51 767 143 q 402 -32 548 -32 q 168 48 262 -32 q 61 300 61 140 l 250 300 q 298 173 250 219 q 405 132 343 132 q 514 169 471 132 q 563 282 563 211 q 491 405 563 369 q 343 432 439 432 l 343 568 q 472 592 425 568 q 534 701 534 626 q 493 793 534 758 q 398 829 453 829 q 306 789 344 829 q 268 669 268 749 l 80 669 q 182 909 80 823 q 410 986 274 986 q 633 916 540 986 q 735 719 735 840 q 703 608 735 656 q 615 522 672 561 q 727 427 687 486 q 767 290 767 369 "},"9":{"x_min":58,"x_max":769,"ha":828,"o":"m 769 492 q 646 90 769 232 q 384 -33 539 -33 q 187 35 271 -33 q 83 224 98 107 l 282 224 q 323 154 286 182 q 404 127 359 127 q 513 182 471 127 q 563 384 563 248 q 475 335 532 355 q 372 315 418 315 q 137 416 224 315 q 58 642 58 507 q 144 877 58 781 q 407 984 239 984 q 694 827 602 984 q 769 492 769 699 m 416 476 q 525 521 488 476 q 563 632 563 566 q 521 764 563 709 q 403 826 474 826 q 297 773 337 826 q 258 649 258 720 q 295 530 258 577 q 416 476 339 476 "},"l":{"x_min":41,"x_max":240,"ha":363,"o":"m 240 0 l 41 0 l 41 1013 l 240 1013 l 240 0 "},"Â¤":{"x_min":40.265625,"x_max":727.203125,"ha":825,"o":"m 727 792 l 594 659 q 620 552 620 609 q 598 459 620 504 l 725 331 l 620 224 l 491 352 q 382 331 443 331 q 273 352 322 331 l 144 224 l 40 330 l 167 459 q 147 552 147 501 q 172 658 147 608 l 40 794 l 147 898 l 283 759 q 383 776 330 776 q 482 759 434 776 l 620 898 l 727 792 m 383 644 q 308 617 334 644 q 283 551 283 590 q 309 489 283 517 q 381 462 335 462 q 456 488 430 462 q 482 554 482 515 q 455 616 482 588 q 383 644 429 644 "},"Îº":{"x_min":0,"x_max":691.84375,"ha":779,"o":"m 691 0 l 479 0 l 284 343 l 196 252 l 196 0 l 0 0 l 0 749 l 196 749 l 196 490 l 440 749 l 677 749 l 416 479 l 691 0 "},"4":{"x_min":53,"x_max":775.21875,"ha":828,"o":"m 775 213 l 660 213 l 660 0 l 470 0 l 470 213 l 53 213 l 53 384 l 416 958 l 660 958 l 660 370 l 775 370 l 775 213 m 474 364 l 474 786 l 204 363 l 474 364 "},"p":{"x_min":0,"x_max":722,"ha":824,"o":"m 415 -26 q 287 4 346 -26 q 192 92 228 34 l 192 -298 l 0 -298 l 0 750 l 192 750 l 192 647 q 289 740 230 706 q 416 775 347 775 q 649 645 566 775 q 722 375 722 534 q 649 106 722 218 q 415 -26 564 -26 m 363 603 q 232 529 278 603 q 192 375 192 465 q 230 222 192 286 q 360 146 276 146 q 487 221 441 146 q 526 371 526 285 q 488 523 526 458 q 363 603 443 603 "},"â¡":{"x_min":0,"x_max":809,"ha":894,"o":"m 299 621 l 0 621 l 0 804 l 299 804 l 299 1011 l 509 1011 l 509 804 l 809 804 l 809 621 l 509 621 l 509 387 l 809 387 l 809 205 l 509 205 l 509 0 l 299 0 l 299 205 l 0 205 l 0 387 l 299 387 l 299 621 "},"Ï":{"x_min":0,"x_max":875,"ha":979,"o":"m 522 142 q 657 274 620 163 q 671 352 671 316 l 671 748 l 875 748 l 875 402 q 806 134 875 240 q 525 -22 719 -1 l 525 -278 l 349 -278 l 349 -22 q 65 135 152 -1 q 0 402 0 238 l 0 748 l 204 748 l 204 352 q 231 240 204 295 q 353 142 272 159 l 353 922 l 524 922 l 522 142 "},"Î·":{"x_min":0,"x_max":669,"ha":779,"o":"m 669 -278 l 469 -278 l 469 390 q 448 526 469 473 q 348 606 417 606 q 244 553 288 606 q 201 441 201 501 l 201 0 l 0 0 l 0 749 l 201 749 l 201 665 q 301 744 244 715 q 423 774 359 774 q 606 685 538 774 q 669 484 669 603 l 669 -278 "}},"cssFontWeight":"bold","ascender":1216,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-333,"xMin":-162,"yMax":1216,"xMax":1681},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Bold","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr","full_font_name":"Helvetiker Bold","font_family_name":"Helvetiker","copyright":"Copyright (c) Magenta ltd, 2004.","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Magenta ltd:Helvetiker Bold:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Magenta ltd","font_sub_family_name":"Bold"},"descender":-334,"familyName":"Helvetiker","lineHeight":1549,"underlineThickness":50});;/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.OrbitControls = function ( object, domElement ) {

	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// API

	this.enabled = true;

	this.center = new THREE.Vector3();

	this.userZoom = true;
	this.userZoomSpeed = 1.0;

	this.userRotate = true;
	this.userRotateSpeed = 1.0;

	this.userPan = true;
	this.userPanSpeed = 2.0;

	this.autoRotate = false;
	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	this.minPolarAngle = 0; // radians
	this.maxPolarAngle = Math.PI; // radians

	this.minDistance = 0;
	this.maxDistance = Infinity;

	// 65 /*A*/, 83 /*S*/, 68 /*D*/
	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, ROTATE: 65, ZOOM: 83, PAN: 68 };

	// internals

	var scope = this;

	var EPS = 0.000001;
	var PIXELS_PER_ROUND = 1800;

	var rotateStart = new THREE.Vector2();
	var rotateEnd = new THREE.Vector2();
	var rotateDelta = new THREE.Vector2();

	var zoomStart = new THREE.Vector2();
	var zoomEnd = new THREE.Vector2();
	var zoomDelta = new THREE.Vector2();

	var phiDelta = 0;
	var thetaDelta = 0;
	var scale = 1;

	var lastPosition = new THREE.Vector3();

	var STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2 };
	var state = STATE.NONE;

	// events

	var changeEvent = { type: 'change' };


	this.rotateLeft = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		thetaDelta -= angle;

	};

	this.rotateRight = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		thetaDelta += angle;

	};

	this.rotateUp = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		phiDelta -= angle;

	};

	this.rotateDown = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		phiDelta += angle;

	};

	this.zoomIn = function ( zoomScale ) {

		if ( zoomScale === undefined ) {

			zoomScale = getZoomScale();

		}

		scale /= zoomScale;

	};

	this.zoomOut = function ( zoomScale ) {

		if ( zoomScale === undefined ) {

			zoomScale = getZoomScale();

		}

		scale *= zoomScale;

	};

	this.pan = function ( distance ) {

		distance.transformDirection( this.object.matrix );
		distance.multiplyScalar( scope.userPanSpeed );

		this.object.position.add( distance );
		this.center.add( distance );

	};

	this.update = function () {

		var position = this.object.position;
		var offset = position.clone().sub( this.center );

		// angle from z-axis around y-axis

		var theta = Math.atan2( offset.x, offset.z );

		// angle from y-axis

		var phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );

		if ( this.autoRotate ) {

			this.rotateLeft( getAutoRotationAngle() );

		}

		theta += thetaDelta;
		phi += phiDelta;

		// restrict phi to be between desired limits
		phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );

		// restrict phi to be betwee EPS and PI-EPS
		phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );

		var radius = offset.length() * scale;

		// restrict radius to be between desired limits
		radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );

		offset.x = radius * Math.sin( phi ) * Math.sin( theta );
		offset.y = radius * Math.cos( phi );
		offset.z = radius * Math.sin( phi ) * Math.cos( theta );

		position.copy( this.center ).add( offset );

		this.object.lookAt( this.center );

		thetaDelta = 0;
		phiDelta = 0;
		scale = 1;

		if ( lastPosition.distanceTo( this.object.position ) > 0 ) {

			this.dispatchEvent( changeEvent );

			lastPosition.copy( this.object.position );

		}

	};


	function getAutoRotationAngle() {

		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

	}

	function getZoomScale() {

		return Math.pow( 0.95, scope.userZoomSpeed );

	}

	function onMouseDown( event ) {

		if ( scope.enabled === false ) return;
		if ( scope.userRotate === false ) return;

		event.preventDefault();

		if ( state === STATE.NONE )
		{
			if ( event.button === 0 )
				state = STATE.ROTATE;
			if ( event.button === 1 )
				state = STATE.ZOOM;
			if ( event.button === 2 )
				state = STATE.PAN;
		}
		
		
		if ( state === STATE.ROTATE ) {

			//state = STATE.ROTATE;

			rotateStart.set( event.clientX, event.clientY );

		} else if ( state === STATE.ZOOM ) {

			//state = STATE.ZOOM;

			zoomStart.set( event.clientX, event.clientY );

		} else if ( state === STATE.PAN ) {

			//state = STATE.PAN;

		}

		document.addEventListener( 'mousemove', onMouseMove, false );
		document.addEventListener( 'mouseup', onMouseUp, false );

	}

	function onMouseMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		
		
		if ( state === STATE.ROTATE ) {

			rotateEnd.set( event.clientX, event.clientY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			scope.rotateLeft( 2 * Math.PI * rotateDelta.x / PIXELS_PER_ROUND * scope.userRotateSpeed );
			scope.rotateUp( 2 * Math.PI * rotateDelta.y / PIXELS_PER_ROUND * scope.userRotateSpeed );

			rotateStart.copy( rotateEnd );

		} else if ( state === STATE.ZOOM ) {

			zoomEnd.set( event.clientX, event.clientY );
			zoomDelta.subVectors( zoomEnd, zoomStart );

			if ( zoomDelta.y > 0 ) {

				scope.zoomIn();

			} else {

				scope.zoomOut();

			}

			zoomStart.copy( zoomEnd );

		} else if ( state === STATE.PAN ) {

			var movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;
			var movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;

			scope.pan( new THREE.Vector3( - movementX, movementY, 0 ) );

		}

	}

	function onMouseUp( event ) {

		if ( scope.enabled === false ) return;
		if ( scope.userRotate === false ) return;

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		state = STATE.NONE;

	}

	function onMouseWheel( event ) {

		if ( scope.enabled === false ) return;
		if ( scope.userZoom === false ) return;

		var delta = 0;

		if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9

			delta = event.wheelDelta;

		} else if ( event.detail ) { // Firefox

			delta = - event.detail;

		}

		if ( delta > 0 ) {

			scope.zoomOut();

		} else {

			scope.zoomIn();

		}

	}

	function onKeyDown( event ) {

		if ( scope.enabled === false ) return;
		if ( scope.userPan === false ) return;

		switch ( event.keyCode ) {

			/*case scope.keys.UP:
				scope.pan( new THREE.Vector3( 0, 1, 0 ) );
				break;
			case scope.keys.BOTTOM:
				scope.pan( new THREE.Vector3( 0, - 1, 0 ) );
				break;
			case scope.keys.LEFT:
				scope.pan( new THREE.Vector3( - 1, 0, 0 ) );
				break;
			case scope.keys.RIGHT:
				scope.pan( new THREE.Vector3( 1, 0, 0 ) );
				break;
			*/
			case scope.keys.ROTATE:
				state = STATE.ROTATE;
				break;
			case scope.keys.ZOOM:
				state = STATE.ZOOM;
				break;
			case scope.keys.PAN:
				state = STATE.PAN;
				break;
				
		}

	}
	
	function onKeyUp( event ) {

		switch ( event.keyCode ) {

			case scope.keys.ROTATE:
			case scope.keys.ZOOM:
			case scope.keys.PAN:
				state = STATE.NONE;
				break;
		}

	}

	this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
	this.domElement.addEventListener( 'mousedown', onMouseDown, false );
	this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );
	this.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox
	window.addEventListener( 'keydown', onKeyDown, false );
	window.addEventListener( 'keyup', onKeyUp, false );

};

THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
;/**
 * @author James Baicoianu / http://www.baicoianu.com/
 */

THREE.FlyControls = function ( object, domElement ) {

	this.object = object;

	this.domElement = ( domElement !== undefined ) ? domElement : document;
	if ( domElement ) this.domElement.setAttribute( 'tabindex', -1 );

	// API

	this.movementSpeed = 1.0;
	this.rollSpeed = 0.005;

	this.dragToLook = false;
	this.autoForward = false;

	// disable default target object behavior

	// internals

	this.tmpQuaternion = new THREE.Quaternion();

	this.mouseStatus = 0;

	this.moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };
	this.moveVector = new THREE.Vector3( 0, 0, 0 );
	this.rotationVector = new THREE.Vector3( 0, 0, 0 );

	this.handleEvent = function ( event ) {

		if ( typeof this[ event.type ] == 'function' ) {

			this[ event.type ]( event );

		}

	};

	this.keydown = function( event ) {

		if ( event.altKey ) {

			return;

		}

		//event.preventDefault();

		switch ( event.keyCode ) {

			case 16: /* shift */ this.movementSpeedMultiplier = .1; break;

			case 87: /*W*/ this.moveState.forward = 1; break;
			case 83: /*S*/ this.moveState.back = 1; break;

			case 65: /*A*/ this.moveState.left = 1; break;
			case 68: /*D*/ this.moveState.right = 1; break;

			case 82: /*R*/ this.moveState.up = 1; break;
			case 70: /*F*/ this.moveState.down = 1; break;

			case 38: /*up*/ this.moveState.pitchUp = 1; break;
			case 40: /*down*/ this.moveState.pitchDown = 1; break;

			case 37: /*left*/ this.moveState.yawLeft = 1; break;
			case 39: /*right*/ this.moveState.yawRight = 1; break;

			case 81: /*Q*/ this.moveState.rollLeft = 1; break;
			case 69: /*E*/ this.moveState.rollRight = 1; break;

		}

		this.updateMovementVector();
		this.updateRotationVector();

	};

	this.keyup = function( event ) {

		switch( event.keyCode ) {

			case 16: /* shift */ this.movementSpeedMultiplier = 1; break;

			case 87: /*W*/ this.moveState.forward = 0; break;
			case 83: /*S*/ this.moveState.back = 0; break;

			case 65: /*A*/ this.moveState.left = 0; break;
			case 68: /*D*/ this.moveState.right = 0; break;

			case 82: /*R*/ this.moveState.up = 0; break;
			case 70: /*F*/ this.moveState.down = 0; break;

			case 38: /*up*/ this.moveState.pitchUp = 0; break;
			case 40: /*down*/ this.moveState.pitchDown = 0; break;

			case 37: /*left*/ this.moveState.yawLeft = 0; break;
			case 39: /*right*/ this.moveState.yawRight = 0; break;

			case 81: /*Q*/ this.moveState.rollLeft = 0; break;
			case 69: /*E*/ this.moveState.rollRight = 0; break;

		}

		this.updateMovementVector();
		this.updateRotationVector();

	};

	this.mousedown = function( event ) {

		if ( this.domElement !== document ) {

			this.domElement.focus();

		}

		event.preventDefault();
		event.stopPropagation();

		if ( this.dragToLook ) {

			this.mouseStatus ++;

		} else {

			switch ( event.button ) {

				case 0: this.moveState.forward = 1; break;
				case 2: this.moveState.back = 1; break;

			}

			this.updateMovementVector();

		}

	};

	this.mousemove = function( event ) {

		if ( !this.dragToLook || this.mouseStatus > 0 ) {

			var container = this.getContainerDimensions();
			var halfWidth  = container.size[ 0 ] / 2;
			var halfHeight = container.size[ 1 ] / 2;

			this.moveState.yawLeft   = - ( ( event.pageX - container.offset[ 0 ] ) - halfWidth  ) / halfWidth;
			this.moveState.pitchDown =   ( ( event.pageY - container.offset[ 1 ] ) - halfHeight ) / halfHeight;

			this.updateRotationVector();

		}

	};

	this.mouseup = function( event ) {

		event.preventDefault();
		event.stopPropagation();

		if ( this.dragToLook ) {

			this.mouseStatus --;

			this.moveState.yawLeft = this.moveState.pitchDown = 0;

		} else {

			switch ( event.button ) {

				case 0: this.moveState.forward = 0; break;
				case 2: this.moveState.back = 0; break;

			}

			this.updateMovementVector();

		}

		this.updateRotationVector();

	};

	this.update = function( delta ) {

		var moveMult = delta * this.movementSpeed;
		var rotMult = delta * this.rollSpeed;

		this.object.translateX( this.moveVector.x * moveMult );
		this.object.translateY( this.moveVector.y * moveMult );
		this.object.translateZ( this.moveVector.z * moveMult );

		this.tmpQuaternion.set( this.rotationVector.x * rotMult, this.rotationVector.y * rotMult, this.rotationVector.z * rotMult, 1 ).normalize();
		this.object.quaternion.multiply( this.tmpQuaternion );

		// expose the rotation vector for convenience
		this.object.rotation.setFromQuaternion( this.object.quaternion, this.object.rotation.order );


	};

	this.updateMovementVector = function() {

		var forward = ( this.moveState.forward || ( this.autoForward && !this.moveState.back ) ) ? 1 : 0;

		this.moveVector.x = ( -this.moveState.left    + this.moveState.right );
		this.moveVector.y = ( -this.moveState.down    + this.moveState.up );
		this.moveVector.z = ( -forward + this.moveState.back );

		//console.log( 'move:', [ this.moveVector.x, this.moveVector.y, this.moveVector.z ] );

	};

	this.updateRotationVector = function() {

		this.rotationVector.x = ( -this.moveState.pitchDown + this.moveState.pitchUp );
		this.rotationVector.y = ( -this.moveState.yawRight  + this.moveState.yawLeft );
		this.rotationVector.z = ( -this.moveState.rollRight + this.moveState.rollLeft );

		//console.log( 'rotate:', [ this.rotationVector.x, this.rotationVector.y, this.rotationVector.z ] );

	};

	this.getContainerDimensions = function() {

		if ( this.domElement != document ) {

			return {
				size	: [ this.domElement.offsetWidth, this.domElement.offsetHeight ],
				offset	: [ this.domElement.offsetLeft,  this.domElement.offsetTop ]
			};

		} else {

			return {
				size	: [ window.innerWidth, window.innerHeight ],
				offset	: [ 0, 0 ]
			};

		}

	};

	function bind( scope, fn ) {

		return function () {

			fn.apply( scope, arguments );

		};

	};

	this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );

	this.domElement.addEventListener( 'mousemove', bind( this, this.mousemove ), false );
	this.domElement.addEventListener( 'mousedown', bind( this, this.mousedown ), false );
	this.domElement.addEventListener( 'mouseup',   bind( this, this.mouseup ), false );

	window.addEventListener( 'keydown', bind( this, this.keydown ), false );
	window.addEventListener( 'keyup',   bind( this, this.keyup ), false );

	this.updateMovementVector();
	this.updateRotationVector();

};;/*!
* @license EaselJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/
this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent,a.willTrigger=b.willTrigger},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.willTrigger=function(a){for(var b=this;b;){if(b.hasEventListener(a))return!0;b=b.parent}return!1},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){"use strict";createjs.indexOf=function(a,b){for(var c=0,d=a.length;d>c;c++)if(b===a[c])return c;return-1}}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"UID cannot be instantiated"};a._nextID=0,a.get=function(){return a._nextID++},createjs.UID=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"Ticker cannot be instantiated."};a.RAF_SYNCHED="synched",a.RAF="raf",a.TIMEOUT="timeout",a.useRAF=!1,a.timingMode=null,a.maxDelta=0,a.removeEventListener=null,a.removeAllEventListeners=null,a.dispatchEvent=null,a.hasEventListener=null,a._listeners=null,createjs.EventDispatcher.initialize(a),a._addEventListener=a.addEventListener,a.addEventListener=function(){return!a._inited&&a.init(),a._addEventListener.apply(a,arguments)},a._paused=!1,a._inited=!1,a._startTime=0,a._pausedTime=0,a._ticks=0,a._pausedTicks=0,a._interval=50,a._lastTime=0,a._times=null,a._tickTimes=null,a._timerId=null,a._raf=!0,a.init=function(){a._inited||(a._inited=!0,a._times=[],a._tickTimes=[],a._startTime=a._getTime(),a._times.push(a._lastTime=0),a.setInterval(a._interval))},a.reset=function(){if(a._raf){var b=window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame;b&&b(a._timerId)}else clearTimeout(a._timerId);a.removeAllEventListeners("tick")},a.setInterval=function(b){a._interval=b,a._inited&&a._setupTick()},a.getInterval=function(){return a._interval},a.setFPS=function(b){a.setInterval(1e3/b)},a.getFPS=function(){return 1e3/a._interval},a.getMeasuredTickTime=function(b){var c=0,d=a._tickTimes;if(d.length<1)return-1;b=Math.min(d.length,b||0|a.getFPS());for(var e=0;b>e;e++)c+=d[e];return c/b},a.getMeasuredFPS=function(b){var c=a._times;return c.length<2?-1:(b=Math.min(c.length-1,b||0|a.getFPS()),1e3/((c[0]-c[b])/b))},a.setPaused=function(b){a._paused=b},a.getPaused=function(){return a._paused},a.getTime=function(b){return a._getTime()-a._startTime-(b?a._pausedTime:0)},a.getEventTime=function(b){return(a._lastTime||a._startTime)-(b?a._pausedTime:0)},a.getTicks=function(b){return a._ticks-(b?a._pausedTicks:0)},a._handleSynch=function(){var b=a._getTime()-a._startTime;a._timerId=null,a._setupTick(),b-a._lastTime>=.97*(a._interval-1)&&a._tick()},a._handleRAF=function(){a._timerId=null,a._setupTick(),a._tick()},a._handleTimeout=function(){a._timerId=null,a._setupTick(),a._tick()},a._setupTick=function(){if(null==a._timerId){var b=a.timingMode||a.useRAF&&a.RAF_SYNCHED;if(b==a.RAF_SYNCHED||b==a.RAF){var c=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame;if(c)return a._timerId=c(b==a.RAF?a._handleRAF:a._handleSynch),a._raf=!0,void 0}a._raf=!1,a._timerId=setTimeout(a._handleTimeout,a._interval)}},a._tick=function(){var b=a._getTime()-a._startTime,c=b-a._lastTime,d=a._paused;if(a._ticks++,d&&(a._pausedTicks++,a._pausedTime+=c),a._lastTime=b,a.hasEventListener("tick")){var e=new createjs.Event("tick"),f=a.maxDelta;e.delta=f&&c>f?f:c,e.paused=d,e.time=b,e.runTime=b-a._pausedTime,a.dispatchEvent(e)}for(a._tickTimes.unshift(a._getTime()-b);a._tickTimes.length>100;)a._tickTimes.pop();for(a._times.unshift(b);a._times.length>100;)a._times.pop()};var b=window.performance&&(performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow);a._getTime=function(){return b&&b.call(performance)||(new Date).getTime()},createjs.Ticker=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g,h,i,j){this.initialize(a,b,c,d,e,f,g,h,i,j)},b=a.prototype=new createjs.Event;b.stageX=0,b.stageY=0,b.rawX=0,b.rawY=0,b.nativeEvent=null,b.pointerID=0,b.primary=!1,b.addEventListener=null,b.removeEventListener=null,b.removeAllEventListeners=null,b.dispatchEvent=null,b.hasEventListener=null,b._listeners=null,createjs.EventDispatcher.initialize(b),b._get_localX=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).x},b._get_localY=function(){return this.currentTarget.globalToLocal(this.rawX,this.rawY).y};try{Object.defineProperties(b,{localX:{get:b._get_localX},localY:{get:b._get_localY}})}catch(c){}b.Event_initialize=b.initialize,b.initialize=function(a,b,c,d,e,f,g,h,i,j){this.Event_initialize(a,b,c),this.stageX=d,this.stageY=e,this.nativeEvent=f,this.pointerID=g,this.primary=h,this.rawX=null==i?d:i,this.rawY=null==j?e:j},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable,this.stageX,this.stageY,this.target,this.nativeEvent,this.pointerID,this.primary,this.rawX,this.rawY)},b.toString=function(){return"[MouseEvent (type="+this.type+" stageX="+this.stageX+" stageY="+this.stageY+")]"},createjs.MouseEvent=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f){this.initialize(a,b,c,d,e,f)},b=a.prototype;a.identity=null,a.DEG_TO_RAD=Math.PI/180,b.a=1,b.b=0,b.c=0,b.d=1,b.tx=0,b.ty=0,b.alpha=1,b.shadow=null,b.compositeOperation=null,b.initialize=function(a,b,c,d,e,f){return this.a=null==a?1:a,this.b=b||0,this.c=c||0,this.d=null==d?1:d,this.tx=e||0,this.ty=f||0,this},b.prepend=function(a,b,c,d,e,f){var g=this.tx;if(1!=a||0!=b||0!=c||1!=d){var h=this.a,i=this.c;this.a=h*a+this.b*c,this.b=h*b+this.b*d,this.c=i*a+this.d*c,this.d=i*b+this.d*d}return this.tx=g*a+this.ty*c+e,this.ty=g*b+this.ty*d+f,this},b.append=function(a,b,c,d,e,f){var g=this.a,h=this.b,i=this.c,j=this.d;return this.a=a*g+b*i,this.b=a*h+b*j,this.c=c*g+d*i,this.d=c*h+d*j,this.tx=e*g+f*i+this.tx,this.ty=e*h+f*j+this.ty,this},b.prependMatrix=function(a){return this.prepend(a.a,a.b,a.c,a.d,a.tx,a.ty),this.prependProperties(a.alpha,a.shadow,a.compositeOperation),this},b.appendMatrix=function(a){return this.append(a.a,a.b,a.c,a.d,a.tx,a.ty),this.appendProperties(a.alpha,a.shadow,a.compositeOperation),this},b.prependTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return(i||j)&&(this.tx-=i,this.ty-=j),g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.prepend(l*d,m*d,-m*e,l*e,0,0),this.prepend(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c)):this.prepend(l*d,m*d,-m*e,l*e,b,c),this},b.appendTransform=function(b,c,d,e,f,g,h,i,j){if(f%360)var k=f*a.DEG_TO_RAD,l=Math.cos(k),m=Math.sin(k);else l=1,m=0;return g||h?(g*=a.DEG_TO_RAD,h*=a.DEG_TO_RAD,this.append(Math.cos(h),Math.sin(h),-Math.sin(g),Math.cos(g),b,c),this.append(l*d,m*d,-m*e,l*e,0,0)):this.append(l*d,m*d,-m*e,l*e,b,c),(i||j)&&(this.tx-=i*this.a+j*this.c,this.ty-=i*this.b+j*this.d),this},b.rotate=function(a){var b=Math.cos(a),c=Math.sin(a),d=this.a,e=this.c,f=this.tx;return this.a=d*b-this.b*c,this.b=d*c+this.b*b,this.c=e*b-this.d*c,this.d=e*c+this.d*b,this.tx=f*b-this.ty*c,this.ty=f*c+this.ty*b,this},b.skew=function(b,c){return b*=a.DEG_TO_RAD,c*=a.DEG_TO_RAD,this.append(Math.cos(c),Math.sin(c),-Math.sin(b),Math.cos(b),0,0),this},b.scale=function(a,b){return this.a*=a,this.d*=b,this.c*=a,this.b*=b,this.tx*=a,this.ty*=b,this},b.translate=function(a,b){return this.tx+=a,this.ty+=b,this},b.identity=function(){return this.alpha=this.a=this.d=1,this.b=this.c=this.tx=this.ty=0,this.shadow=this.compositeOperation=null,this},b.invert=function(){var a=this.a,b=this.b,c=this.c,d=this.d,e=this.tx,f=a*d-b*c;return this.a=d/f,this.b=-b/f,this.c=-c/f,this.d=a/f,this.tx=(c*this.ty-d*e)/f,this.ty=-(a*this.ty-b*e)/f,this},b.isIdentity=function(){return 0==this.tx&&0==this.ty&&1==this.a&&0==this.b&&0==this.c&&1==this.d},b.transformPoint=function(a,b,c){return c=c||{},c.x=a*this.a+b*this.c+this.tx,c.y=a*this.b+b*this.d+this.ty,c},b.decompose=function(b){null==b&&(b={}),b.x=this.tx,b.y=this.ty,b.scaleX=Math.sqrt(this.a*this.a+this.b*this.b),b.scaleY=Math.sqrt(this.c*this.c+this.d*this.d);var c=Math.atan2(-this.c,this.d),d=Math.atan2(this.b,this.a);return c==d?(b.rotation=d/a.DEG_TO_RAD,this.a<0&&this.d>=0&&(b.rotation+=b.rotation<=0?180:-180),b.skewX=b.skewY=0):(b.skewX=c/a.DEG_TO_RAD,b.skewY=d/a.DEG_TO_RAD),b},b.reinitialize=function(a,b,c,d,e,f,g,h,i){return this.initialize(a,b,c,d,e,f),this.alpha=null==g?1:g,this.shadow=h,this.compositeOperation=i,this},b.copy=function(a){return this.reinitialize(a.a,a.b,a.c,a.d,a.tx,a.ty,a.alpha,a.shadow,a.compositeOperation)},b.appendProperties=function(a,b,c){return this.alpha*=a,this.shadow=b||this.shadow,this.compositeOperation=c||this.compositeOperation,this},b.prependProperties=function(a,b,c){return this.alpha*=a,this.shadow=this.shadow||b,this.compositeOperation=this.compositeOperation||c,this},b.clone=function(){return(new a).copy(this)},b.toString=function(){return"[Matrix2D (a="+this.a+" b="+this.b+" c="+this.c+" d="+this.d+" tx="+this.tx+" ty="+this.ty+")]"},a.identity=new a,createjs.Matrix2D=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.initialize(a,b)},b=a.prototype;b.x=0,b.y=0,b.initialize=function(a,b){return this.x=null==a?0:a,this.y=null==b?0:b,this},b.copy=function(a){return this.initialize(a.x,a.y)},b.clone=function(){return new a(this.x,this.y)},b.toString=function(){return"[Point (x="+this.x+" y="+this.y+")]"},createjs.Point=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;b.x=0,b.y=0,b.width=0,b.height=0,b.initialize=function(a,b,c,d){return this.x=a||0,this.y=b||0,this.width=c||0,this.height=d||0,this},b.copy=function(a){return this.initialize(a.x,a.y,a.width,a.height)},b.clone=function(){return new a(this.x,this.y,this.width,this.height)},b.toString=function(){return"[Rectangle (x="+this.x+" y="+this.y+" width="+this.width+" height="+this.height+")]"},createjs.Rectangle=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g){this.initialize(a,b,c,d,e,f,g)},b=a.prototype;b.target=null,b.overLabel=null,b.outLabel=null,b.downLabel=null,b.play=!1,b._isPressed=!1,b._isOver=!1,b.initialize=function(a,b,c,d,e,f,g){a.addEventListener&&(this.target=a,a.cursor="pointer",this.overLabel=null==c?"over":c,this.outLabel=null==b?"out":b,this.downLabel=null==d?"down":d,this.play=e,this.setEnabled(!0),this.handleEvent({}),f&&(g&&(f.actionsEnabled=!1,f.gotoAndStop&&f.gotoAndStop(g)),a.hitArea=f))},b.setEnabled=function(a){var b=this.target;a?(b.addEventListener("rollover",this),b.addEventListener("rollout",this),b.addEventListener("mousedown",this),b.addEventListener("pressup",this)):(b.removeEventListener("rollover",this),b.removeEventListener("rollout",this),b.removeEventListener("mousedown",this),b.removeEventListener("pressup",this))},b.toString=function(){return"[ButtonHelper]"},b.handleEvent=function(a){var b,c=this.target,d=a.type;"mousedown"==d?(this._isPressed=!0,b=this.downLabel):"pressup"==d?(this._isPressed=!1,b=this._isOver?this.overLabel:this.outLabel):"rollover"==d?(this._isOver=!0,b=this._isPressed?this.downLabel:this.overLabel):(this._isOver=!1,b=this._isPressed?this.overLabel:this.outLabel),this.play?c.gotoAndPlay&&c.gotoAndPlay(b):c.gotoAndStop&&c.gotoAndStop(b)},createjs.ButtonHelper=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;a.identity=null,b.color=null,b.offsetX=0,b.offsetY=0,b.blur=0,b.initialize=function(a,b,c,d){this.color=a,this.offsetX=b,this.offsetY=c,this.blur=d},b.toString=function(){return"[Shadow]"},b.clone=function(){return new a(this.color,this.offsetX,this.offsetY,this.blur)},a.identity=new a("transparent",0,0,0),createjs.Shadow=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.EventDispatcher;b.complete=!0,b.framerate=0,b._animations=null,b._frames=null,b._images=null,b._data=null,b._loadCount=0,b._frameHeight=0,b._frameWidth=0,b._numFrames=0,b._regX=0,b._regY=0,b.initialize=function(a){var b,c,d,e;if(null!=a){if(this.framerate=a.framerate||0,a.images&&(c=a.images.length)>0)for(e=this._images=[],b=0;c>b;b++){var f=a.images[b];if("string"==typeof f){var g=f;f=document.createElement("img"),f.src=g}e.push(f),f.getContext||f.complete||(this._loadCount++,this.complete=!1,function(a){f.onload=function(){a._handleImageLoad()}}(this))}if(null==a.frames);else if(a.frames instanceof Array)for(this._frames=[],e=a.frames,b=0,c=e.length;c>b;b++){var h=e[b];this._frames.push({image:this._images[h[4]?h[4]:0],rect:new createjs.Rectangle(h[0],h[1],h[2],h[3]),regX:h[5]||0,regY:h[6]||0})}else d=a.frames,this._frameWidth=d.width,this._frameHeight=d.height,this._regX=d.regX||0,this._regY=d.regY||0,this._numFrames=d.count,0==this._loadCount&&this._calculateFrames();if(this._animations=[],null!=(d=a.animations)){this._data={};var i;for(i in d){var j={name:i},k=d[i];if("number"==typeof k)e=j.frames=[k];else if(k instanceof Array)if(1==k.length)j.frames=[k[0]];else for(j.speed=k[3],j.next=k[2],e=j.frames=[],b=k[0];b<=k[1];b++)e.push(b);else{j.speed=k.speed,j.next=k.next;var l=k.frames;e=j.frames="number"==typeof l?[l]:l.slice(0)}(j.next===!0||void 0===j.next)&&(j.next=i),(j.next===!1||e.length<2&&j.next==i)&&(j.next=null),j.speed||(j.speed=1),this._animations.push(i),this._data[i]=j}}}},b.getNumFrames=function(a){if(null==a)return this._frames?this._frames.length:this._numFrames;var b=this._data[a];return null==b?0:b.frames.length},b.getAnimations=function(){return this._animations.slice(0)},b.getAnimation=function(a){return this._data[a]},b.getFrame=function(a){var b;return this._frames&&(b=this._frames[a])?b:null},b.getFrameBounds=function(a,b){var c=this.getFrame(a);return c?(b||new createjs.Rectangle).initialize(-c.regX,-c.regY,c.rect.width,c.rect.height):null},b.toString=function(){return"[SpriteSheet]"},b.clone=function(){var b=new a;return b.complete=this.complete,b._animations=this._animations,b._frames=this._frames,b._images=this._images,b._data=this._data,b._frameHeight=this._frameHeight,b._frameWidth=this._frameWidth,b._numFrames=this._numFrames,b._loadCount=this._loadCount,b},b._handleImageLoad=function(){0==--this._loadCount&&(this._calculateFrames(),this.complete=!0,this.dispatchEvent("complete"))},b._calculateFrames=function(){if(!this._frames&&0!=this._frameWidth){this._frames=[];for(var a=0,b=this._frameWidth,c=this._frameHeight,d=0,e=this._images;d<e.length;d++){for(var f=e[d],g=0|f.width/b,h=0|f.height/c,i=this._numFrames>0?Math.min(this._numFrames-a,g*h):g*h,j=0;i>j;j++)this._frames.push({image:f,rect:new createjs.Rectangle(j%g*b,(0|j/g)*c,b,c),regX:this._regX,regY:this._regY});a+=i}this._numFrames=a}},createjs.SpriteSheet=a}(),this.createjs=this.createjs||{},function(){"use strict";function a(a,b,c){this.f=a,this.params=b,this.path=null==c?!0:c}a.prototype.exec=function(a){this.f.apply(a,this.params)};var b=function(){this.initialize()},c=b.prototype;b.getRGB=function(a,b,c,d){return null!=a&&null==c&&(d=b,c=255&a,b=255&a>>8,a=255&a>>16),null==d?"rgb("+a+","+b+","+c+")":"rgba("+a+","+b+","+c+","+d+")"},b.getHSL=function(a,b,c,d){return null==d?"hsl("+a%360+","+b+"%,"+c+"%)":"hsla("+a%360+","+b+"%,"+c+"%,"+d+")"},b.Command=a,b.BASE_64={A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,"+":62,"/":63},b.STROKE_CAPS_MAP=["butt","round","square"],b.STROKE_JOINTS_MAP=["miter","round","bevel"];var d=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");if(d.getContext){var e=b._ctx=d.getContext("2d");b.beginCmd=new a(e.beginPath,[],!1),b.fillCmd=new a(e.fill,[],!1),b.strokeCmd=new a(e.stroke,[],!1),d.width=d.height=1}c._strokeInstructions=null,c._strokeStyleInstructions=null,c._strokeIgnoreScale=!1,c._fillInstructions=null,c._fillMatrix=null,c._instructions=null,c._oldInstructions=null,c._activeInstructions=null,c._active=!1,c._dirty=!1,c.initialize=function(){this.clear(),this._ctx=b._ctx},c.isEmpty=function(){return!(this._instructions.length||this._oldInstructions.length||this._activeInstructions.length)},c.draw=function(a){this._dirty&&this._updateInstructions();for(var b=this._instructions,c=0,d=b.length;d>c;c++)b[c].exec(a)},c.drawAsPath=function(a){this._dirty&&this._updateInstructions();for(var b,c=this._instructions,d=0,e=c.length;e>d;d++)((b=c[d]).path||0==d)&&b.exec(a)},c.moveTo=function(b,c){return this._activeInstructions.push(new a(this._ctx.moveTo,[b,c])),this},c.lineTo=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.lineTo,[b,c])),this},c.arcTo=function(b,c,d,e,f){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.arcTo,[b,c,d,e,f])),this},c.arc=function(b,c,d,e,f,g){return this._dirty=this._active=!0,null==g&&(g=!1),this._activeInstructions.push(new a(this._ctx.arc,[b,c,d,e,f,g])),this},c.quadraticCurveTo=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.quadraticCurveTo,[b,c,d,e])),this},c.bezierCurveTo=function(b,c,d,e,f,g){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.bezierCurveTo,[b,c,d,e,f,g])),this},c.rect=function(b,c,d,e){return this._dirty=this._active=!0,this._activeInstructions.push(new a(this._ctx.rect,[b,c,d,e])),this},c.closePath=function(){return this._active&&(this._dirty=!0,this._activeInstructions.push(new a(this._ctx.closePath,[]))),this},c.clear=function(){return this._instructions=[],this._oldInstructions=[],this._activeInstructions=[],this._strokeStyleInstructions=this._strokeInstructions=this._fillInstructions=this._fillMatrix=null,this._active=this._dirty=this._strokeIgnoreScale=!1,this},c.beginFill=function(b){return this._active&&this._newPath(),this._fillInstructions=b?[new a(this._setProp,["fillStyle",b],!1)]:null,this._fillMatrix=null,this},c.beginLinearGradientFill=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._fillInstructions=[new a(this._setProp,["fillStyle",h],!1)],this._fillMatrix=null,this},c.beginRadialGradientFill=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._fillInstructions=[new a(this._setProp,["fillStyle",j],!1)],this._fillMatrix=null,this},c.beginBitmapFill=function(b,c,d){this._active&&this._newPath(),c=c||"";var e=this._ctx.createPattern(b,c);return this._fillInstructions=[new a(this._setProp,["fillStyle",e],!1)],this._fillMatrix=d?[d.a,d.b,d.c,d.d,d.tx,d.ty]:null,this},c.endFill=function(){return this.beginFill()},c.setStrokeStyle=function(c,d,e,f,g){return this._active&&this._newPath(),this._strokeStyleInstructions=[new a(this._setProp,["lineWidth",null==c?"1":c],!1),new a(this._setProp,["lineCap",null==d?"butt":isNaN(d)?d:b.STROKE_CAPS_MAP[d]],!1),new a(this._setProp,["lineJoin",null==e?"miter":isNaN(e)?e:b.STROKE_JOINTS_MAP[e]],!1),new a(this._setProp,["miterLimit",null==f?"10":f],!1)],this._strokeIgnoreScale=g,this},c.beginStroke=function(b){return this._active&&this._newPath(),this._strokeInstructions=b?[new a(this._setProp,["strokeStyle",b],!1)]:null,this},c.beginLinearGradientStroke=function(b,c,d,e,f,g){this._active&&this._newPath();for(var h=this._ctx.createLinearGradient(d,e,f,g),i=0,j=b.length;j>i;i++)h.addColorStop(c[i],b[i]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",h],!1)],this},c.beginRadialGradientStroke=function(b,c,d,e,f,g,h,i){this._active&&this._newPath();for(var j=this._ctx.createRadialGradient(d,e,f,g,h,i),k=0,l=b.length;l>k;k++)j.addColorStop(c[k],b[k]);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",j],!1)],this},c.beginBitmapStroke=function(b,c){this._active&&this._newPath(),c=c||"";var d=this._ctx.createPattern(b,c);return this._strokeInstructions=[new a(this._setProp,["strokeStyle",d],!1)],this},c.endStroke=function(){return this.beginStroke(),this},c.curveTo=c.quadraticCurveTo,c.drawRect=c.rect,c.drawRoundRect=function(a,b,c,d,e){return this.drawRoundRectComplex(a,b,c,d,e,e,e,e),this},c.drawRoundRectComplex=function(b,c,d,e,f,g,h,i){var j=(e>d?d:e)/2,k=0,l=0,m=0,n=0;0>f&&(f*=k=-1),f>j&&(f=j),0>g&&(g*=l=-1),g>j&&(g=j),0>h&&(h*=m=-1),h>j&&(h=j),0>i&&(i*=n=-1),i>j&&(i=j),this._dirty=this._active=!0;var o=this._ctx.arcTo,p=this._ctx.lineTo;return this._activeInstructions.push(new a(this._ctx.moveTo,[b+d-g,c]),new a(o,[b+d+g*l,c-g*l,b+d,c+g,g]),new a(p,[b+d,c+e-h]),new a(o,[b+d+h*m,c+e+h*m,b+d-h,c+e,h]),new a(p,[b+i,c+e]),new a(o,[b-i*n,c+e+i*n,b,c+e-i,i]),new a(p,[b,c+f]),new a(o,[b-f*k,c-f*k,b+f,c,f]),new a(this._ctx.closePath)),this},c.drawCircle=function(a,b,c){return this.arc(a,b,c,0,2*Math.PI),this},c.drawEllipse=function(b,c,d,e){this._dirty=this._active=!0;var f=.5522848,g=d/2*f,h=e/2*f,i=b+d,j=c+e,k=b+d/2,l=c+e/2;return this._activeInstructions.push(new a(this._ctx.moveTo,[b,l]),new a(this._ctx.bezierCurveTo,[b,l-h,k-g,c,k,c]),new a(this._ctx.bezierCurveTo,[k+g,c,i,l-h,i,l]),new a(this._ctx.bezierCurveTo,[i,l+h,k+g,j,k,j]),new a(this._ctx.bezierCurveTo,[k-g,j,b,l+h,b,l])),this},c.inject=function(b,c){return this._dirty=this._active=!0,this._activeInstructions.push(new a(b,[c])),this},c.drawPolyStar=function(b,c,d,e,f,g){this._dirty=this._active=!0,null==f&&(f=0),f=1-f,null==g?g=0:g/=180/Math.PI;var h=Math.PI/e;this._activeInstructions.push(new a(this._ctx.moveTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));for(var i=0;e>i;i++)g+=h,1!=f&&this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d*f,c+Math.sin(g)*d*f])),g+=h,this._activeInstructions.push(new a(this._ctx.lineTo,[b+Math.cos(g)*d,c+Math.sin(g)*d]));return this},c.decodePath=function(a){for(var c=[this.moveTo,this.lineTo,this.quadraticCurveTo,this.bezierCurveTo,this.closePath],d=[2,2,4,6,0],e=0,f=a.length,g=[],h=0,i=0,j=b.BASE_64;f>e;){var k=a.charAt(e),l=j[k],m=l>>3,n=c[m];if(!n||3&l)throw"bad path data (@"+e+"): "+k;var o=d[m];m||(h=i=0),g.length=0,e++;for(var p=(1&l>>2)+2,q=0;o>q;q++){var r=j[a.charAt(e)],s=r>>5?-1:1;r=(31&r)<<6|j[a.charAt(e+1)],3==p&&(r=r<<6|j[a.charAt(e+2)]),r=s*r/10,q%2?h=r+=h:i=r+=i,g[q]=r,e+=p}n.apply(this,g)}return this},c.clone=function(){var a=new b;return a._instructions=this._instructions.slice(),a._activeInstructions=this._activeInstructions.slice(),a._oldInstructions=this._oldInstructions.slice(),this._fillInstructions&&(a._fillInstructions=this._fillInstructions.slice()),this._strokeInstructions&&(a._strokeInstructions=this._strokeInstructions.slice()),this._strokeStyleInstructions&&(a._strokeStyleInstructions=this._strokeStyleInstructions.slice()),a._active=this._active,a._dirty=this._dirty,a._fillMatrix=this._fillMatrix,a._strokeIgnoreScale=this._strokeIgnoreScale,a},c.toString=function(){return"[Graphics]"},c.mt=c.moveTo,c.lt=c.lineTo,c.at=c.arcTo,c.bt=c.bezierCurveTo,c.qt=c.quadraticCurveTo,c.a=c.arc,c.r=c.rect,c.cp=c.closePath,c.c=c.clear,c.f=c.beginFill,c.lf=c.beginLinearGradientFill,c.rf=c.beginRadialGradientFill,c.bf=c.beginBitmapFill,c.ef=c.endFill,c.ss=c.setStrokeStyle,c.s=c.beginStroke,c.ls=c.beginLinearGradientStroke,c.rs=c.beginRadialGradientStroke,c.bs=c.beginBitmapStroke,c.es=c.endStroke,c.dr=c.drawRect,c.rr=c.drawRoundRect,c.rc=c.drawRoundRectComplex,c.dc=c.drawCircle,c.de=c.drawEllipse,c.dp=c.drawPolyStar,c.p=c.decodePath,c._updateInstructions=function(){this._instructions=this._oldInstructions.slice(),this._instructions.push(b.beginCmd),this._appendInstructions(this._fillInstructions),this._appendInstructions(this._strokeInstructions),this._appendInstructions(this._strokeInstructions&&this._strokeStyleInstructions),this._appendInstructions(this._activeInstructions),this._fillInstructions&&this._appendDraw(b.fillCmd,this._fillMatrix),this._strokeInstructions&&this._appendDraw(b.strokeCmd,this._strokeIgnoreScale&&[1,0,0,1,0,0])},c._appendInstructions=function(a){a&&this._instructions.push.apply(this._instructions,a)},c._appendDraw=function(b,c){c?this._instructions.push(new a(this._ctx.save,[],!1),new a(this._ctx.transform,c,!1),b,new a(this._ctx.restore,[],!1)):this._instructions.push(b)},c._newPath=function(){this._dirty&&this._updateInstructions(),this._oldInstructions=this._instructions,this._activeInstructions=[],this._active=this._dirty=!1},c._setProp=function(a,b){this[a]=b},createjs.Graphics=b}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a._MOUSE_EVENTS=["click","dblclick","mousedown","mouseout","mouseover","pressmove","pressup","rollout","rollover"],a.suppressCrossDomainErrors=!1;var c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._hitTestCanvas=c,a._hitTestContext=c.getContext("2d"),c.width=c.height=1),a._nextCacheID=1,b.alpha=1,b.cacheCanvas=null,b.id=-1,b.mouseEnabled=!0,b.tickEnabled=!0,b.name=null,b.parent=null,b.regX=0,b.regY=0,b.rotation=0,b.scaleX=1,b.scaleY=1,b.skewX=0,b.skewY=0,b.shadow=null,b.visible=!0,b.x=0,b.y=0,b.compositeOperation=null,b.snapToPixel=!1,b.filters=null,b.cacheID=0,b.mask=null,b.hitArea=null,b.cursor=null,b._cacheOffsetX=0,b._cacheOffsetY=0,b._cacheScale=1,b._cacheDataURLID=0,b._cacheDataURL=null,b._matrix=null,b._rectangle=null,b._bounds=null,b.initialize=function(){this.id=createjs.UID.get(),this._matrix=new createjs.Matrix2D,this._rectangle=new createjs.Rectangle},b.isVisible=function(){return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY)},b.draw=function(a,b){var c=this.cacheCanvas;if(b||!c)return!1;var d,e=this._cacheScale,f=this._cacheOffsetX,g=this._cacheOffsetY;return(d=this._applyFilterBounds(f,g,0,0))&&(f=d.x,g=d.y),a.drawImage(c,f,g,c.width/e,c.height/e),!0},b.updateContext=function(a){var b,c=this.mask,d=this;c&&c.graphics&&!c.graphics.isEmpty()&&(b=c.getMatrix(c._matrix),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),c.graphics.drawAsPath(a),a.clip(),b.invert(),a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty)),b=d._matrix.identity().appendTransform(d.x,d.y,d.scaleX,d.scaleY,d.rotation,d.skewX,d.skewY,d.regX,d.regY),createjs.Stage._snapToPixelEnabled&&d.snapToPixel?a.transform(b.a,b.b,b.c,b.d,0|b.tx+.5,0|b.ty+.5):a.transform(b.a,b.b,b.c,b.d,b.tx,b.ty),a.globalAlpha*=d.alpha,d.compositeOperation&&(a.globalCompositeOperation=d.compositeOperation),d.shadow&&this._applyShadow(a,d.shadow)},b.cache=function(a,b,c,d,e){e=e||1,this.cacheCanvas||(this.cacheCanvas=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),this._cacheWidth=c,this._cacheHeight=d,this._cacheOffsetX=a,this._cacheOffsetY=b,this._cacheScale=e,this.updateCache()},b.updateCache=function(b){var c,d=this.cacheCanvas,e=this._cacheScale,f=this._cacheOffsetX*e,g=this._cacheOffsetY*e,h=this._cacheWidth,i=this._cacheHeight;if(!d)throw"cache() must be called before updateCache()";var j=d.getContext("2d");(c=this._applyFilterBounds(f,g,h,i))&&(f=c.x,g=c.y,h=c.width,i=c.height),h=Math.ceil(h*e),i=Math.ceil(i*e),h!=d.width||i!=d.height?(d.width=h,d.height=i):b||j.clearRect(0,0,h+1,i+1),j.save(),j.globalCompositeOperation=b,j.setTransform(e,0,0,e,-f,-g),this.draw(j,!0),this._applyFilters(),j.restore(),this.cacheID=a._nextCacheID++},b.uncache=function(){this._cacheDataURL=this.cacheCanvas=null,this.cacheID=this._cacheOffsetX=this._cacheOffsetY=0,this._cacheScale=1},b.getCacheDataURL=function(){return this.cacheCanvas?(this.cacheID!=this._cacheDataURLID&&(this._cacheDataURL=this.cacheCanvas.toDataURL()),this._cacheDataURL):null},b.getStage=function(){for(var a=this;a.parent;)a=a.parent;return a instanceof createjs.Stage?a:null},b.localToGlobal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.globalToLocal=function(a,b){var c=this.getConcatenatedMatrix(this._matrix);return null==c?null:(c.invert(),c.append(1,0,0,1,a,b),new createjs.Point(c.tx,c.ty))},b.localToLocal=function(a,b,c){var d=this.localToGlobal(a,b);return c.globalToLocal(d.x,d.y)},b.setTransform=function(a,b,c,d,e,f,g,h,i){return this.x=a||0,this.y=b||0,this.scaleX=null==c?1:c,this.scaleY=null==d?1:d,this.rotation=e||0,this.skewX=f||0,this.skewY=g||0,this.regX=h||0,this.regY=i||0,this},b.getMatrix=function(a){var b=this;return(a?a.identity():new createjs.Matrix2D).appendTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).appendProperties(b.alpha,b.shadow,b.compositeOperation)},b.getConcatenatedMatrix=function(a){a?a.identity():a=new createjs.Matrix2D;for(var b=this;null!=b;)a.prependTransform(b.x,b.y,b.scaleX,b.scaleY,b.rotation,b.skewX,b.skewY,b.regX,b.regY).prependProperties(b.alpha,b.shadow,b.compositeOperation),b=b.parent;return a},b.hitTest=function(b,c){var d=a._hitTestContext;d.setTransform(1,0,0,1,-b,-c),this.draw(d);
var e=this._testHit(d);return d.setTransform(1,0,0,1,0,0),d.clearRect(0,0,2,2),e},b.set=function(a){for(var b in a)this[b]=a[b];return this},b.getBounds=function(){if(this._bounds)return this._rectangle.copy(this._bounds);var a=this.cacheCanvas;if(a){var b=this._cacheScale;return this._rectangle.initialize(this._cacheOffsetX,this._cacheOffsetY,a.width/b,a.height/b)}return null},b.getTransformedBounds=function(){return this._getBounds()},b.setBounds=function(a,b,c,d){null==a&&(this._bounds=a),this._bounds=(this._bounds||new createjs.Rectangle).initialize(a,b,c,d)},b.clone=function(){var b=new a;return this.cloneProps(b),b},b.toString=function(){return"[DisplayObject (name="+this.name+")]"},b.cloneProps=function(a){a.alpha=this.alpha,a.name=this.name,a.regX=this.regX,a.regY=this.regY,a.rotation=this.rotation,a.scaleX=this.scaleX,a.scaleY=this.scaleY,a.shadow=this.shadow,a.skewX=this.skewX,a.skewY=this.skewY,a.visible=this.visible,a.x=this.x,a.y=this.y,a._bounds=this._bounds,a.mouseEnabled=this.mouseEnabled,a.compositeOperation=this.compositeOperation},b._applyShadow=function(a,b){b=b||Shadow.identity,a.shadowColor=b.color,a.shadowOffsetX=b.offsetX,a.shadowOffsetY=b.offsetY,a.shadowBlur=b.blur},b._tick=function(a){var b=this._listeners;if(b&&b.tick){var c=new createjs.Event("tick");c.params=a,this._dispatchEvent(c,this,2)}},b._testHit=function(b){try{var c=b.getImageData(0,0,1,1).data[3]>1}catch(d){if(!a.suppressCrossDomainErrors)throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images."}return c},b._applyFilters=function(){if(this.filters&&0!=this.filters.length&&this.cacheCanvas)for(var a=this.filters.length,b=this.cacheCanvas.getContext("2d"),c=this.cacheCanvas.width,d=this.cacheCanvas.height,e=0;a>e;e++)this.filters[e].applyFilter(b,0,0,c,d)},b._applyFilterBounds=function(a,b,c,d){var e,f,g=this.filters;if(!g||!(f=g.length))return null;for(var h=0;f>h;h++){var i=this.filters[h],j=i.getBounds&&i.getBounds();j&&(e||(e=this._rectangle.initialize(a,b,c,d)),e.x+=j.x,e.y+=j.y,e.width+=j.width,e.height+=j.height)}return e},b._getBounds=function(a,b){return this._transformBounds(this.getBounds(),a,b)},b._transformBounds=function(a,b,c){if(!a)return a;var d=a.x,e=a.y,f=a.width,g=a.height,h=c?this._matrix.identity():this.getMatrix(this._matrix);(d||e)&&h.appendTransform(0,0,1,1,0,0,0,-d,-e),b&&h.prependMatrix(b);var i=f*h.a,j=f*h.b,k=g*h.c,l=g*h.d,m=h.tx,n=h.ty,o=m,p=m,q=n,r=n;return(d=i+m)<o?o=d:d>p&&(p=d),(d=i+k+m)<o?o=d:d>p&&(p=d),(d=k+m)<o?o=d:d>p&&(p=d),(e=j+n)<q?q=e:e>r&&(r=e),(e=j+l+n)<q?q=e:e>r&&(r=e),(e=l+n)<q?q=e:e>r&&(r=e),a.initialize(o,q,p-o,r-q)},b._hasMouseEventListener=function(){for(var b=a._MOUSE_EVENTS,c=0,d=b.length;d>c;c++)if(this.hasEventListener(b[c]))return!0;return!!this.cursor},createjs.DisplayObject=a}(),this.createjs=this.createjs||{},function(){var a=function(){this.initialize()},b=a.prototype=new createjs.DisplayObject;b.children=null,b.mouseChildren=!0,b.tickChildren=!0,b.DisplayObject_initialize=b.initialize,b.initialize=function(){this.DisplayObject_initialize(),this.children=[]},b.isVisible=function(){var a=this.cacheCanvas||this.children.length;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;for(var c=this.children.slice(0),d=0,e=c.length;e>d;d++){var f=c[d];f.isVisible()&&(a.save(),f.updateContext(a),f.draw(a),a.restore())}return!0},b.addChild=function(a){if(null==a)return a;var b=arguments.length;if(b>1){for(var c=0;b>c;c++)this.addChild(arguments[c]);return arguments[b-1]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.push(a),a},b.addChildAt=function(a,b){var c=arguments.length,d=arguments[c-1];if(0>d||d>this.children.length)return arguments[c-2];if(c>2){for(var e=0;c-1>e;e++)this.addChildAt(arguments[e],d+e);return arguments[c-2]}return a.parent&&a.parent.removeChild(a),a.parent=this,this.children.splice(b,0,a),a},b.removeChild=function(a){var b=arguments.length;if(b>1){for(var c=!0,d=0;b>d;d++)c=c&&this.removeChild(arguments[d]);return c}return this.removeChildAt(createjs.indexOf(this.children,a))},b.removeChildAt=function(a){var b=arguments.length;if(b>1){for(var c=[],d=0;b>d;d++)c[d]=arguments[d];c.sort(function(a,b){return b-a});for(var e=!0,d=0;b>d;d++)e=e&&this.removeChildAt(c[d]);return e}if(0>a||a>this.children.length-1)return!1;var f=this.children[a];return f&&(f.parent=null),this.children.splice(a,1),!0},b.removeAllChildren=function(){for(var a=this.children;a.length;)a.pop().parent=null},b.getChildAt=function(a){return this.children[a]},b.getChildByName=function(a){for(var b=this.children,c=0,d=b.length;d>c;c++)if(b[c].name==a)return b[c];return null},b.sortChildren=function(a){this.children.sort(a)},b.getChildIndex=function(a){return createjs.indexOf(this.children,a)},b.getNumChildren=function(){return this.children.length},b.swapChildrenAt=function(a,b){var c=this.children,d=c[a],e=c[b];d&&e&&(c[a]=e,c[b]=d)},b.swapChildren=function(a,b){for(var c,d,e=this.children,f=0,g=e.length;g>f&&(e[f]==a&&(c=f),e[f]==b&&(d=f),null==c||null==d);f++);f!=g&&(e[c]=b,e[d]=a)},b.setChildIndex=function(a,b){var c=this.children,d=c.length;if(!(a.parent!=this||0>b||b>=d)){for(var e=0;d>e&&c[e]!=a;e++);e!=d&&e!=b&&(c.splice(e,1),c.splice(b,0,a))}},b.contains=function(a){for(;a;){if(a==this)return!0;a=a.parent}return!1},b.hitTest=function(a,b){return null!=this.getObjectUnderPoint(a,b)},b.getObjectsUnderPoint=function(a,b){var c=[],d=this.localToGlobal(a,b);return this._getObjectsUnderPoint(d.x,d.y,c),c},b.getObjectUnderPoint=function(a,b){var c=this.localToGlobal(a,b);return this._getObjectsUnderPoint(c.x,c.y)},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this._getBounds(null,!0)},b.getTransformedBounds=function(){return this._getBounds()},b.clone=function(b){var c=new a;if(this.cloneProps(c),b)for(var d=c.children=[],e=0,f=this.children.length;f>e;e++){var g=this.children[e].clone(b);g.parent=c,d.push(g)}return c},b.toString=function(){return"[Container (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){if(this.tickChildren)for(var b=this.children.length-1;b>=0;b--){var c=this.children[b];c.tickEnabled&&c._tick&&c._tick(a)}this.DisplayObject__tick(a)},b._getObjectsUnderPoint=function(b,c,d,e,f){var g=createjs.DisplayObject._hitTestContext,h=this._matrix;f=f||e&&this._hasMouseEventListener();for(var i=this.children,j=i.length,k=j-1;k>=0;k--){var l=i[k],m=l.hitArea;if(l.visible&&(m||l.isVisible())&&(!e||l.mouseEnabled))if(!m&&l instanceof a){var n=l._getObjectsUnderPoint(b,c,d,e,f);if(!d&&n)return e&&!this.mouseChildren?this:n}else{if(!f&&!l._hasMouseEventListener())continue;if(l.getConcatenatedMatrix(h),m&&(h.appendTransform(m.x,m.y,m.scaleX,m.scaleY,m.rotation,m.skewX,m.skewY,m.regX,m.regY),h.alpha=m.alpha),g.globalAlpha=h.alpha,g.setTransform(h.a,h.b,h.c,h.d,h.tx-b,h.ty-c),(m||l).draw(g),!this._testHit(g))continue;if(g.setTransform(1,0,0,1,0,0),g.clearRect(0,0,2,2),!d)return e&&!this.mouseChildren?this:l;d.push(l)}}return null},b._getBounds=function(a,b){var c=this.DisplayObject_getBounds();if(c)return this._transformBounds(c,a,b);var d,e,f,g,h=b?this._matrix.identity():this.getMatrix(this._matrix);a&&h.prependMatrix(a);for(var i=this.children.length,j=0;i>j;j++){var k=this.children[j];if(k.visible&&(c=k._getBounds(h))){var l=c.x,m=c.y,n=l+c.width,o=m+c.height;(d>l||null==d)&&(d=l),(n>e||null==e)&&(e=n),(f>m||null==f)&&(f=m),(o>g||null==g)&&(g=o)}}return null==e?null:this._rectangle.initialize(d,f,e-d,g-f)},createjs.Container=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Container;a._snapToPixelEnabled=!1,b.autoClear=!0,b.canvas=null,b.mouseX=0,b.mouseY=0,b.snapToPixelEnabled=!1,b.mouseInBounds=!1,b.tickOnUpdate=!0,b.mouseMoveOutside=!1,b.nextStage=null,b._pointerData=null,b._pointerCount=0,b._primaryPointerID=null,b._mouseOverIntervalID=null,b.Container_initialize=b.initialize,b.initialize=function(a){this.Container_initialize(),this.canvas="string"==typeof a?document.getElementById(a):a,this._pointerData={},this.enableDOMEvents(!0)},b.update=function(){if(this.canvas){this.tickOnUpdate&&(this.dispatchEvent("tickstart"),this.tickEnabled&&this._tick(arguments.length?arguments:null),this.dispatchEvent("tickend")),this.dispatchEvent("drawstart"),a._snapToPixelEnabled=this.snapToPixelEnabled,this.autoClear&&this.clear();var b=this.canvas.getContext("2d");b.save(),this.updateContext(b),this.draw(b,!1),b.restore(),this.dispatchEvent("drawend")}},b.handleEvent=function(a){"tick"==a.type&&this.update(a)},b.clear=function(){if(this.canvas){var a=this.canvas.getContext("2d");a.setTransform(1,0,0,1,0,0),a.clearRect(0,0,this.canvas.width+1,this.canvas.height+1)}},b.toDataURL=function(a,b){b||(b="image/png");var c,d=this.canvas.getContext("2d"),e=this.canvas.width,f=this.canvas.height;if(a){c=d.getImageData(0,0,e,f);var g=d.globalCompositeOperation;d.globalCompositeOperation="destination-over",d.fillStyle=a,d.fillRect(0,0,e,f)}var h=this.canvas.toDataURL(b);return a&&(d.clearRect(0,0,e+1,f+1),d.putImageData(c,0,0),d.globalCompositeOperation=g),h},b.enableMouseOver=function(a){if(this._mouseOverIntervalID&&(clearInterval(this._mouseOverIntervalID),this._mouseOverIntervalID=null,0==a&&this._testMouseOver(!0)),null==a)a=20;else if(0>=a)return;var b=this;this._mouseOverIntervalID=setInterval(function(){b._testMouseOver()},1e3/Math.min(50,a))},b.enableDOMEvents=function(a){null==a&&(a=!0);var b,c,d=this._eventListeners;if(!a&&d){for(b in d)c=d[b],c.t.removeEventListener(b,c.f,!1);this._eventListeners=null}else if(a&&!d&&this.canvas){var e=window.addEventListener?window:document,f=this;d=this._eventListeners={},d.mouseup={t:e,f:function(a){f._handleMouseUp(a)}},d.mousemove={t:e,f:function(a){f._handleMouseMove(a)}},d.dblclick={t:this.canvas,f:function(a){f._handleDoubleClick(a)}},d.mousedown={t:this.canvas,f:function(a){f._handleMouseDown(a)}};for(b in d)c=d[b],c.t.addEventListener(b,c.f,!1)}},b.clone=function(){var b=new a(null);return this.cloneProps(b),b},b.toString=function(){return"[Stage (name="+this.name+")]"},b._getElementRect=function(a){var b;try{b=a.getBoundingClientRect()}catch(c){b={top:a.offsetTop,left:a.offsetLeft,width:a.offsetWidth,height:a.offsetHeight}}var d=(window.pageXOffset||document.scrollLeft||0)-(document.clientLeft||document.body.clientLeft||0),e=(window.pageYOffset||document.scrollTop||0)-(document.clientTop||document.body.clientTop||0),f=window.getComputedStyle?getComputedStyle(a):a.currentStyle,g=parseInt(f.paddingLeft)+parseInt(f.borderLeftWidth),h=parseInt(f.paddingTop)+parseInt(f.borderTopWidth),i=parseInt(f.paddingRight)+parseInt(f.borderRightWidth),j=parseInt(f.paddingBottom)+parseInt(f.borderBottomWidth);return{left:b.left+d+g,right:b.right+d-i,top:b.top+e+h,bottom:b.bottom+e-j}},b._getPointerData=function(a){var b=this._pointerData[a];return b||(b=this._pointerData[a]={x:0,y:0},null==this._primaryPointerID&&(this._primaryPointerID=a),(null==this._primaryPointerID||-1==this._primaryPointerID)&&(this._primaryPointerID=a)),b},b._handleMouseMove=function(a){a||(a=window.event),this._handlePointerMove(-1,a,a.pageX,a.pageY)},b._handlePointerMove=function(a,b,c,d){if(this.canvas){var e=this._getPointerData(a),f=e.inBounds;if(this._updatePointerPosition(a,b,c,d),f||e.inBounds||this.mouseMoveOutside){-1==a&&e.inBounds==!f&&this._dispatchMouseEvent(this,f?"mouseleave":"mouseenter",!1,a,e,b),this._dispatchMouseEvent(this,"stagemousemove",!1,a,e,b),this._dispatchMouseEvent(e.target,"pressmove",!0,a,e,b);var g=e.event;g&&g.hasEventListener("mousemove")&&g.dispatchEvent(new createjs.MouseEvent("mousemove",!1,!1,e.x,e.y,b,a,a==this._primaryPointerID,e.rawX,e.rawY),e.target),this.nextStage&&this.nextStage._handlePointerMove(a,b,c,d)}}},b._updatePointerPosition=function(a,b,c,d){var e=this._getElementRect(this.canvas);c-=e.left,d-=e.top;var f=this.canvas.width,g=this.canvas.height;c/=(e.right-e.left)/f,d/=(e.bottom-e.top)/g;var h=this._getPointerData(a);(h.inBounds=c>=0&&d>=0&&f-1>=c&&g-1>=d)?(h.x=c,h.y=d):this.mouseMoveOutside&&(h.x=0>c?0:c>f-1?f-1:c,h.y=0>d?0:d>g-1?g-1:d),h.posEvtObj=b,h.rawX=c,h.rawY=d,a==this._primaryPointerID&&(this.mouseX=h.x,this.mouseY=h.y,this.mouseInBounds=h.inBounds)},b._handleMouseUp=function(a){this._handlePointerUp(-1,a,!1)},b._handlePointerUp=function(a,b,c){var d=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemouseup",!1,a,d,b);var e=d.target;e&&(this._getObjectsUnderPoint(d.x,d.y,null,!0)==e&&this._dispatchMouseEvent(e,"click",!0,a,d,b),this._dispatchMouseEvent(e,"pressup",!0,a,d,b));var f=d.event;f&&f.hasEventListener("mouseup")&&f.dispatchEvent(new createjs.MouseEvent("mouseup",!1,!1,d.x,d.y,b,a,a==this._primaryPointerID,d.rawX,d.rawY),e),c?(a==this._primaryPointerID&&(this._primaryPointerID=null),delete this._pointerData[a]):d.event=d.target=null,this.nextStage&&this.nextStage._handlePointerUp(a,b,c)},b._handleMouseDown=function(a){this._handlePointerDown(-1,a,a.pageX,a.pageY)},b._handlePointerDown=function(a,b,c,d){null!=d&&this._updatePointerPosition(a,b,c,d);var e=this._getPointerData(a);this._dispatchMouseEvent(this,"stagemousedown",!1,a,e,b),e.target=this._getObjectsUnderPoint(e.x,e.y,null,!0),e.event=this._dispatchMouseEvent(e.target,"mousedown",!0,a,e,b),this.nextStage&&this.nextStage._handlePointerDown(a,b,c,d)},b._testMouseOver=function(a){if(-1==this._primaryPointerID&&(a||this.mouseX!=this._mouseOverX||this.mouseY!=this._mouseOverY||!this.mouseInBounds)){var b,c,d,e,f=this._getPointerData(-1),g=f.posEvtObj,h=-1,i="";(a||this.mouseInBounds&&g&&g.target==this.canvas)&&(b=this._getObjectsUnderPoint(this.mouseX,this.mouseY,null,!0),this._mouseOverX=this.mouseX,this._mouseOverY=this.mouseY);var j=this._mouseOverTarget||[],k=j[j.length-1],l=this._mouseOverTarget=[];for(c=b;c;)l.unshift(c),null!=c.cursor&&(i=c.cursor),c=c.parent;for(this.canvas.style.cursor=i,d=0,e=l.length;e>d&&l[d]==j[d];d++)h=d;for(k!=b&&this._dispatchMouseEvent(k,"mouseout",!0,-1,f,g),d=j.length-1;d>h;d--)this._dispatchMouseEvent(j[d],"rollout",!1,-1,f,g);for(d=l.length-1;d>h;d--)this._dispatchMouseEvent(l[d],"rollover",!1,-1,f,g);k!=b&&this._dispatchMouseEvent(b,"mouseover",!0,-1,f,g)}},b._handleDoubleClick=function(a){var b=this._getPointerData(-1),c=this._getObjectsUnderPoint(b.x,b.y,null,!0);this._dispatchMouseEvent(c,"dblclick",!0,-1,b,a),this.nextStage&&this.nextStage._handleDoubleClick(a)},b._dispatchMouseEvent=function(a,b,c,d,e,f){if(a&&(c||a.hasEventListener(b))){var g=new createjs.MouseEvent(b,c,!1,e.x,e.y,f,d,d==this._primaryPointerID,e.rawX,e.rawY);return a.dispatchEvent(g),g}},createjs.Stage=a}(),this.createjs=this.createjs||{},function(){var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.image=null,b.snapToPixel=!0,b.sourceRect=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),"string"==typeof a?(this.image=document.createElement("img"),this.image.src=a):this.image=a},b.isVisible=function(){var a=this.cacheCanvas||this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.sourceRect;return c?a.drawImage(this.image,c.x,c.y,c.width,c.height,0,0,c.width,c.height):a.drawImage(this.image,0,0),!0},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var a=this.DisplayObject_getBounds();if(a)return a;var b=this.sourceRect||this.image,c=this.image&&(this.image.complete||this.image.getContext||this.image.readyState>=2);return c?this._rectangle.initialize(0,0,b.width,b.height):null},b.clone=function(){var b=new a(this.image);return this.sourceRect&&(b.sourceRect=this.sourceRect.clone()),this.cloneProps(b),b},b.toString=function(){return"[Bitmap (name="+this.name+")]"},createjs.Bitmap=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b){this.initialize(a,b)},b=a.prototype=new createjs.DisplayObject;b.currentFrame=0,b.currentAnimation=null,b.paused=!0,b.spriteSheet=null,b.snapToPixel=!0,b.offset=0,b.currentAnimationFrame=0,b.framerate=0,b._advanceCount=0,b._animation=null,b._currentFrame=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.spriteSheet=a,b&&this.gotoAndPlay(b)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet.complete;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;this._normalizeFrame();var c=this.spriteSheet.getFrame(0|this._currentFrame);if(!c)return!1;var d=c.rect;return a.drawImage(c.image,d.x,d.y,d.width,d.height,-c.regX,-c.regY,d.width,d.height),!0},b.play=function(){this.paused=!1},b.stop=function(){this.paused=!0},b.gotoAndPlay=function(a){this.paused=!1,this._goto(a)},b.gotoAndStop=function(a){this.paused=!0,this._goto(a)},b.advance=function(a){var b=this._animation&&this._animation.speed||1,c=this.framerate||this.spriteSheet.framerate,d=c&&null!=a?a/(1e3/c):1;this._animation?this.currentAnimationFrame+=d*b:this._currentFrame+=d*b,this._normalizeFrame()},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){return this.DisplayObject_getBounds()||this.spriteSheet.getFrameBounds(this.currentFrame,this._rectangle)},b.clone=function(){var b=new a(this.spriteSheet);return this.cloneProps(b),b},b.toString=function(){return"[Sprite (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){this.paused||this.advance(a&&a[0]&&a[0].delta),this.DisplayObject__tick(a)},b._normalizeFrame=function(){var a,b=this._animation,c=this.paused,d=this._currentFrame,e=this.currentAnimationFrame;if(b)if(a=b.frames.length,(0|e)>=a){var f=b.next;if(this._dispatchAnimationEnd(b,d,c,f,a-1));else{if(f)return this._goto(f,e-a);this.paused=!0,e=this.currentAnimationFrame=b.frames.length-1,this._currentFrame=b.frames[e]}}else this._currentFrame=b.frames[0|e];else if(a=this.spriteSheet.getNumFrames(),d>=a&&!this._dispatchAnimationEnd(b,d,c,a-1)&&(this._currentFrame-=a)>=a)return this._normalizeFrame();this.currentFrame=0|this._currentFrame},b._dispatchAnimationEnd=function(a,b,c,d,e){var f=a?a.name:null;if(this.hasEventListener("animationend")){var g=new createjs.Event("animationend");g.name=f,g.next=d,this.dispatchEvent(g)}var h=this._animation!=a||this._currentFrame!=b;return h||c||!this.paused||(this.currentAnimationFrame=e,h=!0),h},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.currentFrame=this.currentFrame,a._currentFrame=this._currentFrame,a.currentAnimation=this.currentAnimation,a.paused=this.paused,a._animation=this._animation,a.currentAnimationFrame=this.currentAnimationFrame,a.framerate=this.framerate},b._goto=function(a,b){if(isNaN(a)){var c=this.spriteSheet.getAnimation(a);c&&(this.currentAnimationFrame=b||0,this._animation=c,this.currentAnimation=a,this._normalizeFrame())}else this.currentAnimationFrame=0,this.currentAnimation=this._animation=null,this._currentFrame=a,this._normalizeFrame()},createjs.Sprite=a}(),this.createjs=this.createjs||{},function(){"use strict";var a="BitmapAnimation is deprecated in favour of Sprite. See VERSIONS file for info on changes.";if(!createjs.Sprite)throw a;(createjs.BitmapAnimation=function(b){console.log(a),this.initialize(b)}).prototype=new createjs.Sprite}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.graphics=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){this.DisplayObject_initialize(),this.graphics=a?a:new createjs.Graphics},b.isVisible=function(){var a=this.cacheCanvas||this.graphics&&!this.graphics.isEmpty();return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this.graphics.draw(a),!0)},b.clone=function(b){var c=new a(b&&this.graphics?this.graphics.clone():this.graphics);return this.cloneProps(c),c},b.toString=function(){return"[Shape (name="+this.name+")]"},createjs.Shape=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.DisplayObject,c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");c.getContext&&(a._workingContext=c.getContext("2d"),c.width=c.height=1),a.H_OFFSETS={start:0,left:0,center:-.5,end:-1,right:-1},a.V_OFFSETS={top:0,hanging:-.01,middle:-.4,alphabetic:-.8,ideographic:-.85,bottom:-1},b.text="",b.font=null,b.color=null,b.textAlign="left",b.textBaseline="top",b.maxWidth=null,b.outline=0,b.lineHeight=0,b.lineWidth=null,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b,c){this.DisplayObject_initialize(),this.text=a,this.font=b,this.color=c},b.isVisible=function(){var a=this.cacheCanvas||null!=this.text&&""!==this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.DisplayObject_draw=b.draw,b.draw=function(a,b){if(this.DisplayObject_draw(a,b))return!0;var c=this.color||"#000";return this.outline?(a.strokeStyle=c,a.lineWidth=1*this.outline):a.fillStyle=c,this._drawText(this._prepContext(a)),!0},b.getMeasuredWidth=function(){return this._prepContext(a._workingContext).measureText(this.text).width},b.getMeasuredLineHeight=function(){return 1.2*this._prepContext(a._workingContext).measureText("M").width},b.getMeasuredHeight=function(){return this._drawText(null,{}).height},b.DisplayObject_getBounds=b.getBounds,b.getBounds=function(){var b=this.DisplayObject_getBounds();if(b)return b;if(null==this.text||""==this.text)return null;var c=this._drawText(null,{}),d=this.maxWidth&&this.maxWidth<c.width?this.maxWidth:c.width,e=d*a.H_OFFSETS[this.textAlign||"left"],f=this.lineHeight||this.getMeasuredLineHeight(),g=f*a.V_OFFSETS[this.textBaseline||"top"];return this._rectangle.initialize(e,g,d,c.height)},b.clone=function(){var b=new a(this.text,this.font,this.color);return this.cloneProps(b),b},b.toString=function(){return"[Text (text="+(this.text.length>20?this.text.substr(0,17)+"...":this.text)+")]"},b.DisplayObject_cloneProps=b.cloneProps,b.cloneProps=function(a){this.DisplayObject_cloneProps(a),a.textAlign=this.textAlign,a.textBaseline=this.textBaseline,a.maxWidth=this.maxWidth,a.outline=this.outline,a.lineHeight=this.lineHeight,a.lineWidth=this.lineWidth},b._prepContext=function(a){return a.font=this.font,a.textAlign=this.textAlign||"left",a.textBaseline=this.textBaseline||"top",a},b._drawText=function(b,c){var d=!!b;d||(b=this._prepContext(a._workingContext));for(var e=this.lineHeight||this.getMeasuredLineHeight(),f=0,g=0,h=String(this.text).split(/(?:\r\n|\r|\n)/),i=0,j=h.length;j>i;i++){var k=h[i],l=null;if(null!=this.lineWidth&&(l=b.measureText(k).width)>this.lineWidth){var m=k.split(/(\s)/);k=m[0],l=b.measureText(k).width;for(var n=1,o=m.length;o>n;n+=2){var p=b.measureText(m[n]+m[n+1]).width;l+p>this.lineWidth?(d&&this._drawTextLine(b,k,g*e),l>f&&(f=l),k=m[n+1],l=b.measureText(k).width,g++):(k+=m[n]+m[n+1],l+=p)}}d&&this._drawTextLine(b,k,g*e),c&&null==l&&(l=b.measureText(k).width),l>f&&(f=l),g++}return c&&(c.count=g,c.width=f,c.height=g*e),c},b._drawTextLine=function(a,b,c){this.outline?a.strokeText(b,0,c,this.maxWidth||65535):a.fillText(b,0,c,this.maxWidth||65535)},createjs.Text=a}(),this.createjs=this.createjs||{},function(){"use strict";function a(a,b){this.initialize(a,b)}var b=a.prototype=new createjs.DisplayObject;b.text="",b.spriteSheet=null,b.lineHeight=0,b.letterSpacing=0,b.spaceWidth=0,b.DisplayObject_initialize=b.initialize,b.initialize=function(a,b){this.DisplayObject_initialize(),this.text=a,this.spriteSheet=b},b.DisplayObject_draw=b.draw,b.draw=function(a,b){return this.DisplayObject_draw(a,b)?!0:(this._drawText(a),void 0)},b.isVisible=function(){var a=this.cacheCanvas||this.spriteSheet&&this.spriteSheet.complete&&this.text;return!!(this.visible&&this.alpha>0&&0!=this.scaleX&&0!=this.scaleY&&a)},b.getBounds=function(){var a=this._rectangle;return this._drawText(null,a),a.width?a:null},b._getFrame=function(a,b){var c,d=b.getAnimation(a);return d||(a!=(c=a.toUpperCase())||a!=(c=a.toLowerCase())||(c=null),c&&(d=b.getAnimation(c))),d&&b.getFrame(d.frames[0])},b._getLineHeight=function(a){var b=this._getFrame("1",a)||this._getFrame("T",a)||this._getFrame("L",a)||a.getFrame(0);return b?b.rect.height:1},b._getSpaceWidth=function(a){var b=this._getFrame("1",a)||this._getFrame("l",a)||this._getFrame("e",a)||this._getFrame("a",a)||a.getFrame(0);return b?b.rect.width:1},b._drawText=function(a,b){var c,d,e,f=0,g=0,h=this.spaceWidth,i=this.lineHeight,j=this.spriteSheet,k=!!this._getFrame(" ",j);k||0!=h||(h=this._getSpaceWidth(j)),0==i&&(i=this._getLineHeight(j));for(var l=0,m=0,n=this.text.length;n>m;m++){var o=this.text.charAt(m);if(k||" "!=o)if("\n"!=o&&"\r"!=o){var p=this._getFrame(o,j);if(p){var q=p.rect;e=p.regX,c=q.width,a&&a.drawImage(p.image,q.x,q.y,c,d=q.height,f-e,g-p.regY,c,d),f+=c+this.letterSpacing}}else"\r"==o&&"\n"==this.text.charAt(m+1)&&m++,f-e>l&&(l=f-e),f=0,g+=i;else f+=h}f-e>l&&(l=f-e),b&&(b.width=l-this.letterSpacing,b.height=g+i)},createjs.BitmapText=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"SpriteSheetUtils cannot be instantiated"},b=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");b.getContext&&(a._workingCanvas=b,a._workingContext=b.getContext("2d"),b.width=b.height=1),a.addFlippedFrames=function(b,c,d,e){if(c||d||e){var f=0;c&&a._flip(b,++f,!0,!1),d&&a._flip(b,++f,!1,!0),e&&a._flip(b,++f,!0,!0)}},a.extractFrame=function(b,c){isNaN(c)&&(c=b.getAnimation(c).frames[0]);var d=b.getFrame(c);if(!d)return null;var e=d.rect,f=a._workingCanvas;f.width=e.width,f.height=e.height,a._workingContext.drawImage(d.image,e.x,e.y,e.width,e.height,0,0,e.width,e.height);var g=document.createElement("img");return g.src=f.toDataURL("image/png"),g},a.mergeAlpha=function(a,b,c){c||(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas")),c.width=Math.max(b.width,a.width),c.height=Math.max(b.height,a.height);var d=c.getContext("2d");return d.save(),d.drawImage(a,0,0),d.globalCompositeOperation="destination-in",d.drawImage(b,0,0),d.restore(),c},a._flip=function(b,c,d,e){for(var f=b._images,g=a._workingCanvas,h=a._workingContext,i=f.length/c,j=0;i>j;j++){var k=f[j];k.__tmp=j,h.setTransform(1,0,0,1,0,0),h.clearRect(0,0,g.width+1,g.height+1),g.width=k.width,g.height=k.height,h.setTransform(d?-1:1,0,0,e?-1:1,d?k.width:0,e?k.height:0),h.drawImage(k,0,0);var l=document.createElement("img");l.src=g.toDataURL("image/png"),l.width=k.width,l.height=k.height,f.push(l)}var m=b._frames,n=m.length/c;for(j=0;n>j;j++){k=m[j];var o=k.rect.clone();l=f[k.image.__tmp+i*c];var p={image:l,rect:o,regX:k.regX,regY:k.regY};d&&(o.x=l.width-o.x-o.width,p.regX=o.width-k.regX),e&&(o.y=l.height-o.y-o.height,p.regY=o.height-k.regY),m.push(p)}var q="_"+(d?"h":"")+(e?"v":""),r=b._animations,s=b._data,t=r.length/c;for(j=0;t>j;j++){var u=r[j];k=s[u];var v={name:u+q,speed:k.speed,next:k.next,frames:[]};k.next&&(v.next+=q),m=k.frames;for(var w=0,x=m.length;x>w;w++)v.frames.push(m[w]+n*c);s[v.name]=v,r.push(v.name)}},createjs.SpriteSheetUtils=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){this.initialize()},b=a.prototype=new createjs.EventDispatcher;a.ERR_DIMENSIONS="frame dimensions exceed max spritesheet dimensions",a.ERR_RUNNING="a build is already running",b.maxWidth=2048,b.maxHeight=2048,b.spriteSheet=null,b.scale=1,b.padding=1,b.timeSlice=.3,b.progress=-1,b._frames=null,b._animations=null,b._data=null,b._nextFrameIndex=0,b._index=0,b._timerID=null,b._scale=1,b.initialize=function(){this._frames=[],this._animations={}},b.addFrame=function(b,c,d,e,f,g){if(this._data)throw a.ERR_RUNNING;var h=c||b.bounds||b.nominalBounds;return!h&&b.getBounds&&(h=b.getBounds()),h?(d=d||1,this._frames.push({source:b,sourceRect:h,scale:d,funct:e,params:f,scope:g,index:this._frames.length,height:h.height*d})-1):null},b.addAnimation=function(b,c,d,e){if(this._data)throw a.ERR_RUNNING;this._animations[b]={frames:c,next:d,frequency:e}},b.addMovieClip=function(b,c,d){if(this._data)throw a.ERR_RUNNING;var e=b.frameBounds,f=c||b.bounds||b.nominalBounds;if(!f&&b.getBounds&&(f=b.getBounds()),!f&&!e)return null;for(var g=this._frames.length,h=b.timeline.duration,i=0;h>i;i++){var j=e&&e[i]?e[i]:f;this.addFrame(b,j,d,function(a){var b=this.actionsEnabled;this.actionsEnabled=!1,this.gotoAndStop(a),this.actionsEnabled=b},[i],b)}var k=b.timeline._labels,l=[];for(var m in k)l.push({index:k[m],label:m});if(l.length){l.sort(function(a,b){return a.index-b.index});for(var i=0,n=l.length;n>i;i++){for(var o=l[i].label,p=g+l[i].index,q=g+(i==n-1?h:l[i+1].index),r=[],s=p;q>s;s++)r.push(s);this.addAnimation(o,r,!0)}}},b.build=function(){if(this._data)throw a.ERR_RUNNING;for(this._startBuild();this._drawNext(););return this._endBuild(),this.spriteSheet},b.buildAsync=function(b){if(this._data)throw a.ERR_RUNNING;this.timeSlice=b,this._startBuild();var c=this;this._timerID=setTimeout(function(){c._run()},50-50*Math.max(.01,Math.min(.99,this.timeSlice||.3)))},b.stopAsync=function(){clearTimeout(this._timerID),this._data=null},b.clone=function(){throw"SpriteSheetBuilder cannot be cloned."},b.toString=function(){return"[SpriteSheetBuilder]"},b._startBuild=function(){var b=this.padding||0;this.progress=0,this.spriteSheet=null,this._index=0,this._scale=this.scale;var c=[];this._data={images:[],frames:c,animations:this._animations};var d=this._frames.slice();if(d.sort(function(a,b){return a.height<=b.height?-1:1}),d[d.length-1].height+2*b>this.maxHeight)throw a.ERR_DIMENSIONS;for(var e=0,f=0,g=0;d.length;){var h=this._fillRow(d,e,g,c,b);if(h.w>f&&(f=h.w),e+=h.h,!h.h||!d.length){var i=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");i.width=this._getSize(f,this.maxWidth),i.height=this._getSize(e,this.maxHeight),this._data.images[g]=i,h.h||(f=e=0,g++)}}},b._getSize=function(a,b){for(var c=4;Math.pow(2,++c)<a;);return Math.min(b,Math.pow(2,c))},b._fillRow=function(b,c,d,e,f){var g=this.maxWidth,h=this.maxHeight;c+=f;for(var i=h-c,j=f,k=0,l=b.length-1;l>=0;l--){var m=b[l],n=this._scale*m.scale,o=m.sourceRect,p=m.source,q=Math.floor(n*o.x-f),r=Math.floor(n*o.y-f),s=Math.ceil(n*o.height+2*f),t=Math.ceil(n*o.width+2*f);if(t>g)throw a.ERR_DIMENSIONS;s>i||j+t>g||(m.img=d,m.rect=new createjs.Rectangle(j,c,t,s),k=k||s,b.splice(l,1),e[m.index]=[j,c,t,s,d,Math.round(-q+n*p.regX-f),Math.round(-r+n*p.regY-f)],j+=t)}return{w:j,h:k}},b._endBuild=function(){this.spriteSheet=new createjs.SpriteSheet(this._data),this._data=null,this.progress=1,this.dispatchEvent("complete")},b._run=function(){for(var a=50*Math.max(.01,Math.min(.99,this.timeSlice||.3)),b=(new Date).getTime()+a,c=!1;b>(new Date).getTime();)if(!this._drawNext()){c=!0;break}if(c)this._endBuild();else{var d=this;this._timerID=setTimeout(function(){d._run()},50-a)}var e=this.progress=this._index/this._frames.length;if(this.hasEventListener("progress")){var f=new createjs.Event("progress");f.progress=e,this.dispatchEvent(f)}},b._drawNext=function(){var a=this._frames[this._index],b=a.scale*this._scale,c=a.rect,d=a.sourceRect,e=this._data.images[a.img],f=e.getContext("2d");return a.funct&&a.funct.apply(a.scope,a.params),f.save(),f.beginPath(),f.rect(c.x,c.y,c.width,c.height),f.clip(),f.translate(Math.ceil(c.x-d.x*b),Math.ceil(c.y-d.y*b)),f.scale(b,b),a.source.draw(f),f.restore(),++this._index<this._frames.length},createjs.SpriteSheetBuilder=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.DisplayObject;b.htmlElement=null,b._oldMtx=null,b._visible=!1,b.DisplayObject_initialize=b.initialize,b.initialize=function(a){"string"==typeof a&&(a=document.getElementById(a)),this.DisplayObject_initialize(),this.mouseEnabled=!1,this.htmlElement=a;
var b=a.style;b.position="absolute",b.transformOrigin=b.WebkitTransformOrigin=b.msTransformOrigin=b.MozTransformOrigin=b.OTransformOrigin="0% 0%"},b.isVisible=function(){return null!=this.htmlElement},b.draw=function(){return this.visible&&(this._visible=!0),!0},b.cache=function(){},b.uncache=function(){},b.updateCache=function(){},b.hitTest=function(){},b.localToGlobal=function(){},b.globalToLocal=function(){},b.localToLocal=function(){},b.clone=function(){throw"DOMElement cannot be cloned."},b.toString=function(){return"[DOMElement (name="+this.name+")]"},b.DisplayObject__tick=b._tick,b._tick=function(a){var b=this.getStage();this._visible=!1,b&&b.on("drawend",this._handleDrawEnd,this,!0),this.DisplayObject__tick(a)},b._handleDrawEnd=function(){var a=this.htmlElement;if(a){var b=a.style,c=this._visible?"visible":"hidden";if(c!=b.visibility&&(b.visibility=c),this._visible){var d=this.getConcatenatedMatrix(this._matrix),e=this._oldMtx,f=1e4;if(e&&e.alpha==d.alpha||(b.opacity=""+(0|d.alpha*f)/f,e&&(e.alpha=d.alpha)),!e||e.tx!=d.tx||e.ty!=d.ty||e.a!=d.a||e.b!=d.b||e.c!=d.c||e.d!=d.d){var g="matrix("+(0|d.a*f)/f+","+(0|d.b*f)/f+","+(0|d.c*f)/f+","+(0|d.d*f)/f+","+(0|d.tx+.5);b.transform=b.WebkitTransform=b.OTransform=b.msTransform=g+","+(0|d.ty+.5)+")",b.MozTransform=g+"px,"+(0|d.ty+.5)+"px)",this._oldMtx=e?e.copy(d):d.clone()}}}},createjs.DOMElement=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){this.initialize()},b=a.prototype;b.initialize=function(){},b.getBounds=function(){return null},b.applyFilter=function(){},b.toString=function(){return"[Filter]"},b.clone=function(){return new a},createjs.Filter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.Filter;b.initialize=function(a,b,c){(isNaN(a)||0>a)&&(a=0),this.blurX=0|a,(isNaN(b)||0>b)&&(b=0),this.blurY=0|b,(isNaN(c)||1>c)&&(c=1),this.quality=0|c},b.blurX=0,b.blurY=0,b.quality=1,b.mul_table=[1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1],b.shg_table=[0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9],b.getBounds=function(){var a=.5*Math.pow(this.quality,.6);return new createjs.Rectangle(-this.blurX*a,-this.blurY*a,2*this.blurX*a,2*this.blurY*a)},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}var k=this.blurX/2;if(isNaN(k)||0>k)return!1;k|=0;var l=this.blurY/2;if(isNaN(l)||0>l)return!1;if(l|=0,0==k&&0==l)return!1;var m=this.quality;(isNaN(m)||1>m)&&(m=1),m|=0,m>3&&(m=3),1>m&&(m=1);var b,c,n,o,p,q,r,s,t,u,v,w,x,y,z,A=i.data,B=k+k+1,C=l+l+1,D=d-1,E=e-1,F=k+1,G=l+1,H={r:0,b:0,g:0,a:0,next:null},I=H;for(n=1;B>n;n++)I=I.next={r:0,b:0,g:0,a:0,next:null};I.next=H;var J={r:0,b:0,g:0,a:0,next:null},K=J;for(n=1;C>n;n++)K=K.next={r:0,b:0,g:0,a:0,next:null};K.next=J;for(var L=null;m-->0;){r=q=0;var M=this.mul_table[k],N=this.shg_table[k];for(c=e;--c>-1;){for(s=F*(w=A[q]),t=F*(x=A[q+1]),u=F*(y=A[q+2]),v=F*(z=A[q+3]),I=H,n=F;--n>-1;)I.r=w,I.g=x,I.b=y,I.a=z,I=I.next;for(n=1;F>n;n++)o=q+((n>D?D:n)<<2),s+=I.r=A[o],t+=I.g=A[o+1],u+=I.b=A[o+2],v+=I.a=A[o+3],I=I.next;for(L=H,b=0;d>b;b++)A[q++]=s*M>>>N,A[q++]=t*M>>>N,A[q++]=u*M>>>N,A[q++]=v*M>>>N,o=r+((o=b+k+1)<D?o:D)<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next;r+=d}for(M=this.mul_table[l],N=this.shg_table[l],b=0;d>b;b++){for(q=b<<2,s=G*(w=A[q]),t=G*(x=A[q+1]),u=G*(y=A[q+2]),v=G*(z=A[q+3]),K=J,n=0;G>n;n++)K.r=w,K.g=x,K.b=y,K.a=z,K=K.next;for(p=d,n=1;l>=n;n++)q=p+b<<2,s+=K.r=A[q],t+=K.g=A[q+1],u+=K.b=A[q+2],v+=K.a=A[q+3],K=K.next,E>n&&(p+=d);if(q=b,L=J,m>0)for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(A[o]=s*M>>>N,A[o+1]=t*M>>>N,A[o+2]=u*M>>>N):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d;else for(c=0;e>c;c++)o=q<<2,A[o+3]=z=v*M>>>N,z>0?(z=255/z,A[o]=(s*M>>>N)*z,A[o+1]=(t*M>>>N)*z,A[o+2]=(u*M>>>N)*z):A[o]=A[o+1]=A[o+2]=0,o=b+((o=c+G)<E?o:E)*d<<2,s-=L.r-(L.r=A[o]),t-=L.g-(L.g=A[o+1]),u-=L.b-(L.b=A[o+2]),v-=L.a-(L.a=A[o+3]),L=L.next,q+=d}}return f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.blurX,this.blurY,this.quality)},b.toString=function(){return"[BlurFilter]"},createjs.BlurFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.alphaMap=a},b.alphaMap=null,b._alphaMap=null,b._mapData=null,b.applyFilter=function(a,b,c,d,e,f,g,h){if(!this.alphaMap)return!0;if(!this._prepAlphaMap())return!1;f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=this._mapData,m=k.length,n=0;m>n;n+=4)k[n+3]=l[n]||0;return f.putImageData(i,g,h),!0},b.clone=function(){return new a(this.alphaMap)},b.toString=function(){return"[AlphaMapFilter]"},b._prepAlphaMap=function(){if(!this.alphaMap)return!1;if(this.alphaMap==this._alphaMap&&this._mapData)return!0;this._mapData=null;var a,b=this._alphaMap=this.alphaMap,c=b;b instanceof HTMLCanvasElement?a=c.getContext("2d"):(c=createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"),c.width=b.width,c.height=b.height,a=c.getContext("2d"),a.drawImage(b,0,0));try{var d=a.getImageData(0,0,b.width,b.height)}catch(e){return!1}return this._mapData=d.data,!0},createjs.AlphaMapFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.initialize=function(a){this.mask=a},b.mask=null,b.applyFilter=function(a,b,c,d,e,f,g,h){return this.mask?(f=f||a,null==g&&(g=b),null==h&&(h=c),f.save(),f.globalCompositeOperation="destination-in",f.drawImage(this.mask,g,h),f.restore(),!0):!0},b.clone=function(){return new a(this.mask)},b.toString=function(){return"[AlphaMaskFilter]"},createjs.AlphaMaskFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d,e,f,g,h){this.initialize(a,b,c,d,e,f,g,h)},b=a.prototype=new createjs.Filter;b.redMultiplier=1,b.greenMultiplier=1,b.blueMultiplier=1,b.alphaMultiplier=1,b.redOffset=0,b.greenOffset=0,b.blueOffset=0,b.alphaOffset=0,b.initialize=function(a,b,c,d,e,f,g,h){this.redMultiplier=null!=a?a:1,this.greenMultiplier=null!=b?b:1,this.blueMultiplier=null!=c?c:1,this.alphaMultiplier=null!=d?d:1,this.redOffset=e||0,this.greenOffset=f||0,this.blueOffset=g||0,this.alphaOffset=h||0},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k=i.data,l=k.length,m=0;l>m;m+=4)k[m]=k[m]*this.redMultiplier+this.redOffset,k[m+1]=k[m+1]*this.greenMultiplier+this.greenOffset,k[m+2]=k[m+2]*this.blueMultiplier+this.blueOffset,k[m+3]=k[m+3]*this.alphaMultiplier+this.alphaOffset;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorFilter]"},b.clone=function(){return new a(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset)},createjs.ColorFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c,d){this.initialize(a,b,c,d)},b=a.prototype;a.DELTA_INDEX=[0,.01,.02,.04,.05,.06,.07,.08,.1,.11,.12,.14,.15,.16,.17,.18,.2,.21,.22,.24,.25,.27,.28,.3,.32,.34,.36,.38,.4,.42,.44,.46,.48,.5,.53,.56,.59,.62,.65,.68,.71,.74,.77,.8,.83,.86,.89,.92,.95,.98,1,1.06,1.12,1.18,1.24,1.3,1.36,1.42,1.48,1.54,1.6,1.66,1.72,1.78,1.84,1.9,1.96,2,2.12,2.25,2.37,2.5,2.62,2.75,2.87,3,3.2,3.4,3.6,3.8,4,4.3,4.7,4.9,5,5.5,6,6.5,6.8,7,7.3,7.5,7.8,8,8.4,8.7,9,9.4,9.6,9.8,10],a.IDENTITY_MATRIX=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],a.LENGTH=a.IDENTITY_MATRIX.length,b.initialize=function(a,b,c,d){return this.reset(),this.adjustColor(a,b,c,d),this},b.reset=function(){return this.copyMatrix(a.IDENTITY_MATRIX)},b.adjustColor=function(a,b,c,d){return this.adjustHue(d),this.adjustContrast(b),this.adjustBrightness(a),this.adjustSaturation(c)},b.adjustBrightness=function(a){return 0==a||isNaN(a)?this:(a=this._cleanValue(a,255),this._multiplyMatrix([1,0,0,0,a,0,1,0,0,a,0,0,1,0,a,0,0,0,1,0,0,0,0,0,1]),this)},b.adjustContrast=function(b){if(0==b||isNaN(b))return this;b=this._cleanValue(b,100);var c;return 0>b?c=127+127*(b/100):(c=b%1,c=0==c?a.DELTA_INDEX[b]:a.DELTA_INDEX[b<<0]*(1-c)+a.DELTA_INDEX[(b<<0)+1]*c,c=127*c+127),this._multiplyMatrix([c/127,0,0,0,.5*(127-c),0,c/127,0,0,.5*(127-c),0,0,c/127,0,.5*(127-c),0,0,0,1,0,0,0,0,0,1]),this},b.adjustSaturation=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,100);var b=1+(a>0?3*a/100:a/100),c=.3086,d=.6094,e=.082;return this._multiplyMatrix([c*(1-b)+b,d*(1-b),e*(1-b),0,0,c*(1-b),d*(1-b)+b,e*(1-b),0,0,c*(1-b),d*(1-b),e*(1-b)+b,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.adjustHue=function(a){if(0==a||isNaN(a))return this;a=this._cleanValue(a,180)/180*Math.PI;var b=Math.cos(a),c=Math.sin(a),d=.213,e=.715,f=.072;return this._multiplyMatrix([d+b*(1-d)+c*-d,e+b*-e+c*-e,f+b*-f+c*(1-f),0,0,d+b*-d+.143*c,e+b*(1-e)+.14*c,f+b*-f+c*-.283,0,0,d+b*-d+c*-(1-d),e+b*-e+c*e,f+b*(1-f)+c*f,0,0,0,0,0,1,0,0,0,0,0,1]),this},b.concat=function(b){return b=this._fixMatrix(b),b.length!=a.LENGTH?this:(this._multiplyMatrix(b),this)},b.clone=function(){return(new a).copyMatrix(this)},b.toArray=function(){for(var b=[],c=0,d=a.LENGTH;d>c;c++)b[c]=this[c];return b},b.copyMatrix=function(b){for(var c=a.LENGTH,d=0;c>d;d++)this[d]=b[d];return this},b.toString=function(){return"[ColorMatrix]"},b._multiplyMatrix=function(a){for(var b=[],c=0;5>c;c++){for(var d=0;5>d;d++)b[d]=this[d+5*c];for(var d=0;5>d;d++){for(var e=0,f=0;5>f;f++)e+=a[d+5*f]*b[f];this[d+5*c]=e}}},b._cleanValue=function(a,b){return Math.min(b,Math.max(-b,a))},b._fixMatrix=function(b){return b instanceof a&&(b=b.toArray()),b.length<a.LENGTH?b=b.slice(0,b.length).concat(a.IDENTITY_MATRIX.slice(b.length,a.LENGTH)):b.length>a.LENGTH&&(b=b.slice(0,a.LENGTH)),b},createjs.ColorMatrix=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a){this.initialize(a)},b=a.prototype=new createjs.Filter;b.matrix=null,b.initialize=function(a){this.matrix=a},b.applyFilter=function(a,b,c,d,e,f,g,h){f=f||a,null==g&&(g=b),null==h&&(h=c);try{var i=a.getImageData(b,c,d,e)}catch(j){return!1}for(var k,l,m,n,o=i.data,p=o.length,q=this.matrix,r=q[0],s=q[1],t=q[2],u=q[3],v=q[4],w=q[5],x=q[6],y=q[7],z=q[8],A=q[9],B=q[10],C=q[11],D=q[12],E=q[13],F=q[14],G=q[15],H=q[16],I=q[17],J=q[18],K=q[19],L=0;p>L;L+=4)k=o[L],l=o[L+1],m=o[L+2],n=o[L+3],o[L]=k*r+l*s+m*t+n*u+v,o[L+1]=k*w+l*x+m*y+n*z+A,o[L+2]=k*B+l*C+m*D+n*E+F,o[L+3]=k*G+l*H+m*I+n*J+K;return f.putImageData(i,g,h),!0},b.toString=function(){return"[ColorMatrixFilter]"},b.clone=function(){return new a(this.matrix)},createjs.ColorMatrixFilter=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"Touch cannot be instantiated"};a.isSupported=function(){return"ontouchstart"in window||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>0},a.enable=function(b,c,d){return b&&b.canvas&&a.isSupported()?(b.__touch={pointers:{},multitouch:!c,preventDefault:!d,count:0},"ontouchstart"in window?a._IOS_enable(b):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&a._IE_enable(b),!0):!1},a.disable=function(b){b&&("ontouchstart"in window?a._IOS_disable(b):(window.navigator.msPointerEnabled||window.navigator.pointerEnabled)&&a._IE_disable(b))},a._IOS_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IOS_handleEvent(b,c)};c.addEventListener("touchstart",d,!1),c.addEventListener("touchmove",d,!1),c.addEventListener("touchend",d,!1),c.addEventListener("touchcancel",d,!1)},a._IOS_disable=function(a){var b=a.canvas;if(b){var c=a.__touch.f;b.removeEventListener("touchstart",c,!1),b.removeEventListener("touchmove",c,!1),b.removeEventListener("touchend",c,!1),b.removeEventListener("touchcancel",c,!1)}},a._IOS_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();for(var c=b.changedTouches,d=b.type,e=0,f=c.length;f>e;e++){var g=c[e],h=g.identifier;g.target==a.canvas&&("touchstart"==d?this._handleStart(a,h,b,g.pageX,g.pageY):"touchmove"==d?this._handleMove(a,h,b,g.pageX,g.pageY):("touchend"==d||"touchcancel"==d)&&this._handleEnd(a,h,b))}}},a._IE_enable=function(b){var c=b.canvas,d=b.__touch.f=function(c){a._IE_handleEvent(b,c)};void 0===window.navigator.pointerEnabled?(c.addEventListener("MSPointerDown",d,!1),window.addEventListener("MSPointerMove",d,!1),window.addEventListener("MSPointerUp",d,!1),window.addEventListener("MSPointerCancel",d,!1),b.__touch.preventDefault&&(c.style.msTouchAction="none")):(c.addEventListener("pointerdown",d,!1),window.addEventListener("pointermove",d,!1),window.addEventListener("pointerup",d,!1),window.addEventListener("pointercancel",d,!1),b.__touch.preventDefault&&(c.style.touchAction="none")),b.__touch.activeIDs={}},a._IE_disable=function(a){var b=a.__touch.f;void 0===window.navigator.pointerEnabled?(window.removeEventListener("MSPointerMove",b,!1),window.removeEventListener("MSPointerUp",b,!1),window.removeEventListener("MSPointerCancel",b,!1),a.canvas&&a.canvas.removeEventListener("MSPointerDown",b,!1)):(window.removeEventListener("pointermove",b,!1),window.removeEventListener("pointerup",b,!1),window.removeEventListener("pointercancel",b,!1),a.canvas&&a.canvas.removeEventListener("pointerdown",b,!1))},a._IE_handleEvent=function(a,b){if(a){a.__touch.preventDefault&&b.preventDefault&&b.preventDefault();var c=b.type,d=b.pointerId,e=a.__touch.activeIDs;if("MSPointerDown"==c||"pointerdown"==c){if(b.srcElement!=a.canvas)return;e[d]=!0,this._handleStart(a,d,b,b.pageX,b.pageY)}else e[d]&&("MSPointerMove"==c||"pointermove"==c?this._handleMove(a,d,b,b.pageX,b.pageY):("MSPointerUp"==c||"MSPointerCancel"==c||"pointerup"==c||"pointercancel"==c)&&(delete e[d],this._handleEnd(a,d,b)))}},a._handleStart=function(a,b,c,d,e){var f=a.__touch;if(f.multitouch||!f.count){var g=f.pointers;g[b]||(g[b]=!0,f.count++,a._handlePointerDown(b,c,d,e))}},a._handleMove=function(a,b,c,d,e){a.__touch.pointers[b]&&a._handlePointerMove(b,c,d,e)},a._handleEnd=function(a,b,c){var d=a.__touch,e=d.pointers;e[b]&&(d.count--,a._handlePointerUp(b,c,!0),delete e[b])},createjs.Touch=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=createjs.EaselJS=createjs.EaselJS||{};a.version="0.7.1",a.buildDate="Thu, 12 Dec 2013 23:33:39 GMT"}();;/*!
* @license TweenJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2011-2013 gskinner.com, inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/

/**!
 * SoundJS FlashPlugin also includes swfobject (http://code.google.com/p/swfobject/)
 */

this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype;b.type=null,b.target=null,b.currentTarget=null,b.eventPhase=0,b.bubbles=!1,b.cancelable=!1,b.timeStamp=0,b.defaultPrevented=!1,b.propagationStopped=!1,b.immediatePropagationStopped=!1,b.removed=!1,b.initialize=function(a,b,c){this.type=a,this.bubbles=b,this.cancelable=c,this.timeStamp=(new Date).getTime()},b.preventDefault=function(){this.defaultPrevented=!0},b.stopPropagation=function(){this.propagationStopped=!0},b.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},b.remove=function(){this.removed=!0},b.clone=function(){return new a(this.type,this.bubbles,this.cancelable)},b.toString=function(){return"[Event (type="+this.type+")]"},createjs.Event=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){},b=a.prototype;a.initialize=function(a){a.addEventListener=b.addEventListener,a.on=b.on,a.removeEventListener=a.off=b.removeEventListener,a.removeAllEventListeners=b.removeAllEventListeners,a.hasEventListener=b.hasEventListener,a.dispatchEvent=b.dispatchEvent,a._dispatchEvent=b._dispatchEvent,a.willTrigger=b.willTrigger},b._listeners=null,b._captureListeners=null,b.initialize=function(){},b.addEventListener=function(a,b,c){var d;d=c?this._captureListeners=this._captureListeners||{}:this._listeners=this._listeners||{};var e=d[a];return e&&this.removeEventListener(a,b,c),e=d[a],e?e.push(b):d[a]=[b],b},b.on=function(a,b,c,d,e,f){return b.handleEvent&&(c=c||b,b=b.handleEvent),c=c||this,this.addEventListener(a,function(a){b.call(c,a,e),d&&a.remove()},f)},b.removeEventListener=function(a,b,c){var d=c?this._captureListeners:this._listeners;if(d){var e=d[a];if(e)for(var f=0,g=e.length;g>f;f++)if(e[f]==b){1==g?delete d[a]:e.splice(f,1);break}}},b.off=b.removeEventListener,b.removeAllEventListeners=function(a){a?(this._listeners&&delete this._listeners[a],this._captureListeners&&delete this._captureListeners[a]):this._listeners=this._captureListeners=null},b.dispatchEvent=function(a,b){if("string"==typeof a){var c=this._listeners;if(!c||!c[a])return!1;a=new createjs.Event(a)}if(a.target=b||this,a.bubbles&&this.parent){for(var d=this,e=[d];d.parent;)e.push(d=d.parent);var f,g=e.length;for(f=g-1;f>=0&&!a.propagationStopped;f--)e[f]._dispatchEvent(a,1+(0==f));for(f=1;g>f&&!a.propagationStopped;f++)e[f]._dispatchEvent(a,3)}else this._dispatchEvent(a,2);return a.defaultPrevented},b.hasEventListener=function(a){var b=this._listeners,c=this._captureListeners;return!!(b&&b[a]||c&&c[a])},b.willTrigger=function(a){for(var b=this;b;){if(b.hasEventListener(a))return!0;b=b.parent}return!1},b.toString=function(){return"[EventDispatcher]"},b._dispatchEvent=function(a,b){var c,d=1==b?this._captureListeners:this._listeners;if(a&&d){var e=d[a.type];if(!e||!(c=e.length))return;a.currentTarget=this,a.eventPhase=b,a.removed=!1,e=e.slice();for(var f=0;c>f&&!a.immediatePropagationStopped;f++){var g=e[f];g.handleEvent?g.handleEvent(a):g(a),a.removed&&(this.off(a.type,g,1==b),a.removed=!1)}}},createjs.EventDispatcher=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.EventDispatcher;a.NONE=0,a.LOOP=1,a.REVERSE=2,a.IGNORE={},a._tweens=[],a._plugins={},a.get=function(b,c,d,e){return e&&a.removeTweens(b),new a(b,c,d)},a.tick=function(b,c){for(var d=a._tweens.slice(),e=d.length-1;e>=0;e--){var f=d[e];c&&!f.ignoreGlobalPause||f._paused||f.tick(f._useTicks?1:b)}},a.handleEvent=function(a){"tick"==a.type&&this.tick(a.delta,a.paused)},a.removeTweens=function(b){if(b.tweenjs_count){for(var c=a._tweens,d=c.length-1;d>=0;d--)c[d]._target==b&&(c[d]._paused=!0,c.splice(d,1));b.tweenjs_count=0}},a.removeAllTweens=function(){for(var b=a._tweens,c=0,d=b.length;d>c;c++){var e=b[c];e.paused=!0,e.target.tweenjs_count=0}b.length=0},a.hasActiveTweens=function(b){return b?b.tweenjs_count:a._tweens&&!!a._tweens.length},a.installPlugin=function(b,c){var d=b.priority;null==d&&(b.priority=d=0);for(var e=0,f=c.length,g=a._plugins;f>e;e++){var h=c[e];if(g[h]){for(var i=g[h],j=0,k=i.length;k>j&&!(d<i[j].priority);j++);g[h].splice(j,0,b)}else g[h]=[b]}},a._register=function(b,c){var d=b._target,e=a._tweens;if(c)d&&(d.tweenjs_count=d.tweenjs_count?d.tweenjs_count+1:1),e.push(b),!a._inited&&createjs.Ticker&&(createjs.Ticker.addEventListener("tick",a),a._inited=!0);else{d&&d.tweenjs_count--;for(var f=e.length;f--;)if(e[f]==b)return e.splice(f,1),void 0}},b.ignoreGlobalPause=!1,b.loop=!1,b.duration=0,b.pluginData=null,b.target=null,b.position=null,b.passive=!1,b._paused=!1,b._curQueueProps=null,b._initQueueProps=null,b._steps=null,b._actions=null,b._prevPosition=0,b._stepPosition=0,b._prevPos=-1,b._target=null,b._useTicks=!1,b._inited=!1,b.initialize=function(b,c,d){this.target=this._target=b,c&&(this._useTicks=c.useTicks,this.ignoreGlobalPause=c.ignoreGlobalPause,this.loop=c.loop,c.onChange&&this.addEventListener("change",c.onChange),c.override&&a.removeTweens(b)),this.pluginData=d||{},this._curQueueProps={},this._initQueueProps={},this._steps=[],this._actions=[],c&&c.paused?this._paused=!0:a._register(this,!0),c&&null!=c.position&&this.setPosition(c.position,a.NONE)},b.wait=function(a,b){if(null==a||0>=a)return this;var c=this._cloneProps(this._curQueueProps);return this._addStep({d:a,p0:c,e:this._linearEase,p1:c,v:b})},b.to=function(a,b,c){return(isNaN(b)||0>b)&&(b=0),this._addStep({d:b||0,p0:this._cloneProps(this._curQueueProps),e:c,p1:this._cloneProps(this._appendQueueProps(a))})},b.call=function(a,b,c){return this._addAction({f:a,p:b?b:[this],o:c?c:this._target})},b.set=function(a,b){return this._addAction({f:this._set,o:this,p:[a,b?b:this._target]})},b.play=function(a){return a||(a=this),this.call(a.setPaused,[!1],a)},b.pause=function(a){return a||(a=this),this.call(a.setPaused,[!0],a)},b.setPosition=function(a,b){0>a&&(a=0),null==b&&(b=1);var c=a,d=!1;if(c>=this.duration&&(this.loop?c%=this.duration:(c=this.duration,d=!0)),c==this._prevPos)return d;var e=this._prevPos;if(this.position=this._prevPos=c,this._prevPosition=a,this._target)if(d)this._updateTargetProps(null,1);else if(this._steps.length>0){for(var f=0,g=this._steps.length;g>f&&!(this._steps[f].t>c);f++);var h=this._steps[f-1];this._updateTargetProps(h,(this._stepPosition=c-h.t)/h.d)}return 0!=b&&this._actions.length>0&&(this._useTicks?this._runActions(c,c):1==b&&e>c?(e!=this.duration&&this._runActions(e,this.duration),this._runActions(0,c,!0)):this._runActions(e,c)),d&&this.setPaused(!0),this.dispatchEvent("change"),d},b.tick=function(a){this._paused||this.setPosition(this._prevPosition+a)},b.setPaused=function(b){return this._paused=!!b,a._register(this,!b),this},b.w=b.wait,b.t=b.to,b.c=b.call,b.s=b.set,b.toString=function(){return"[Tween]"},b.clone=function(){throw"Tween can not be cloned."},b._updateTargetProps=function(b,c){var d,e,f,g,h,i;if(b||1!=c){if(this.passive=!!b.v,this.passive)return;b.e&&(c=b.e(c,0,1,1)),d=b.p0,e=b.p1}else this.passive=!1,d=e=this._curQueueProps;for(var j in this._initQueueProps){null==(g=d[j])&&(d[j]=g=this._initQueueProps[j]),null==(h=e[j])&&(e[j]=h=g),f=g==h||0==c||1==c||"number"!=typeof g?1==c?h:g:g+(h-g)*c;var k=!1;if(i=a._plugins[j])for(var l=0,m=i.length;m>l;l++){var n=i[l].tween(this,j,f,d,e,c,!!b&&d==e,!b);n==a.IGNORE?k=!0:f=n}k||(this._target[j]=f)}},b._runActions=function(a,b,c){var d=a,e=b,f=-1,g=this._actions.length,h=1;for(a>b&&(d=b,e=a,f=g,g=h=-1);(f+=h)!=g;){var i=this._actions[f],j=i.t;(j==e||j>d&&e>j||c&&j==a)&&i.f.apply(i.o,i.p)}},b._appendQueueProps=function(b){var c,d,e,f,g;for(var h in b)if(void 0===this._initQueueProps[h]){if(d=this._target[h],c=a._plugins[h])for(e=0,f=c.length;f>e;e++)d=c[e].init(this,h,d);this._initQueueProps[h]=this._curQueueProps[h]=void 0===d?null:d}else d=this._curQueueProps[h];for(var h in b){if(d=this._curQueueProps[h],c=a._plugins[h])for(g=g||{},e=0,f=c.length;f>e;e++)c[e].step&&c[e].step(this,h,d,b[h],g);this._curQueueProps[h]=b[h]}return g&&this._appendQueueProps(g),this._curQueueProps},b._cloneProps=function(a){var b={};for(var c in a)b[c]=a[c];return b},b._addStep=function(a){return a.d>0&&(this._steps.push(a),a.t=this.duration,this.duration+=a.d),this},b._addAction=function(a){return a.t=this.duration,this._actions.push(a),this},b._set=function(a,b){for(var c in a)b[c]=a[c]},createjs.Tween=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(a,b,c){this.initialize(a,b,c)},b=a.prototype=new createjs.EventDispatcher;b.ignoreGlobalPause=!1,b.duration=0,b.loop=!1,b.position=null,b._paused=!1,b._tweens=null,b._labels=null,b._labelList=null,b._prevPosition=0,b._prevPos=-1,b._useTicks=!1,b.initialize=function(a,b,c){this._tweens=[],c&&(this._useTicks=c.useTicks,this.loop=c.loop,this.ignoreGlobalPause=c.ignoreGlobalPause,c.onChange&&this.addEventListener("change",c.onChange)),a&&this.addTween.apply(this,a),this.setLabels(b),c&&c.paused?this._paused=!0:createjs.Tween._register(this,!0),c&&null!=c.position&&this.setPosition(c.position,createjs.Tween.NONE)},b.addTween=function(a){var b=arguments.length;if(b>1){for(var c=0;b>c;c++)this.addTween(arguments[c]);return arguments[0]}return 0==b?null:(this.removeTween(a),this._tweens.push(a),a.setPaused(!0),a._paused=!1,a._useTicks=this._useTicks,a.duration>this.duration&&(this.duration=a.duration),this._prevPos>=0&&a.setPosition(this._prevPos,createjs.Tween.NONE),a)},b.removeTween=function(a){var b=arguments.length;if(b>1){for(var c=!0,d=0;b>d;d++)c=c&&this.removeTween(arguments[d]);return c}if(0==b)return!1;for(var e=this._tweens,d=e.length;d--;)if(e[d]==a)return e.splice(d,1),a.duration>=this.duration&&this.updateDuration(),!0;return!1},b.addLabel=function(a,b){this._labels[a]=b;var c=this._labelList;if(c){for(var d=0,e=c.length;e>d&&!(b<c[d].position);d++);c.splice(d,0,{label:a,position:b})}},b.setLabels=function(a){this._labels=a?a:{}},b.getLabels=function(){var a=this._labelList;if(!a){a=this._labelList=[];var b=this._labels;for(var c in b)a.push({label:c,position:b[c]});a.sort(function(a,b){return a.position-b.position})}return a},b.getCurrentLabel=function(){var a=this.getLabels(),b=this.position,c=a.length;if(c){for(var d=0;c>d&&!(b<a[d].position);d++);return 0==d?null:a[d-1].label}return null},b.gotoAndPlay=function(a){this.setPaused(!1),this._goto(a)},b.gotoAndStop=function(a){this.setPaused(!0),this._goto(a)},b.setPosition=function(a,b){0>a&&(a=0);var c=this.loop?a%this.duration:a,d=!this.loop&&a>=this.duration;if(c==this._prevPos)return d;this._prevPosition=a,this.position=this._prevPos=c;for(var e=0,f=this._tweens.length;f>e;e++)if(this._tweens[e].setPosition(c,b),c!=this._prevPos)return!1;return d&&this.setPaused(!0),this.dispatchEvent("change"),d},b.setPaused=function(a){this._paused=!!a,createjs.Tween._register(this,!a)},b.updateDuration=function(){this.duration=0;for(var a=0,b=this._tweens.length;b>a;a++){var c=this._tweens[a];c.duration>this.duration&&(this.duration=c.duration)}},b.tick=function(a){this.setPosition(this._prevPosition+a)},b.resolve=function(a){var b=parseFloat(a);return isNaN(b)&&(b=this._labels[a]),b},b.toString=function(){return"[Timeline]"},b.clone=function(){throw"Timeline can not be cloned."},b._goto=function(a){var b=this.resolve(a);null!=b&&this.setPosition(b)},createjs.Timeline=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"Ease cannot be instantiated."};a.linear=function(a){return a},a.none=a.linear,a.get=function(a){return-1>a&&(a=-1),a>1&&(a=1),function(b){return 0==a?b:0>a?b*(b*-a+1+a):b*((2-b)*a+(1-a))}},a.getPowIn=function(a){return function(b){return Math.pow(b,a)}},a.getPowOut=function(a){return function(b){return 1-Math.pow(1-b,a)}},a.getPowInOut=function(a){return function(b){return(b*=2)<1?.5*Math.pow(b,a):1-.5*Math.abs(Math.pow(2-b,a))}},a.quadIn=a.getPowIn(2),a.quadOut=a.getPowOut(2),a.quadInOut=a.getPowInOut(2),a.cubicIn=a.getPowIn(3),a.cubicOut=a.getPowOut(3),a.cubicInOut=a.getPowInOut(3),a.quartIn=a.getPowIn(4),a.quartOut=a.getPowOut(4),a.quartInOut=a.getPowInOut(4),a.quintIn=a.getPowIn(5),a.quintOut=a.getPowOut(5),a.quintInOut=a.getPowInOut(5),a.sineIn=function(a){return 1-Math.cos(a*Math.PI/2)},a.sineOut=function(a){return Math.sin(a*Math.PI/2)},a.sineInOut=function(a){return-.5*(Math.cos(Math.PI*a)-1)},a.getBackIn=function(a){return function(b){return b*b*((a+1)*b-a)}},a.backIn=a.getBackIn(1.7),a.getBackOut=function(a){return function(b){return--b*b*((a+1)*b+a)+1}},a.backOut=a.getBackOut(1.7),a.getBackInOut=function(a){return a*=1.525,function(b){return(b*=2)<1?.5*b*b*((a+1)*b-a):.5*((b-=2)*b*((a+1)*b+a)+2)}},a.backInOut=a.getBackInOut(1.7),a.circIn=function(a){return-(Math.sqrt(1-a*a)-1)},a.circOut=function(a){return Math.sqrt(1- --a*a)},a.circInOut=function(a){return(a*=2)<1?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)},a.bounceIn=function(b){return 1-a.bounceOut(1-b)},a.bounceOut=function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375},a.bounceInOut=function(b){return.5>b?.5*a.bounceIn(2*b):.5*a.bounceOut(2*b-1)+.5},a.getElasticIn=function(a,b){var c=2*Math.PI;return function(d){if(0==d||1==d)return d;var e=b/c*Math.asin(1/a);return-(a*Math.pow(2,10*(d-=1))*Math.sin((d-e)*c/b))}},a.elasticIn=a.getElasticIn(1,.3),a.getElasticOut=function(a,b){var c=2*Math.PI;return function(d){if(0==d||1==d)return d;var e=b/c*Math.asin(1/a);return a*Math.pow(2,-10*d)*Math.sin((d-e)*c/b)+1}},a.elasticOut=a.getElasticOut(1,.3),a.getElasticInOut=function(a,b){var c=2*Math.PI;return function(d){var e=b/c*Math.asin(1/a);return(d*=2)<1?-.5*a*Math.pow(2,10*(d-=1))*Math.sin((d-e)*c/b):.5*a*Math.pow(2,-10*(d-=1))*Math.sin((d-e)*c/b)+1}},a.elasticInOut=a.getElasticInOut(1,.3*1.5),createjs.Ease=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=function(){throw"MotionGuidePlugin cannot be instantiated."};a.priority=0,a._rotOffS,a._rotOffE,a._rotNormS,a._rotNormE,a.install=function(){return createjs.Tween.installPlugin(a,["guide","x","y","rotation"]),createjs.Tween.IGNORE},a.init=function(a,b,c){var d=a.target;return d.hasOwnProperty("x")||(d.x=0),d.hasOwnProperty("y")||(d.y=0),d.hasOwnProperty("rotation")||(d.rotation=0),"rotation"==b&&(a.__needsRot=!0),"guide"==b?null:c},a.step=function(b,c,d,e,f){if("rotation"==c&&(b.__rotGlobalS=d,b.__rotGlobalE=e,a.testRotData(b,f)),"guide"!=c)return e;var g,h=e;h.hasOwnProperty("path")||(h.path=[]);var i=h.path;if(h.hasOwnProperty("end")||(h.end=1),h.hasOwnProperty("start")||(h.start=d&&d.hasOwnProperty("end")&&d.path===i?d.end:0),h.hasOwnProperty("_segments")&&h._length)return e;var j=i.length,k=10;if(!(j>=6&&0==(j-2)%4))throw"invalid 'path' data, please see documentation for valid paths";h._segments=[],h._length=0;for(var l=2;j>l;l+=4){for(var m,n,o=i[l-2],p=i[l-1],q=i[l+0],r=i[l+1],s=i[l+2],t=i[l+3],u=o,v=p,w=0,x=[],y=1;k>=y;y++){var z=y/k,A=1-z;m=A*A*o+2*A*z*q+z*z*s,n=A*A*p+2*A*z*r+z*z*t,w+=x[x.push(Math.sqrt((g=m-u)*g+(g=n-v)*g))-1],u=m,v=n}h._segments.push(w),h._segments.push(x),h._length+=w}g=h.orient,h.orient=!0;var B={};return a.calc(h,h.start,B),b.__rotPathS=Number(B.rotation.toFixed(5)),a.calc(h,h.end,B),b.__rotPathE=Number(B.rotation.toFixed(5)),h.orient=!1,a.calc(h,h.end,f),h.orient=g,h.orient?(b.__guideData=h,a.testRotData(b,f),e):e},a.testRotData=function(a,b){if(void 0===a.__rotGlobalS||void 0===a.__rotGlobalE){if(a.__needsRot)return;a.__rotGlobalS=a.__rotGlobalE=void 0!==a._curQueueProps.rotation?a._curQueueProps.rotation:b.rotation=a.target.rotation||0}if(void 0!==a.__guideData){var c=a.__guideData,d=a.__rotGlobalE-a.__rotGlobalS,e=a.__rotPathE-a.__rotPathS,f=d-e;if("auto"==c.orient)f>180?f-=360:-180>f&&(f+=360);else if("cw"==c.orient){for(;0>f;)f+=360;0==f&&d>0&&180!=d&&(f+=360)}else if("ccw"==c.orient){for(f=d-(e>180?360-e:e);f>0;)f-=360;0==f&&0>d&&-180!=d&&(f-=360)}c.rotDelta=f,c.rotOffS=a.__rotGlobalS-a.__rotPathS,a.__rotGlobalS=a.__rotGlobalE=a.__guideData=a.__needsRot=void 0}},a.tween=function(b,c,d,e,f,g,h){var i=f.guide;if(void 0==i||i===e.guide)return d;if(i.lastRatio!=g){var j=(i.end-i.start)*(h?i.end:g)+i.start;switch(a.calc(i,j,b.target),i.orient){case"cw":case"ccw":case"auto":b.target.rotation+=i.rotOffS+i.rotDelta*g;break;case"fixed":default:b.target.rotation+=i.rotOffS}i.lastRatio=g}return"rotation"!=c||i.orient&&"false"!=i.orient?b.target[c]:d},a.calc=function(b,c,d){void 0==b._segments&&a.validate(b),void 0==d&&(d={x:0,y:0,rotation:0});for(var e=b._segments,f=b.path,g=b._length*c,h=e.length-2,i=0;g>e[i]&&h>i;)g-=e[i],i+=2;var j=e[i+1],k=0;for(h=j.length-1;g>j[k]&&h>k;)g-=j[k],k++;var l=k/++h+g/(h*j[k]);i=2*i+2;var m=1-l;return d.x=m*m*f[i-2]+2*m*l*f[i+0]+l*l*f[i+2],d.y=m*m*f[i-1]+2*m*l*f[i+1]+l*l*f[i+3],b.orient&&(d.rotation=57.2957795*Math.atan2((f[i+1]-f[i-1])*m+(f[i+3]-f[i+1])*l,(f[i+0]-f[i-2])*m+(f[i+2]-f[i+0])*l)),d},createjs.MotionGuidePlugin=a}(),this.createjs=this.createjs||{},function(){"use strict";var a=createjs.TweenJS=createjs.TweenJS||{};a.version="0.5.1",a.buildDate="Thu, 12 Dec 2013 23:33:38 GMT"}();;/*
* Ease
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2010 gskinner.com, inc.
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/
 
/**
* @module TweenJS
*/
 
// namespace:
this.createjs = this.createjs||{};
 
(function() {
"use strict";
 
// constructor:
/**
* The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param
* easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.
*
* Most methods on Ease can be passed directly as easing functions:
*
* Tween.get(target).to({x:100}, 500, Ease.linear);
*
* However, methods beginning with "get" will return an easing function based on parameter values:
*
* Tween.get(target).to({y:200}, 500, Ease.getPowIn(2.2));
*
* Please see the <a href="http://www.createjs.com/#!/TweenJS/demos/sparkTable">spark table demo</a> for an overview
* of the different ease types on <a href="http://tweenjs.com">TweenJS.com</a>.
*
* <i>Equations derived from work by Robert Penner.</i>
* @class Ease
* @static
**/
var Ease = function() {
throw "Ease cannot be instantiated.";
}
 
// public static methods:
/**
* @method linear
* @static
**/
Ease.linear = function(t) { return t; }
 
/**
* Identical to linear.
* @method none
* @static
**/
Ease.none = Ease.linear;
 
/**
* Mimics the simple -100 to 100 easing in Flash Pro.
* @method get
* @param amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.
* @static
**/
Ease.get = function(amount) {
if (amount < -1) { amount = -1; }
if (amount > 1) { amount = 1; }
return function(t) {
if (amount==0) { return t; }
if (amount<0) { return t*(t*-amount+1+amount); }
return t*((2-t)*amount+(1-amount));
}
}
 
/**
* Configurable exponential ease.
* @method getPowIn
* @param pow The exponent to use (ex. 3 would return a cubic ease).
* @static
**/
Ease.getPowIn = function(pow) {
return function(t) {
return Math.pow(t,pow);
}
}
 
 
/**
* Configurable exponential ease.
* @method getPowOut
* @param pow The exponent to use (ex. 3 would return a cubic ease).
* @static
**/
Ease.getPowOut = function(pow) {
return function(t) {
return 1-Math.pow(1-t,pow);
}
}
 
 
/**
* Configurable exponential ease.
* @method getPowInOut
* @param pow The exponent to use (ex. 3 would return a cubic ease).
* @static
**/
Ease.getPowInOut = function(pow) {
return function(t) {
if ((t*=2)<1) return 0.5*Math.pow(t,pow);
return 1-0.5*Math.abs(Math.pow(2-t,pow));
}
}
 
 
/**
* @method quadIn
* @static
**/
Ease.quadIn = Ease.getPowIn(2);
/**
* @method quadOut
* @static
**/
Ease.quadOut = Ease.getPowOut(2);
/**
* @method quadInOut
* @static
**/
Ease.quadInOut = Ease.getPowInOut(2);
 
 
/**
* @method cubicIn
* @static
**/
Ease.cubicIn = Ease.getPowIn(3);
/**
* @method cubicOut
* @static
**/
Ease.cubicOut = Ease.getPowOut(3);
/**
* @method cubicInOut
* @static
**/
Ease.cubicInOut = Ease.getPowInOut(3);
 
 
/**
* @method quartIn
* @static
**/
Ease.quartIn = Ease.getPowIn(4);
/**
* @method quartOut
* @static
**/
Ease.quartOut = Ease.getPowOut(4);
/**
* @method quartInOut
* @static
**/
Ease.quartInOut = Ease.getPowInOut(4);
 
 
/**
* @method quintIn
* @static
**/
Ease.quintIn = Ease.getPowIn(5);
/**
* @method quintOut
* @static
**/
Ease.quintOut = Ease.getPowOut(5);
/**
* @method quintInOut
* @static
**/
Ease.quintInOut = Ease.getPowInOut(5);
 
 
/**
* @method sineIn
* @static
**/
Ease.sineIn = function(t) {
return 1-Math.cos(t*Math.PI/2);
}
 
/**
* @method sineOut
* @static
**/
Ease.sineOut = function(t) {
return Math.sin(t*Math.PI/2);
}
 
/**
* @method sineInOut
* @static
**/
Ease.sineInOut = function(t) {
return -0.5*(Math.cos(Math.PI*t) - 1)
}
 
 
/**
* Configurable "back in" ease.
* @method getBackIn
* @param amount The strength of the ease.
* @static
**/
Ease.getBackIn = function(amount) {
return function(t) {
return t*t*((amount+1)*t-amount);
}
}
/**
* @method backIn
* @static
**/
Ease.backIn = Ease.getBackIn(1.7);
 
/**
* Configurable "back out" ease.
* @method getBackOut
* @param amount The strength of the ease.
* @static
**/
Ease.getBackOut = function(amount) {
return function(t) {
return (--t*t*((amount+1)*t + amount) + 1);
}
}
/**
* @method backOut
* @static
**/
Ease.backOut = Ease.getBackOut(1.7);
 
/**
* Configurable "back in out" ease.
* @method getBackInOut
* @param amount The strength of the ease.
* @static
**/
Ease.getBackInOut = function(amount) {
amount*=1.525;
return function(t) {
if ((t*=2)<1) return 0.5*(t*t*((amount+1)*t-amount));
return 0.5*((t-=2)*t*((amount+1)*t+amount)+2);
}
}
/**
* @method backInOut
* @static
**/
Ease.backInOut = Ease.getBackInOut(1.7);
 
 
/**
* @method circIn
* @static
**/
Ease.circIn = function(t) {
return -(Math.sqrt(1-t*t)- 1);
}
 
/**
* @method circOut
* @static
**/
Ease.circOut = function(t) {
return Math.sqrt(1-(--t)*t);
}
 
/**
* @method circInOut
* @static
**/
Ease.circInOut = function(t) {
if ((t*=2) < 1) return -0.5*(Math.sqrt(1-t*t)-1);
return 0.5*(Math.sqrt(1-(t-=2)*t)+1);
}
 
/**
* @method bounceIn
* @static
**/
Ease.bounceIn = function(t) {
return 1-Ease.bounceOut(1-t);
}
 
/**
* @method bounceOut
* @static
**/
Ease.bounceOut = function(t) {
if (t < 1/2.75) {
return (7.5625*t*t);
} else if (t < 2/2.75) {
return (7.5625*(t-=1.5/2.75)*t+0.75);
} else if (t < 2.5/2.75) {
return (7.5625*(t-=2.25/2.75)*t+0.9375);
} else {
return (7.5625*(t-=2.625/2.75)*t +0.984375);
}
}
 
/**
* @method bounceInOut
* @static
**/
Ease.bounceInOut = function(t) {
if (t<0.5) return Ease.bounceIn (t*2) * .5;
return Ease.bounceOut(t*2-1)*0.5+0.5;
}
 
 
/**
* Configurable elastic ease.
* @method getElasticIn
* @param amplitude
* @param period
* @static
**/
Ease.getElasticIn = function(amplitude,period) {
var pi2 = Math.PI*2;
return function(t) {
if (t==0 || t==1) return t;
var s = period/pi2*Math.asin(1/amplitude);
return -(amplitude*Math.pow(2,10*(t-=1))*Math.sin((t-s)*pi2/period));
}
}
/**
* @method elasticIn
* @static
**/
Ease.elasticIn = Ease.getElasticIn(1,0.3);
 
/**
* Configurable elastic ease.
* @method getElasticOut
* @param amplitude
* @param period
* @static
**/
Ease.getElasticOut = function(amplitude,period) {
var pi2 = Math.PI*2;
return function(t) {
if (t==0 || t==1) return t;
var s = period/pi2 * Math.asin(1/amplitude);
return (amplitude*Math.pow(2,-10*t)*Math.sin((t-s)*pi2/period )+1);
}
}
/**
* @method elasticOut
* @static
**/
Ease.elasticOut = Ease.getElasticOut(1,0.3);
 
/**
* Configurable elastic ease.
* @method getElasticInOut
* @param amplitude
* @param period
* @static
**/
Ease.getElasticInOut = function(amplitude,period) {
var pi2 = Math.PI*2;
return function(t) {
var s = period/pi2 * Math.asin(1/amplitude);
if ((t*=2)<1) return -0.5*(amplitude*Math.pow(2,10*(t-=1))*Math.sin( (t-s)*pi2/period ));
return amplitude*Math.pow(2,-10*(t-=1))*Math.sin((t-s)*pi2/period)*0.5+1;
}
}
/**
* @method elasticInOut
* @static
**/
Ease.elasticInOut = Ease.getElasticInOut(1,0.3*1.5);
 
createjs.Ease = Ease;
}());
 ;/**
  @author David Piegza

  Implements a label for an object.

  It creates an text in canvas and sets the text-canvas as
  texture of a cube geometry.

  Parameters:
  text: <string>, text of the label

  Example:
  var label = new THREE.Label("Text of the label");
  label.position.x = 100;
  label.position.y = 100;
  scene.addObject(label);
 */

THREE.Label = function(text, parameters) {
  var parameters = parameters || {};

  var labelCanvas = document.createElement( "canvas" );

  function create() {
    var xc = labelCanvas.getContext("2d");
    var fontsize = "40pt";

    // set font size to measure the text
    xc.font = fontsize + " Arial";
    var len = xc.measureText(text).width;

    labelCanvas.setAttribute('width', len);

    // set font size again cause it will be reset
    // when setting a new width
    xc.font = fontsize + " Arial";
    xc.textBaseline = 'top';
    xc.fillText(text, 0, 0);

    var geometry = new THREE.CubeGeometry(len, 200, 0);
    var xm = new THREE.MeshBasicMaterial({map: new THREE.Texture(labelCanvas), transparent: true});
    xm.map.needsUpdate = true;

    // set text canvas to cube geometry
    var labelObject = new THREE.Mesh(geometry, xm);
    return labelObject;
  }

  return create();
}
;/**
  @author David Piegza

  Implements a selection for objects in a scene.

  It invokes a callback function when the mouse enters and when it leaves the object.
  Based on a Three.js selection example.

  Parameters:
    domElement: HTMLDomElement
    selected: callback function, passes the current selected object (on mouseover)
    clicked: callback function, passes the current clicked object
 */

THREE.ObjectSelection = function(parameters) {
  var parameters = parameters || {};

  this.domElement = parameters.domElement || document;
  this.projector = new THREE.Projector();
  this.INTERSECTED;

  var _this = this;

  var callbackSelected = parameters.selected;
  var callbackClicked = parameters.clicked;
  var mouse = { x: 0, y: 0 };

  this.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );
  function onDocumentMouseMove( event ) {
    mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
    mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
  }

  this.domElement.addEventListener( 'click', onDocumentMouseClick, false );
  function onDocumentMouseClick( event ) {
    if(_this.INTERSECTED) {
      if(typeof callbackClicked === 'function') {
        callbackClicked(_this.INTERSECTED);
      }
    }
  }

  this.render = function(scene, camera) {
    var vector = new THREE.Vector3( mouse.x, mouse.y, 0.5 );
    this.projector.unprojectVector( vector, camera );

    var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());

    var intersects = raycaster.intersectObject(scene, true);

    if( intersects.length > 0 ) {
      if ( this.INTERSECTED != intersects[ 0 ].object ) {
        if ( this.INTERSECTED ) {
          this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );
        }

        this.INTERSECTED = intersects[ 0 ].object;
        this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();
        // this.INTERSECTED.material.color.setHex( 0xff0000 );
        if(typeof callbackSelected === 'function') {
          callbackSelected(this.INTERSECTED);
        }
      }
    } else {
      if ( this.INTERSECTED ) {
        this.INTERSECTED.material.color.setHex( this.INTERSECTED.currentHex );
      }
      this.INTERSECTED = null;
      if(typeof callbackSelected === 'function') {
        callbackSelected(this.INTERSECTED);
      }
    }
  }
}
;/**
  @author David Piegza

  Implements a graph structure.
  Consists of Graph, Nodes and Edges.


  Nodes:
  Create a new Node with an id. A node has the properties
  id, position and data.

  Example:
  node = new Node(1);
  node.position.x = 100;
  node.position.y = 100;
  node.data.title = "Title of the node";

  The data property can be used to extend the node with custom
  informations. Then, they can be used in a visualization.


  Edges:
  Connects to nodes together.
  
  Example:
  edge = new Edge(node1, node2);

  An edge can also be extended with the data attribute. E.g. set a
  type like "friends", different types can then be draw in differnt ways. 


  Graph:
  
  Parameters:
  options = {
    limit: <int>, maximum number of nodes
  }

  Methods:
  addNode(node) - adds a new node and returns true if the node has been added,
                  otherwise false.
  getNode(node_id) - returns the node with node_id or undefined, if it not exist
  addEdge(node1, node2) - adds an edge for node1 and node2. Returns true if the
                          edge has been added, otherwise false (e.g.) when the
                          edge between these nodes already exist.
  
  reached_limit() - returns true if the limit has been reached, otherwise false

 */

function Graph(options) {
  this.options = options || {};
  this.nodeSet = {};
  this.nodes = [];
  this.edges = [];
  this.layout;
}

Graph.prototype.addNode = function(node) {
  if(this.nodeSet[node.id] == undefined && !this.reached_limit()) {
    this.nodeSet[node.id] = node;
    this.nodes.push(node);
    return true;
  }
  return false;
};

Graph.prototype.getNode = function(node_id) {
  return this.nodeSet[node_id];
};

Graph.prototype.addEdge = function(source, target) {
  if(source.addConnectedTo(target) === true) {
    var edge = new Edge(source, target);
    this.edges.push(edge);
    return true;
  }
  return false;
};

Graph.prototype.reached_limit = function() {
  if(this.options.limit != undefined)
    return this.options.limit <= this.nodes.length;
  else
    return false;
};


function Node(node_id) {
  this.id = node_id;
  this.nodesTo = [];
  this.nodesFrom = [];
  this.position = {};
  this.data = {};
}

Node.prototype.addConnectedTo = function(node) {
  if(this.connectedTo(node) === false) {
    this.nodesTo.push(node);
    return true;
  }
  return false;
};

Node.prototype.connectedTo = function(node) {
  for(var i=0; i < this.nodesTo.length; i++) {
    var connectedNode = this.nodesTo[i];
    if(connectedNode.id == node.id) {
      return true;
    }
  }
  return false;
};


function Edge(source, target) {
  this.source = source;
  this.target = target;
  this.data = {};
}
;var flyToNext = function(cb){
  $.get('/api/get-user').then(function(response){
      var friends = JSON.parse(response).friends;
      var last;
      cb(function(){
          var i = Math.floor(Math.random()*friends.length);
          current = friends[i];
          currentNode = drawing.getNode(current);
          while(!currentNode || current === last){
            i += 1;
            if(i === friends.length){
              i = 0;
            }
            current = friends[i];
            currentNode = drawing.getNode(current);
          }
          //go to next user on globe and draw mutual friends
          window.currentId = current
          last = current;
          drawing.goToNode(current);
          getPic(current);
          goToRelay(current);
          postExplosion(current);
      })
  })
};

var getAllPhotos = function(id){
  id = id || window.currentId;
  if(current === undefined){
    var current = window.currentId;
  }
  FBData.get('userPhotos',current, function(data){
    //get photos of current friend
    data = JSON.parse(data);
    if(data.photos){
      //if there are photos, display them
      getPhotos(data.photos.data, id);
    }
  })
};

var postExplosion = function(id){
    FBData.get('newsFeed', id, function(data){
      var myPosts = JSON.parse(data);
      if(myPosts.posts){
        myPosts = myPosts.posts.data;
        investigatePosts(id, myPosts);
      }
    })
};

var batchPhotos = function(idArray){
  var dataArray = [];
  if(idArray.length){
    idArray.forEach(function(id){
      dataArray.push({method: 'GET', relative_url: '/'+id});
    })
  }
  FBData.batch(dataArray, function(data){
    console.log(data);
  })
};

var getPhotos = function (array, id){
  var friend = drawing.getNode(id);
  if(array.length){
    setInterval(function(){
      if(array.length){
        var current = array.pop();
        FBData.get('getPhoto', current.id, function(photoData){
          photoData = JSON.parse(photoData);
          drawing.displayPhoto(photoData, friend);
        })
      }
    }, 20)
  }
};

var nextFunc;
flyToNext(function(next){
  nextFunc = next;
});

$(document).on('keydown', function( event ){
  if(event.which === 32){ // space key
    nextFunc();
  }
  // else if(event.which === 13){ // enter key
  //   getAllPhotos();
  // }
  // else if(event.which === 87){ // w key
  //   var current = window.currentId
  //   FBData.get('newsFeed', current, function(data){
  //     var myPosts = JSON.parse(data);
  //     if(myPosts.posts){
  //       myPosts = myPosts.posts.data;
  //       investigatePosts(current, myPosts);
  //     }
  //   })
  // }
})

///// for info display //////////////////////////////////////////////////
var infoHTMLlog = [];
var $infoHTML = $('<div><div class="info-data img-box"></div></div>');

function displayInfo(data, isUrl){
  var key;
  if(isUrl){
    key = data.url;
  } else {
    key = data.source;
  }
  var $infoHTMLClone = $infoHTML.clone();
  var $info = $infoHTMLClone.find('.info-data');

  //var header = $infoHTMLClone.find('.info-header');
  if($('.panel-wrapper').children().length){
    $($('.panel-wrapper').children()[0]).addClass('zoomOut');
  }
  $('.panel-wrapper').empty();
  var image = new Image();
  image.style.opacity = 0.6;
  image.onload = function(){
    var $image = $(image);
    $image.addClass('info-img animated zoomIn');
    $info.append($image);
    $('.panel-wrapper').append($infoHTMLClone);
    infoHTMLlog.push($infoHTMLClone);
  }
  image.src = key;
};
//////////////////////////////////////////////////////////////////////////

var getPic = function(id){
  FBData.get('getProfilePic', id, function(photo){
    photo = JSON.parse(photo);
    photo = photo.picture.data;
    displayInfo(photo, true);
  })
}

var goToRelay = function(id){
  if(id === id){
    window.currentId = id;
  }
  //drawing.goToNode(id);
  getAllPhotos(id);
  getMutual(id);
}

var getMutual = function(idArray, connectUser){
  if(connectUser && drawing !== undefined){
    var node = drawing.getNode(idArray);
    if(node==undefined){
      console.log("node not found");
    } else {
      drawing.connectToUser(node);
    }
  }
  if(Array.isArray(idArray)){
    var currentFriend = idArray.pop();
  } else {
    var currentFriend = idArray;
    idArray = [];
  }
  var payload = {id: currentFriend};
  $.post('/api/get-mutual', payload).then(function(response){
    var mutualList = JSON.parse(response);
    if(mutualList.length){
      loadMutual(mutualList, currentFriend);
    }
  })
  if(idArray.length){
      return getMutual(idArray);
  } else {
      return;
  }
}

var loadMutual = function(list, currentFriend){
  var currentMutual = list.pop();
  drawing.addEdge(currentFriend, currentMutual, 'red', true);
  if(list.length){
    return loadMutual(list, currentFriend);
  } else {
    return;
  }
}

var investigatePosts = function(id, posts){
  drawing.moveOut();
  if(!posts || !posts.length){
    return;
  } else {
    if(posts.length > 12){
      posts = posts.slice(0,12);
    }
    console.log(posts);
    setInterval(function(){
      if(posts.length){
        drawPosts(id, posts.pop());
      }
    }, 300)
  }
}

var drawPosts = function(id, current){
  current = drawing.addPost(id, current, drawing);
  FBData.getPostLikes(current.id, function(data){
    data = data.data;
    for(var l = 0; l < data.length; l++){
      var liker = data[l];
      liker = drawing.getNode(liker.id);
      if(drawing.getNode(liker.id) !== undefined){
        drawing.addEdge(current.id, liker.id, 'green', true);
      }
    }
    if(posts.length){
      return drawPosts(id, posts);
    } else {
      return;
    }
  })
}
;var Drawing = Drawing || {};

Drawing.SphereGraph = function(options) {
  var options = options || {};

  //color fn and shaders from google globe JHE
  var colorFn = function(x) {
    var c = new THREE.Color();
    c.setHSL( ( 0.6 - ( x * 0.5 ) ), 1.0, 0.5 );
    return c;
  };

  var Shaders = {
    'earth' : {
      uniforms: {
        'texture': { type: 't', value: null }
      },
      vertexShader: [
        'varying vec3 vNormal;',
        'varying vec2 vUv;',
        'void main() {',
          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
          'vNormal = normalize( normalMatrix * normal );',
          'vUv = uv;',
        '}'
      ].join('\n'),
      fragmentShader: [
        'uniform sampler2D texture;',
        'varying vec3 vNormal;',
        'varying vec2 vUv;',
        'void main() {',
          'vec3 diffuse = texture2D( texture, vUv ).xyz;',
          'float intensity = 1.05 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) );',
          'vec3 atmosphere = vec3( 1.0, 1.0, 1.0 ) * pow( intensity, 3.0 );',
          'gl_FragColor = vec4( diffuse + atmosphere, 1.0 );',
        '}'
      ].join('\n')
    },
    'atmosphere' : {
      uniforms: {},
      vertexShader: [
        'varying vec3 vNormal;',
        'void main() {',
          'vNormal = normalize( normalMatrix * normal );',
          'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
        '}'
      ].join('\n'),
      fragmentShader: [
        'varying vec3 vNormal;',
        'void main() {',
          'float intensity = pow( 0.8 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 12.0 );',
          'gl_FragColor = vec4( 1.0, 1.0, 1.0, 1.0 ) * intensity;',
        '}'
      ].join('\n')
    }
  };
  // end shaders and colors from google globe JHE
  this.layout = options.layout || "2d";
  this.show_stats = options.showStats || false;
  this.show_info = options.showInfo || true;
  this.selection = options.selection || true;
  this.limit = options.limit || 10;

  var camera, controls, scene, renderer, interaction, geometry, object_selection;
  var stats;
  var graph = new Graph();

  var geometries = [];
  var info_text = {};
  var watched = {};
  setInterval(function(){
    watched = {};
  }, 5000)

  var sphere_radius = 4900;
  var max_X = 10000;
  var min_X = 10000;
  var max_Y = 10000;
  var min_Y = 10000;

  var that=this;

  /*
  Run the functions to make the graph and start the animation
  */
  init();
  //createGraph();
  animate();

  /*
  This function renders the globe
  */
  function init() {
    // Three.js initialization
    renderer = new THREE.WebGLRenderer({alpha: true});
    renderer.setSize( window.innerWidth, window.innerHeight );

    camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 100000);
    camera.position.z = 20000;
    canvas = document.body;
    clock = new THREE.Clock();
    control = new THREE.OrbitControls(camera);
    control.addEventListener( 'change', render );
    // control = new THREE.FlyControls(camera, canvas);
    // control.dragToLook = false;
    // control.autoForward = false;
    // control.movementSpeed = 1000;
    // control.rollSpeed = 0.5;

    scene = new THREE.Scene();

/////////////////////////////////////////////////////////////////////////////////
    // a sun like light source and ambient light so all parts of globe are visible
    // adding a specular map turns the globe black without having lighting
    var sun = new THREE.DirectionalLight( 0xffffff , 0.8);
    sun.position.set(0.8, 0.3, -0.3 ).normalize();
    var ambientLight = new THREE.AmbientLight( 0x555555 );
    //add sphere geometry from google globe JHE
    var globeGeometry = new THREE.SphereGeometry(sphere_radius, 200, 100);
    // Adds bumps, shininess
    var globeMaterial  = new THREE.MeshPhongMaterial();
    globeMaterial.map    = THREE.ImageUtils.loadTexture('./img/earth_dark.jpg');
    globeMaterial.normalMap    = THREE.ImageUtils.loadTexture('./img/earth_normal.jpg');
    globeMaterial.bumpScale = 0.05;
    globeMaterial.specularMap = THREE.ImageUtils.loadTexture('./img/earth_specular.jpg');
    globeMaterial.specular = new THREE.Color(0x444444);

    var skyboxGeometry = new THREE.CubeGeometry(50000, 50000, 50000);
    var skyboxMaterial = new THREE.MeshBasicMaterial({
      map: THREE.ImageUtils.loadTexture('./img/bsg-stars.png')
      , side: THREE.BackSide });
    var skybox = new THREE.Mesh(skyboxGeometry, skyboxMaterial);
    scene.add(skybox);

/////////////////////////////////////////////////////////////////////////////////
// clouds
    var tilt = 0.41;
    var rotationSpeed = 0.02;
    var cloudsScale = 1.005;

    var cloudTexture = THREE.ImageUtils.loadTexture('./img/clouds.png');
    var cloudGeometry = new THREE.SphereGeometry(sphere_radius+50, 200, 100);
    var materialClouds = new THREE.MeshLambertMaterial( { color: 0xffffff, map: cloudTexture, transparent: true } );

    meshClouds = new THREE.Mesh( cloudGeometry, materialClouds );
    meshClouds.scale.set( cloudsScale, cloudsScale, cloudsScale );
    meshClouds.rotation.z = tilt;
    setInterval(function(){
      meshClouds.rotation.z +=0.0001;
    },16)

    globe = new THREE.Mesh(globeGeometry, globeMaterial);
    globe.rotation.y = Math.PI;
    scene.add(globe);
    scene.add( meshClouds );
    scene.add(sun);
    scene.add(ambientLight);

    geometry = new THREE.SphereGeometry( 50, 25, 0 );

    // Create node selection, if set
    if(that.selection) {
      object_selection = new THREE.ObjectSelection({
        domElement: renderer.domElement,
        selected: function(obj) {
          if(obj !== null && obj.fbId !== undefined) {
            info_text.select = obj.fbId; //get this ID in printInfo for display
          } else {
            delete info_text.select;
          }
        }
      });
    }

    document.body.appendChild( renderer.domElement );

  }

  this.nodes = [];
  this.userNode;
  this.previousNode;
  this.addEdge = function(from, to, color, fade, width){
    width = width || 2;
    color = color || 'red';
    fade = fade || false;
    var fromNode;
    if(from === 'user'){
      fromNode = this.userNode;
    } else {
      fromNode = graph.getNode(from);
    }
    var toNode = graph.getNode(to);
    if(toNode === undefined){
      console.log('Node '+to +' not in the graph');
    } else {
      if(graph.addEdge(fromNode, toNode)){
        drawEdge(fromNode, toNode, color, fade, width);
      }
    }
  }
  /*
  goToNode is the function used to "fly to friends"
  */
  this.goToNode = function(id){
    console.log('WENT TO NODE');
    var node = graph.getNode(id);
    var finalX = node.position.x * 2.2;
    var finalY = node.position.y * 2.2;
    var finalZ = node.position.z * 2.2;

    var midX = (camera.position.x + finalX)/2*1.1;
    var midY = (camera.position.y + finalY)/2*1.1;
    var midZ = (camera.position.z + finalZ)/2*1.1;

    var vect1 = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z);
    var vect2 = new THREE.Vector3(midX, midY, midZ);
    var vect3 = new THREE.Vector3(finalX, finalY, finalZ);

    var curve = new THREE.QuadraticBezierCurve3();
    curve.v0 = vect1;
    curve.v1 = vect2;
    curve.v2 = vect3;

    var flyTo1 = curve.getPointAt(0.25);
    var flyTo2 = curve.getPointAt(0.5);
    var flyTo3 = curve.getPointAt(0.75);

    var tween = new createjs.Tween(camera.position)
    .to({x: flyTo1.x, y: flyTo1.y, z: flyTo1.z}, 300, createjs.Ease.linearInOut)
    .to({x: flyTo2.x, y: flyTo2.y, z: flyTo2.z}, 300, createjs.Ease.linearInOut)
    .to({x: flyTo3.x, y: flyTo3.y, z: flyTo3.z}, 300, createjs.Ease.linearInOut)
    .to({x: finalX, y: finalY, z: finalZ}, 300, createjs.Ease.linearInOut);

    camera.lookAt( scene.position );
    this.connectToUser(node);
    //$('.info-header').text(node.data.name);
  }

  this.connectToUser = function(node){
    if(this.userNode){
      if(graph.addEdge(node, this.userNode)){
        drawEdge(node, this.userNode, 'blue', true);
      }
    }
  }

  this.getCurrent = function(){
    return this.previousNode;
  }


  this.getNode = function(id){
    return graph.getNode(id);
  }

  this.createGraph = function(current, isUser) {
      //only add if lat and lon are not null
    if(current.longitude !== null && current.latitude !== null){
      //make a new node object
      var node = new Node(current.fbId);
      //set position of node object to equal lat/lon of datum
      node.position.x = current.latitude;
      node.position.y = current.longitude;
      node.data.name = current.name;
      if(isUser){
        this.userNode = node;
      }
      //add and render node
      graph.addNode(node);
      drawNode(node);


      this.nodes.push(node);
      return node;
    }
  }

  this.addPost = function(id, post, context){
    var postData = {story: post.story, message: post.message, picture: post.picture};
    var source = context.getNode(id);
    var node = new Node(post.id);
    node.position.x = source.position.x * (Math.random()*3);
    node.position.y = source.position.y * (Math.random()*3);
    node.position.z = source.position.z * (1 + Math.random());
    node.data.post = postData;
    graph.addNode(node);
    drawPost(source, node, context);
    return node;
  }

  this.createLayout = function(){
    var layout_options = {};
    layout_options.width = 2000;
    layout_options.height = 2000;
    layout_options.iterations = 100000;
    layout_options.layout = "3d";
    layout_options.positionUpdated = function(node) {
      max_X = Math.max(max_X, node.position.x);
      min_X = Math.min(min_X, node.position.x);
      max_Y = Math.max(max_Y, node.position.y);
      min_Y = Math.min(min_Y, node.position.y);

      node.data.draw_object.position.x = Math.random() * max_X;
      node.data.draw_object.position.y = Math.random() * max_Y;
      node.data.draw_object.position.z = Math.random() * max_X;
    }

    graph.layout = new Layout.ForceDirected(graph, layout_options);
    graph.layout.init();
    graph.layout.generate();
  }

  this.addUser = function(user, connect){
    connect = connect || false;
    var userNode = new Node(user.fbId);
    //set new position of user node to equal user lon and lat
    userNode.position.x = user.latitude;
    userNode.position.y = user.longitude;
    //add user node to graph
    graph.addNode(userNode);
    //draw user node on globe
    drawNode(userNode);
    //set global "usernode" to equal the rendered user node
    this.userNode = userNode;
    if(connect){
      var currentNode;
      for(var i=0; i<graph.nodes.length; i++){
        currentNode = graph.nodes[i];
        if(graph.addEdge(this.userNode, currentNode)){
          drawEdge(this.userNode, currentNode, 'blue');
        }
      }
    }
  }

  // Create a node object and add it to the scene.

  function drawNode(node) {
    //make a new sphere object

    //convert lat and lon to x/y coordinates on a sphere
    var phi = (90 - node.position.x) * Math.PI / 180;
    var theta = (180 - node.position.y) * Math.PI / 180;
    node.position.x = sphere_radius * Math.sin(phi) * Math.cos(theta);
    node.position.y = sphere_radius * Math.cos(phi);
    node.position.z = sphere_radius * Math.sin(phi) * Math.sin(theta);

    var ball = new THREE.SphereGeometry(10, 10, 10);
    material = new THREE.MeshBasicMaterial({ color: 'red' });
    // material.map = THREE.ImageUtils.loadTexture('./img/person.gif');
    draw_object = new THREE.Mesh(ball, material);
    draw_object.position.set(node.position.x*1.02, node.position.y*1.02,node.position.z*1.02);

    //this code stays the same, I use the fbId to get friend data on mouseover
    draw_object.fbId = node.id;
    draw_object.name = node.data.name

    node.data.draw_object = draw_object;
    node.layout = {}
    node.layout.max_X = 90;
    node.layout.min_X = -90;
    node.layout.max_Y = 180;
    node.layout.min_Y = -180;

    node.data.draw_object.lookAt(scene.position);
    scene.add( node.data.draw_object );
  }

    function drawPost(source, node, context) {

      var ball = new THREE.SphereGeometry(20, 10, 10);
      material = new THREE.MeshBasicMaterial({ color: 'yellow' });
      draw_object = new THREE.Mesh(ball, material);
      draw_object.position.set(source.position.x, source.position.y, source.position.z);
      draw_object.fbId = node.id;
      draw_object.name = node.data.name
      node.data.draw_object = draw_object;
      scene.add( node.data.draw_object );
      node.data.draw_object.lookAt(scene.position);
      
      var finalX = node.position.x;
      var finalY = node.position.y;
      var finalZ = node.position.z;

      var midX = (node.data.draw_object.position.x + finalX)/2*1.1;
      var midY = (node.data.draw_object.position.y + finalY)/2*1.1;
      var midZ = (node.data.draw_object.position.z + finalZ)/2*1.1;

      var vect1 = new THREE.Vector3(node.data.draw_object.position.x, node.data.draw_object.position.y, node.data.draw_object.position.z);
      var vect2 = new THREE.Vector3(midX, midY, midZ);
      var vect3 = new THREE.Vector3(finalX, finalY, finalZ);

      var curve = new THREE.QuadraticBezierCurve3();
      curve.v0 = vect1;
      curve.v1 = vect2;
      curve.v2 = vect3;

      var flyTo1 = curve.getPointAt(0.25);
      var flyTo2 = curve.getPointAt(0.5);
      var flyTo3 = curve.getPointAt(0.75);

      var tween = new createjs.Tween(node.data.draw_object.position)
      .to({x: flyTo1.x, y: flyTo1.y, z: flyTo1.z}, 300, createjs.Ease.linearInOut)
      .to({x: flyTo2.x, y: flyTo2.y, z: flyTo2.z}, 300, createjs.Ease.linearInOut)
      .to({x: flyTo3.x, y: flyTo3.y, z: flyTo3.z}, 300, createjs.Ease.linearInOut)
      .to({x: finalX, y: finalY, z: finalZ}, 300, createjs.Ease.linearInOut).call(function(){
        context.postPieces(node);
        context.addEdge(source.id, node.id, 'yellow',true, 0.5);
      })

      //this code stays the same, I use the fbId to get friend data on mouseover
      node.layout = {}
      node.layout.max_X = 90;
      node.layout.min_X = -90;
      node.layout.max_Y = 180;
      node.layout.min_Y = -180;

      node.data.draw_object.material.transparent = true;
      createjs.Tween.get(node.data.draw_object.material).wait(5000).to({opacity: 0}, 5000).call(function(){
        scene.remove(node.data.draw_object);
      });
  }

  // this function makes the "pieces" i.e. text or photos of a post fly out of the post sphere
  // when it reaches its resting spot
  this.postPieces = function(node){
    var pos = camera.position;
    var rnd = Math.random;
    var data = node.data.post;
    var onComplete = function(object){
      scene.remove(object);
      renderer.render( scene, camera );
    }
    var text = data.message || data.story;
    if(text !== undefined) {
      var text = text.split(' ');
      for(var i = 0; i < text.length; i++){
        if(text[i].toLowerCase() !== 'the'){
        var materialFront = new THREE.MeshBasicMaterial( { color: 'white' } );
        var textGeom = new THREE.TextGeometry( text[i], {
          size: 30, height: 4, curveSegments: 3,
          font: "helvetiker", weight: "bold", style: "normal",
          bevelEnabled: false, material: 0
          });
        
        var textMesh = new THREE.Mesh(textGeom, materialFront );
        
        textGeom.computeBoundingBox();
        var textWidth = textGeom.boundingBox.max.x - textGeom.boundingBox.min.x;
        
        textMesh.position.set( node.position.x, node.position.y, node.position.z );
        textMesh.lookAt(camera.position);
        textMesh.data = 'TEXT';
        scene.add(textMesh);
        createjs.Tween.get(textMesh.position).to({x: pos.x*(2+rnd()), y: pos.y*(2+rnd()), z: pos.z*(2+rnd())}, 9000).call(onComplete, [textMesh]);       
        }
      }
    }
    if(data.picture){
      var texture = new Image();
      texture.crossOrigin = "anonymous";
      texture.onload = function(){
        var material = new THREE.MeshBasicMaterial( { map: new THREE.Texture(texture), side:THREE.DoubleSide, transparent: true } );
        material.opacity = 0.7;
        var imageGeometry = new THREE.PlaneGeometry(texture.width, texture.height, 1, 1);
        var image = new THREE.Mesh(imageGeometry, material);
        image.position.set( node.position.x,node.position.y,node.position.z );

        image.material.map.needsUpdate = true;
        image.lookAt(camera.position);
        scene.add(image);
        createjs.Tween.get(image.position)
        .to({x: pos.x*(1+rnd()), y: pos.y*(1+rnd()), z: pos.z*(1+rnd())}, 8000)
        .call(onComplete, [image]);
      }
      texture.src = data.picture;
    }
  }

  this.displayPhoto = function(data, node){
    var onComplete = function(object){
      scene.remove(object);
      renderer.render( scene, camera );
    }
    var pos = camera.position;
    var rnd = Math.random;
    var texture = new Image();
    texture.crossOrigin = "anonymous";
    texture.onload = function(){
      var material = new THREE.MeshBasicMaterial( { map: new THREE.Texture(texture), side:THREE.DoubleSide, transparent: true } );
      material.opacity = 0.7;
      var imageGeometry = new THREE.PlaneGeometry(texture.width, texture.height, 1, 1);
      var image = new THREE.Mesh(imageGeometry, material);
      image.position.set( node.position.x,node.position.y,node.position.z );
      image.material.map.needsUpdate = true;
      image.lookAt(camera.position);
      scene.add(image);
      createjs.Tween.get(image.position)
      .to({x: pos.x*(0.9+(rnd()*0.4)), y: pos.y*(0.9+(rnd()*0.4)), z: pos.z*(0.9+(rnd()*0.4))}, 8000)
      .call(onComplete, [image]);
    }
    texture.src = data.picture;
  }

  // Create an edge object (line) and add it to the scene.
  function drawEdge(source, target, color, fade, width) {
    fade = fade || false;
    //var distance = latlonDistance(source.position, target.position);
    var multiplier = 2.0;

    //make a 3js line object
    material = new THREE.LineBasicMaterial( { color: 0xCCCCCC, opacity: 0.5, linewidth: width } );

    //cache the coordinates of the source and target nodes
    var sourceXy = source.position;
    var targetXy = target.position;

    //get averages (mid-point) between coordinates of source and target
    var AvgX = (sourceXy['x'] + targetXy['x'])/2;
    var AvgY = (sourceXy['y'] + targetXy['y'])/2;
    var AvgZ = (sourceXy['z'] + targetXy['z'])/2;
    //get difference between source and target
    var diffX = Math.abs(sourceXy['x'] - targetXy['x']);
    var diffY = Math.abs(sourceXy['y'] - targetXy['y']);
    //set middle point to average(x/y) and average(z + sum of difference(x/y))
    var middle = [ AvgX * multiplier, AvgY * multiplier, AvgZ * multiplier ];

    //make quadratic bezier out of the three points
    var curve = new THREE.QuadraticBezierCurve3(new THREE.Vector3(sourceXy['x'], sourceXy['y'], sourceXy['z']), new THREE.Vector3(middle[0], middle[1], middle[2]), new THREE.Vector3(targetXy['x'], targetXy['y'], targetXy['z']));

    //make a curve path and add the bezier curve to it
    var path = new THREE.CurvePath();
    path.add(curve);

    //create material for our line
    var curveMaterial = new THREE.LineBasicMaterial({
      color: color, linewidth: 2, transparent: true
    });

    //create curved line and add to scene
    curvedLine = new THREE.Line(path.createPointsGeometry(100), curveMaterial);
    curvedLine.lookAt(scene.position);
    var onComplete = function(curvedLine){
      scene.remove(curvedLine);
      renderer.render( scene, camera );
    }
    if(fade){
      curvedLine.material.transparent = true;
      createjs.Tween.get(curvedLine.material).wait(5000).to({opacity: 0}, 5000).call(onComplete, [curvedLine]);
    }
    scene.add(curvedLine);
  }

  // moves the camera away for post explosion
  this.moveOut = function(){
    // ***** maybe keep a boolean to check if the camera has already moved out
    //var newPos = {x: camera.position.x*1.4, y: camera.position.y*1.25, z: camera.position.z*1.3};
    //createjs.Tween.get(camera.position).to(newPos, 4000);
  }

  function animate() {
    requestAnimationFrame( animate );
    var dt = clock.getDelta();
    control.update(dt)
    // control.update();
    render();
    if(that.show_info) {
      printInfo();
    }
  }

  function render() {
    // Generate layout if not finished
    if(graph.layout){
      if(!graph.layout.finished) {
        graph.layout.generate();
      }
    }

    // Update position of lines (edges)
    for(var i=0; i<geometries.length; i++) {
      geometries[i].verticesNeedUpdate = true;
    }

    // set lookat of nodes to camera
    for(var i=0; i<graph.nodes.length; i++) {
      // graph.nodes[i].data.draw_object.lookAt(camera.position);
    }

    // render selection
    if(that.selection) {
      object_selection.render(scene, camera);
    }

    // render scene
    renderer.render( scene, camera );
  }

  function printInfo(text) {
    var str = '';
    for(var index in info_text) {
      if(str != '' && info_text[index] != '') {
        str += " - ";
      }
      str += info_text[index];
    }
    if(!watched[str]){
      watched[str] = true;
      var fbId = parseInt(str);
      if(str !== ""){
          getPic(fbId);
          goToRelay(fbId);
          postExplosion(fbId);
        }
      }
    }

  function findElement(tree, str){
    var result = false;
    for(var i = 0; i < tree.length; i++){
      if(tree[i].textContent === str){
        result = true;
      }
    }
    return result;
  }
}
;var initialize3d = function(){
  drawing = new Drawing.SphereGraph({numNodes: 50, showStats: true, showInfo: true});
  // this will kickoff Facebook API get requests and subsequent posts to app server
  // for data needed by Graph.js
  FBData.get('friendsQuery', function(){

  setTimeout(function(){
    FBData.getMutual();
  },100);
  // this will kickoff WebGL rendering
  $.get('/api/get-user').then(function(response){
    var user = JSON.parse(response);
    friendsList = user.friends;
    userNode = drawing.createGraph(user, true);
  })

	$.get('/api/get-friends').then(function(response){
		var friends = JSON.parse(response);
		friends = friends.data;
		setInterval(function(){
			if(friends.length){
				drawing.createGraph(friends.pop());
			}
		}, 0)
	});
    
  });

}
;var queryStringData = {
  friendsQuery: {
    queryString: [ "SELECT uid, name, current_location.latitude, current_location.longitude, pic_square ","FROM user ","WHERE uid in (","SELECT uid2 FROM friend ","WHERE uid1 = me())" ],
    url: '/api/save-friends',
    endpoint: '/fql'
  },
  timelineQuery: {
    queryString: [],
    url: '/api/save-timeline'
  },
  checkinsQuery: {
    queryString: ['checkins{place,id,from,created_time,message,tags}'],
    type: 'checkins',
    url: '/api/save-checkins',
    endpoint: '/me'
  },
  mutualFriends: {
    queryString: ['SELECT uid1 FROM friend WHERE uid2=[targetID] AND uid1 IN (SELECT uid2 FROM friend WHERE uid1=me())'],
    url: '/api/save-mutual',
    endpoint: '/me'
  },
  newsFeed: {
    queryString: ['posts{id,type,from,to,with_tags,created_time,message,story,link,name,tags,picture}'],
    endpoint: false
  },
  userPhotos: {
    queryString: ['photos{id}'],
    endpoint: false
  },
  getPhoto: {
    queryString:[''],
    endpoint: false
  },
  getUser: {
    queryString:[''],
    endpoint: false
  },
  getProfilePic: {
    queryString:['picture.type(large)'],
    endpoint: false
  }
}
;var filter = function(array){
  var results = [];
  for(var i = 0; i < array.length; i++){
    results.push(array[i].id)
  }
  return results;
}

var FBData = (function(){

var queryMap = queryStringData;

function getRequest(query, endpoint, cb){
  if(typeof endpoint === "function"){
    cb = endpoint;
  };
  var queryData = queryMap[query];
  // generate a parameter object for either FQL or Graph API syntax
  var queryType;
  if(!queryData.endpoint){
    queryType = '/' + endpoint;
  } else {
    queryType = queryData.endpoint;
  }
  var queryParameters = {};
  if(queryType === "/fql"){
    queryParameters["q"] = queryData.queryString.join('');
  } else {
    queryParameters["fields"] = queryData.queryString.join('');;
  }
  console.log('my query:', queryType, queryParameters);
  // querying attempt using FQL + facebook API
  FB.api(
    queryType,
    queryParameters,

    // callback when async http request responds
    function(Qresponse){
      var payload;
      var data;
      if(Qresponse){
        // special prep just for checkin data from facebook to app server
        if(queryData.type === 'checkins'){
          fetchPaginatedCheckinData(Qresponse);
        }
        data = data || Qresponse;
        payload = JSON.stringify(data)
        if(queryData.url){
          $.post(queryData.url, {response: payload}).then(function(response){
            console.log('ajax success:', queryData.url, response);
            if(cb !== undefined){
              cb();
            }
          })
        } else {
          return cb(payload);
        }
      }
    }
  );
}

function fetchPaginatedCheckinData(initialGetResponse){
  if(initialGetResponse.next){
    var nextPage = initialGetResponse.next;
    var data = formatCheckinDataForDB(initialGetResponse);
    console.table(data);
    setTimeout(function(data){
      $.get(nextPage,
        function(nextResponse){
          console.table('paginated response:', nextResponse);
          fetchPaginatedCheckinData(nextResponse);
        }
      );
    });
  }
}

function postBatch(queryArray, cb){
  FB.api('/', 'GET', {
    batch: queryArray 
  }, function(response){
    cb(response);
  })
}

function getMutual(){
  $.get('/api/get-friends').then(function(response){
    response = JSON.parse(response);
    var friends = response.data;
    $('.friends').text(friends.length.toString());
    $('.helper').toggle();
    $('.title').toggle();
    var done = 0;
    var eachFriend = function(friendsArray){
      var current = friendsArray.pop();
      var id = current.fbId;
      FB.api('/me/mutualfriends/'+id, function(response){
        var mutuals = filter(response.data);
        var payload = {userB: id, mutuals: mutuals}
        $.post('/api/save-mutual', payload).then(function(response){
          done++;
          $('.done').text(''+ done);
          if(friendsArray.length){
            return eachFriend(friendsArray);
          } else {
            return;
          }
        })
      });
    };
    eachFriend(friends);
  });
}

function getPostLikes(id, cb){
  FB.api('/'+id+'/likes',function (response){
    cb(response);
  });
}

// https:graph.facebook.com/{user-id}?fields=checkins{tags,from,message,...}
function formatCheckinDataForDB(facebookResponse){
  var formattedData = [];
  console.log('fb response',facebookResponse);
  arrayOfCheckins = (facebookResponse.checkins) ? facebookResponse.checkins.data : [];
  arrayOfCheckins.forEach(function(item, index){
    if(item){
      var formattedItem = {
        fbId: item.id,
        checkin_date: item.data[index].created_time,

        place: {
          fbId: item.place.id,
          name: item.place.name,
          photo: null
        } || null,
        latitude: item.place.latitude,
        longitude: item.place.longitude,

        from: {
          name: item.from.name,
          fbId: item.from.id
        } || null,
        message: item.message || null,
        clique: item.tags.data || []
      };
    results.push(formattedItem);
    }
  });
  return formattedData;
}

return {
  get: getRequest,
  getMutual: getMutual,
  getPostLikes: getPostLikes,
  batch: postBatch
};
})();
